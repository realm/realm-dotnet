# Do not modify!
# This file was generated from a template using https://github.com/apple/pkl

name: PR Build
'on':
  pull_request:
    paths:
    - '**.cs'
    - '**.cpp'
    - '**.hpp'
    - '**.csproj'
    - '**CMakeLists.txt'
    - '**.ps1'
    - '**.sh'
    - '**.props'
    - wrappers/realm-core
    - .github/workflows/*.yml
    - '!.github/workflows/main.yml'
    - '!.github/workflows/publish-*.yml'
    - .github/actions/**
    - Tests/Tests.Android/Properties/AndroidManifest.xml
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build-wrappers:
    name: Wrappers
    uses: ./.github/workflows/wrappers.yml
  deploy-baas:
    name: Deploy BaaS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: actions/setup-dotnet@607fce577a46308457984d59e4954e075820f10a
      with:
        dotnet-version: 6.0.x
    - name: Deploy Apps
      working-directory: Tools/DeployApps
      run: dotnet run deploy-apps --baasaas-api-key=${{ secrets.BAASAAS_API_KEY }} --baas-differentiator=${{ matrix.differentiator }}-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        differentiator:
        - code-coverage
  build-packages:
    name: Package
    needs:
    - build-wrappers
    uses: ./.github/workflows/build-packages.yml
    with:
      build-docs: ${{ contains(github.head_ref, 'release') }}
  build-unity:
    name: Package
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/build-unity.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-unity:
    name: Test
    needs:
    - build-unity
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-unity.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
      settings: '["Mono-Net4"]'
      platform: '[{ "os": "windows", "testPlatform": "Windows64" }, { "os": "linux", "testPlatform": "Linux64" }]'
  test-net-framework:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-net-framework.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-uwp-managed:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-uwp-managed.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
    secrets:
      Pfx_Password: ${{ secrets.Pfx_Password }}
      Base64_Encoded_Pfx: ${{ secrets.Base64_Encoded_Pfx }}
  test-net-core:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-net-core.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
      framework: '["net8.0"]'
  test-macos:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-macos.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-ios:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-ios.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-tvos:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-tvos.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-android:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-android.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
    secrets:
      AWS_DEVICEFARM_ACCESS_KEY_ID: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
      AWS_DEVICEFARM_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
      DEVICEFARM_PROJECT_ARN: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
      DEVICEFARM_ANDROID_POOL_ARN: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
  test-woven-classes:
    name: Test
    needs:
    - build-packages
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-woven-classes.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
  test-source-generation:
    name: Test
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-source-generation.yml
  test-weaver:
    name: Test
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-weaver.yml
  test-code-coverage:
    name: Test
    needs:
    - build-packages
    - deploy-baas
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/test-code-coverage.yml
    with:
      version: ${{ needs.build-packages.outputs.package_version }}
    secrets:
      BaaSaasApiKey: ${{ secrets.BAASAAS_API_KEY }}
  cleanup-baas:
    name: Cleanup BaaS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: actions/setup-dotnet@607fce577a46308457984d59e4954e075820f10a
      with:
        dotnet-version: 6.0.x
    - name: Terminate Baas
      working-directory: Tools/DeployApps
      run: dotnet run terminate-baas --baasaas-api-key=${{ secrets.BAASAAS_API_KEY }} --baas-differentiator=${{ matrix.differentiator }}-${{ github.run_id }}-${{ github.run_attempt }}
    strategy:
      matrix:
        differentiator:
        - code-coverage
  verify-namespaces:
    name: Verify Namespaces
    needs:
    - build-packages
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Fetch Realm
      uses: actions/download-artifact@v3
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.PlatformHelpers
      uses: actions/download-artifact@v3
      with:
        name: Realm.PlatformHelpers.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityUtils
      uses: actions/download-artifact@v3
      with:
        name: Realm.UnityUtils.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityWeaver
      uses: actions/download-artifact@v3
      with:
        name: Realm.UnityWeaver.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - run: dotnet tool install ilspycmd -g --version 8.0.0.7345
    - name: Verify Namespaces
      run: |-
        $isFailure = $false
        Get-ChildItem ./Realm/packages -Filter *.nupkg | Foreach-Object {
          $targetPath = Join-Path ./Realm/packages $_.BaseName
          Expand-Archive $_.FullName -DestinationPath $targetPath

          Get-ChildItem $targetPath -Filter *.dll -Recurse | ForEach-Object {
            if (-not ($_.FullName -match "runtimes")) {
              $ilspyOutput = ilspycmd $_.FullName

              $parentDll = $_.FullName

              $ilspyOutput | ForEach-Object {
                if ($_ -match "namespace.*Realm(\.|$)") {
                  Write-Output "::error file=$parentDll::Realm present in namespace - $($_)"
                  Set-Variable "isFailure" -Value $true
                }
              }
            }
          }
        }

        if ($isFailure) {
          exit 1
        }
      shell: pwsh
