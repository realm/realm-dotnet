module pr

amends "GithubAction/GithubAction.pkl"

import "helpers/Common.pkl"
import "helpers/BaaS.pkl"
import "helpers/Lint.pkl"
import "helpers/Test.pkl" as TestJobs

local class JobNamesDefition {
  const wrappers: String = "build-wrappers"
  const packages: String = "build-packages"
  const unity: String = "build-unity"
  const baas: String = "deploy-baas"
  const coverage: String = "test-code-coverage"
}

local function createTestJob(workflow: String): ReusableWorkflowJob = new ReusableWorkflowJob {
  uses = "./.github/workflows/\(workflow).yml"
  name = "Test"
  `if` = Common.ifNotCanceledCondition
  needs {
    JobNames.packages
  }
  with {
    ["version"] = "${{ needs.\(JobNames.packages).outputs.package_version }}"
  }
}

local JobNames = new JobNamesDefition{}

local baasDifferentiators: Listing<Common.SyncDifferentiator> = new {
  "code-coverage"
}

name = "PR Build"
on {
  pull_request {
    paths {
      "**.cs"
      "**.cpp"
      "**.hpp"
      "**.csproj"
      "**CMakeLists.txt"
      "**.ps1"
      "**.sh"
      "**.props"
      "wrappers/realm-core"
      ".github/workflows/*.yml"
      "!.github/workflows/main.yml"
      "!.github/workflows/publish-*.yml"
      ".github/actions/**"
      "Tests/Tests.Android/Properties/AndroidManifest.xml"
    }
  }
}

env = Common.defaultEnv

concurrency {
  group = "${{ github.head_ref || github.run_id }}"
  `cancel-in-progress` = true
}

jobs {
  [JobNames.wrappers] = new ReusableWorkflowJob {
    uses = "./.github/workflows/wrappers.yml"
    name = "Wrappers"
  }
  [JobNames.baas] = BaaS.deploy(baasDifferentiators) // TODO: run baasaas tests for more targets
  [JobNames.packages] = new ReusableWorkflowJob {
    uses = "./.github/workflows/build-packages.yml"
    name = "Package"
    needs {
      JobNames.wrappers
    }
    with {
      ["build-docs"] = "${{ contains(github.head_ref, 'release') }}"
    }
  }
  [JobNames.unity] = new ReusableWorkflowJob {
    uses = "./.github/workflows/build-unity.yml"
    name = "Package"
    with {
      ["version"] = "${{ needs.build-packages.outputs.package_version }}"
    }
    needs {
      JobNames.packages
    }
    `if` = Common.ifNotCanceledCondition
  }
  ["test-unity"] = new ReusableWorkflowJob {
    uses = "./.github/workflows/test-unity.yml"
    name = "Test"
    with {
      ["version"] = "${{ needs.build-packages.outputs.package_version }}"
      ["settings"] = "[\"Mono-Net4\"]"
      ["platform"] = "[{ \"os\": \"windows\", \"testPlatform\": \"Windows64\" }, { \"os\": \"linux\", \"testPlatform\": \"Linux64\" }]"
    }
    needs {
      JobNames.unity
      JobNames.packages
    }
    `if` = Common.ifNotCanceledCondition
  }
  ["test-net-framework"] = TestJobs.netFramework(JobNames.packages, baasDifferentiators)
  ["test-uwp"] = TestJobs.uwp(JobNames.packages, baasDifferentiators)
  ["test-net-core"] = TestJobs.netCore(JobNames.packages, new Listing { "net8.0" })
  ["test-macos-xamarin"] = TestJobs.macOS_Xamarin(JobNames.packages)
  ["test-macos-maui"] = TestJobs.macOS_Maui(JobNames.packages, baasDifferentiators)
  ["test-ios-xamarin"] = TestJobs.iOS_Xamarin(JobNames.packages)
  ["test-ios-maui"] = TestJobs.iOS_Maui(JobNames.packages, baasDifferentiators)
  ["test-tvos"] = TestJobs.tvOS(JobNames.packages, baasDifferentiators)
  ["test-android-xamarin"] = TestJobs.android_Xamarin(JobNames.packages)
  ["test-android-maui"] = TestJobs.android_Maui(JobNames.packages, baasDifferentiators)
  ["test-woven-classes"] = TestJobs.wovenClasses(JobNames.packages)
  ["test-source-generation"] = TestJobs.sourceGeneration()
  ["test-weaver"] = TestJobs.weaver()
  ["test-code-coverage"] = (createTestJob("test-code-coverage")) {
    needs {
      JobNames.baas
    }
    secrets {
      ["BaaSaasApiKey"] = "${{ secrets.BAASAAS_API_KEY }}"
    }
  }
  ["cleanup-baas"] = (BaaS.cleanup(baasDifferentiators)) {
    needs {
      JobNames.coverage
    }
  }
  ["verify-namespaces"] = Lint.verifyNamespaces(JobNames.packages)
  ["lint"] = Lint.lint()
}
