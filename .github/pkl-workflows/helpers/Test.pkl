module test

import "../GithubAction/GithubAction.pkl" as gha
import "Common.pkl"
import "Steps.pkl"
import "BaaS.pkl"

local const outputFile = "TestResults.xml"

// Public test targets
function netFramework(_syncDifferentiators: Listing<String>): gha.StepJobBase = testJob(
  new TestConfig {
    title = ".NET Framework"
    needsPackages = true
    syncDifferentiator = "net-framework"
    syncDifferentiators = _syncDifferentiators
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Realm.Tests"
      properties {
        ["TargetFramework"] = "net461"
      }
    })
    new gha.Step {
      name = "Run the tests"
      run = "./Tests/Realm.Tests/bin/\(Common.configuration)/net461/Realm.Tests.exe --result=\(outputFile) --labels=After \(baasTestArgs(config))"
    }
    ...reportTestResults(config)
  })

function netCore(frameworks: Listing<Common.NetFramework>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}"
    shouldCleanWorkspace = true
  },
  "${{ matrix.os.runner }}",
  new gha.MatrixStrategy {
    matrix {
      ["framework"] = frameworks
      ["os"] = new Listing<MatrixOS> {
        new { runner = "windows-latest" runtime = "win-x64" }
        new { runner = "ubuntu-latest" runtime = "linux-x64" }
        new { runner = "macos-13" runtime = "osx-x64" }
      }
      ["include"] = new Listing {
        new Mapping {
          ["framework"] = "net8.0"
          ["os"] = new MatrixOS { runner = "macos-14" runtime = "osx-arm64" }
        }
      }
    }
  },
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    // To avoid NU5037 error
    new gha.Step {
      name = "Clear nuget cache"
      run = "dotnet nuget locals all --clear"
      `if` = "${{ matrix.os.runner == 'win81' }}"
    }
    new gha.Step {
      id = "get-net-version"
      name = "Extract .NET version"
      run = """
          NET_VERSION=$(echo '${{ matrix.framework }}.x' | sed 's/net//g')
          echo "version=$NET_VERSION" >> $GITHUB_OUTPUT
        """
      shell = "bash"
    }
    Steps.setupDotnet("${{ steps.get-net-version.outputs.version }}")
    ...Steps.dotnetPublish("Tests/Realm.Tests", "${{ matrix.framework }}", "${{ matrix.os.runtime }}", getTestProps())
    ...dotnetRunTests(true)
    ...reportTestResults(config)
  })

function weaver(): gha.StepJobBase = testJob(
  new TestConfig {
    title = "Weaver"
    shouldCleanWorkspace = true
  },
  "${{ matrix.os.runner }}",
  new gha.MatrixStrategy {
    matrix {
      ["os"] = new Listing<MatrixOS> {
        new { runner = "windows-latest" runtime = "win-x64" }
        new { runner = "ubuntu-latest" runtime = "linux-x64" }
        new { runner = "macos-14" runtime = "osx-arm64" }
      }
    }
  },
  (config) -> new Listing<gha.Step> {
    ...Steps.checkout()
    ...Steps.setupWorkloads(null, "6.0.x")
    ...Steps.dotnetPublish("Tests/Weaver/Realm.Fody.Tests", "net6.0", "${{ matrix.os.runtime }}", new Mapping{}).toList()
    ...dotnetRunTests(false)
    ...reportTestResults(config)
  }
)

function sourceGeneration(): gha.StepJobBase = testJob(
  new TestConfig {
    title = "Source Generation"
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    ...Steps.checkout()
    ...Steps.setupWorkloads(null, "6.0.x")
    ...Steps.dotnetPublish("Tests/SourceGenerators/Realm.SourceGenerator.Tests", "net6.0", "win-x64", new Mapping{}).toList()
    ...dotnetRunTests(false)
    ...reportTestResults(config)
  })

function wovenClasses(): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Woven Classes"
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...Steps.dotnetPublish("Tests/Realm.Tests", "net8.0", "win-x64", (getTestProps()) {
      ["TestWeavedClasses"] = "true"
    })
    ...dotnetRunTests(false)
    ...reportTestResults(config)
  }
)

function tvOS(_syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Xamarin.tvOS"
    syncDifferentiator = "tvos"
    syncDifferentiators = _syncDifferentiators
  },
  "macos-12",
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Tests.XamarinTVOS"
      properties {
        ["Platform"] = "iPhoneSimulator"
      }
    })
    Steps.runSimulator(new Steps.SimulatorConfig{
      appPath = "Tests/Tests.XamarinTVOS/bin/iPhoneSimulator/\(Common.configuration)/Tests.XamarinTVOS.app"
      arguments = "--headless --result=${{ github.workspace }}/\(outputFile) --labels=All \(baasTestArgs(config))"
      bundleId = "io.realm.Tests-XamarinTVOS"
      iphoneToSimulate = "Apple-TV-1080p"
      os = "tvOS"
    })
    ...reportTestResults(config)
  })

function iOS_Xamarin(): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Xamarin.iOS"
  },
  "macos-12",
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Tests.iOS"
      properties {
        ["Platform"] = "iPhoneSimulator"
      }
    })
    Steps.runSimulator(new Steps.SimulatorConfig{
      appPath = "Tests/Tests.iOS/bin/iPhoneSimulator/\(Common.configuration)/Tests.iOS.app"
      arguments = "--headless --result=${{ github.workspace }}/\(outputFile) --labels=All \(baasTestArgs(config))"
      bundleId = "io.realm.dotnettests"
      iphoneToSimulate = "iPhone-8"
      os = "iOS"
    })
    ...reportTestResults(config)
  })

function iOS_Maui(_syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Maui.iOS"
    syncDifferentiator = "ios-maui"
    syncDifferentiators = _syncDifferentiators
    transformResults = true
  },
  "macos-14",
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...Steps.setupWorkloads("maui", null)
    Steps.setupXcode("latest-stable")
    Steps.dotnetBuild("Tests/Tests.Maui", "net8.0-ios", null, getTestProps())
    Steps.runSimulator(new Steps.SimulatorConfig{
      appPath = "Tests/Tests.Maui/bin/\(Common.configuration)/net8.0-ios/iossimulator-arm64/Tests.Maui.app"
      arguments = "--headless --result=${{ github.workspace }}/\(outputFile) --labels=All \(baasTestArgs(config))"
      bundleId = "io.realm.mauitests"
      iphoneToSimulate = "iPhone-15"
      os = "iOS"
    })
    ...reportTestResults(config)
  })

function macOS_Xamarin(): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Xamarin.macOS"
  },
  "macos-12",
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Tests.XamarinMac"
    })
    new {
      name = "Run the tests"
      run = "Tests/Tests.XamarinMac/bin/\(Common.configuration)/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --result=${{ github.workspace }}/\(outputFile) --labels=All"
    }
    ...reportTestResults(config)
  })

function macOS_Maui(_syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Maui.MacCatalyst"
    syncDifferentiator = "macos-maui"
    syncDifferentiators = _syncDifferentiators
    transformResults = true
  },
  "macos-14",
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    ...Steps.setupWorkloads("maui", null)
    Steps.setupXcode("latest-stable")
    Steps.dotnetBuild("Tests/Tests.Maui", "net8.0-maccatalyst", "osx-arm64", getTestProps())
    new {
      name = "Run the tests"
      run = "Tests/Tests.Maui/bin/\(Common.configuration)/net8.0-maccatalyst/maccatalyst-arm64/Tests.Maui.app/Contents/MacOS/Tests.Maui --headless --result=${{ github.workspace }}/\(outputFile) --labels=All \(baasTestArgs(config))"
    }
    ...reportTestResults(config)
  })

function uwp(_syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "UWP"
    syncDifferentiators = _syncDifferentiators
    syncDifferentiator = "uwp"
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    new {
      name = "Import test certificate"
      run = """
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        [IO.File]::WriteAllBytes("${{ github.workspace }}\\Tests\\Tests.UWP\\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
        certutil -f -p "${{ secrets.Pfx_Password }}" -importpfx my ${{ github.workspace }}\\Tests\\Tests.UWP\\Tests.UWP_TemporaryKey.pfx
        """
      shell = "powershell"
    }
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Tests.UWP"
      properties {
        ["AppxBundle"] = "Always"
        ["PackageCertificateKeyFile"] = "${{ github.workspace }}\\Tests\\Tests.UWP\\Tests.UWP_TemporaryKey.pfx"
        ["PackageCertificatePassword"] = "${{ secrets.Pfx_Password }}"
        ["UseDotNetNativeToolchain"] = "false"
        ["AppxBundlePlatforms"] = "x64"
      }
    })
    new {
      name = "Run the tests"
      run = "./Tests/Tests.UWP/RunTests.ps1 -ExtraAppArgs '\(baasTestArgs(config))'"
      shell = "powershell"
    }
    ...reportTestResultsWithCustomFile("${{ env.TEST_RESULTS }}", config)
  })

function android_Xamarin(): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Xamarin.Android"
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    Steps.setupJDK()
    ...prepareTests(config)
    ...buildTests(new Steps.MSBuildConfig {
      project = "Tests/Tests.Android"
      target = "SignAndroidPackage"
      properties {
        ["AndroidUseSharedRuntime"] = "False"
        ["EmbedAssembliesIntoApk"] = "True"
      }
    })
    ...Steps.runDeviceFarm(new Steps.DeviceFarmConfig {
      apkPath = "${{ github.workspace }}/Tests/Tests.Android/bin/Release/io.realm.xamarintests-Signed.apk"
      appId = "io.realm.xamarintests"
    })
    ...reportTestResultsWithCustomFile("${{ steps.run_tests.outputs.test-results-path }}", config)
  })

function android_Maui(_syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = testJob(
  new TestConfig {
    needsPackages = true
    title = "Maui.Android"
    syncDifferentiator = "android-maui"
    syncDifferentiators = _syncDifferentiators
    transformResults = true
  },
  new gha.WindowsLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    Steps.setupJDK()
    ...prepareTests(config)
    ...Steps.setupWorkloads("maui", null)
    ...Steps.dotnetPublish("Tests/Tests.Maui", "net8.0-android", /* runtime */ null, getTestProps())
    ...Steps.runDeviceFarm(new Steps.DeviceFarmConfig {
      apkPath = "${{ github.workspace }}/Tests/Tests.Maui/bin/Release/net8.0-android/publish/io.realm.mauitests-Signed.apk"
      appId = "io.realm.mauitests"
    })
    ...reportTestResultsWithCustomFile("${{ steps.run_tests.outputs.test-results-path }}", config)
  })

function codeCoverage(wrappersJob: String, _syncDifferentiators: Listing<Common.SyncDifferentiator>): gha.StepJobBase = (testJob(
  new TestConfig {
    title = "Code Coverage"
    syncDifferentiator = "code-coverage"
    syncDifferentiators = _syncDifferentiators
    useWrappers = true
  },
  new gha.UbuntuLatest{},
  null,
  (config) -> new Listing<gha.Step> {
    ...prepareTests(config)
    new gha.Step {
      name = "Setup Coverlet & Report Generator"
      run = """
        dotnet tool install coverlet.console --tool-path tools
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
        echo "${{ github.workspace }}/tools" >> $GITHUB_PATH
        """
    }
    ...Steps.dotnetPublish("Tests/Realm.Tests", "net8.0", "linux-x64", new Mapping { ["RealmTestsStandaloneExe"] = "true" })
    new gha.Step {
      name = "Run the tests"
      run = "./tools/coverlet ./Tests/Realm.Tests/bin/\(Common.configuration)/net8.0/linux-x64 -t ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Tests -a '--result=\(outputFile) --labels=After\(baasTestArgs(config))' -f lcov -o ./report.lcov --exclude '[Realm.Tests]*' --exclude '[Realm.Fody]*' --exclude '[Realm.PlatformHelpers]*'"
    } |> enableCoreDumps(true)
    archiveCoreDump()
    ...Steps.publishCoverage("./report.lcov")
    ...reportTestResults(config)
  })) {
    needs {
      wrappersJob
    }
  }

// Private helpers
local function testJob(config: TestConfig, runsOn: gha.Machine | String, _strategy: gha.MatrixStrategy?, _steps: Function1<TestConfig, Listing<gha.Step>>): gha.StepJobBase = (if (_strategy != null) new gha.MatrixJob{
  strategy = _strategy
} else new gha.Job{}) {
  name = "Test \(config.title)"
  `runs-on` = runsOn
  when (config.needsPackages) {
    needs {
      Common.job_Packages
      when (config.runSyncTests) {
        Common.job_Baas
      }
    }
  }
  `if` = Common.ifNotCanceledCondition
  `timeout-minutes` = Common.testTimeout
  steps = _steps.apply(config)
}

local function prepareTests(config: TestConfig(needsPackages == true || useWrappers == true)): Listing<gha.Step> = new Listing {
  ...Steps.checkout()
  ...cleanWorkspace(config.shouldCleanWorkspace)
  ...fetchTestArtifacts(Common.job_Packages, config.useWrappers)
  ...BaaS.deployStep(config.syncDifferentiator, config.runSyncTests)
}

local function cleanWorkspace(shouldClean: Boolean): Listing<gha.Step> = new Listing {
  when (shouldClean) {
    new gha.Step {
      name = "Cleanup Workspace"
      run = "git clean -fdx"
    }
  }
}

local function fetchTestArtifacts(packageJob: String, useWrappers: Boolean): List<gha.Step> = if (useWrappers)
  Steps.fetchWrappers()
  else Steps.fetchPackages(packageJob, Common.nugetPackages)

local function buildTests(config: Steps.MSBuildConfig): List<gha.Step> = Steps.msbuild((config) {
  properties {
    ...getTestProps()
  }
})

local function baasTestArgs(config: TestConfig): String = if (config.runSyncTests) " --baasaas-api-key=${{ secrets.BAASAAS_API_KEY}} --baas-differentiator=\(config.syncDifferentiator)-${{ github.run_id }}-${{ github.run_attempt }}" else ""

local function reportTestResults(config: TestConfig): Listing<gha.Step> = reportTestResultsWithCustomFile(outputFile, config)

local function reportTestResultsWithCustomFile(_outputFile: String, config: TestConfig): Listing<gha.Step> = new {
  local __outputFile = if (config.transformResults) "\(_outputFile)_transformed.xml" else _outputFile
  when (config.transformResults) {
    new gha.Step {
      name = "Transform Results"
      run = "xsltproc --output \(__outputFile) Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt \(_outputFile)"
    }
  }
  new gha.Step {
    name = "Publish Unit Test Results"
    uses = "LaPeste/test-reporter@510caf50a955b1003bec48a6494be4d6537f3a0b"
    `if` = "always()"
    with {
      ["name"] = "Results \(config.title)"
      ["path"] = __outputFile
      ["reporter"] = "java-junit"
      ["list-suites"] = "failed"
      ["path-replace-backslashes"] = true
      ["fail-on-error"] = true
    }
  }
}

local function getTestProps(): Mapping<String, String> = new Mapping {
  ["RestoreConfigFile"] = "Tests/Test.NuGet.Config"
  ["UseRealmNupkgsWithVersion"] = "${{ needs.\(Common.job_Packages).outputs.package_version }}"
  ["RealmTestsStandaloneExe"] = "true"
}

local function dotnetRunTests(enableCoreDumps: Boolean): Listing<gha.Step> = new Listing {
  new gha.Step {
    name = "Run the tests"
    run = "${{ steps.dotnet-publish.outputs.executable-path }} --result=\(outputFile) --labels=After"
  } |> enableCoreDumps(enableCoreDumps)
  when (enableCoreDumps) {
    archiveCoreDump()
  }
}

local function enableCoreDumps(enable: Boolean): Mixin<gha.Step> = new Mixin<gha.Step> {
  when (enable) {
    env {
      ["DOTNET_DbgEnableMiniDump"] = 1
      ["DOTNET_EnableCrashReport"] = 1
    }
  }
}

local function archiveCoreDump(): gha.Step = new {
  name = "Archive core dump"
  uses = "actions/upload-artifact@v4"
  `if` = "${{ failure() && runner.os != 'Windows' }}"
  with {
    ["name"] = "crash-report-net-core-${{ runner.os }}-${{ runner.arch }}"
    ["path"] = "/tmp/coredump*"
  }
}

local class MatrixOS {
  runner: "windows-latest" | "ubuntu-latest" | "macos-13" | "macos-14"
  runtime: Common.NetRuntime
}

local class TestConfig {
  title: String
  needsPackages: Boolean = false
  useWrappers: Boolean = false
  shouldCleanWorkspace: Boolean = false
  syncDifferentiator: Common.SyncDifferentiator? = null
  transformResults: Boolean = false
  syncDifferentiators: Listing<Common.SyncDifferentiator>?
  runSyncTests: Boolean = syncDifferentiator != null && (syncDifferentiators?.toList()?.contains(syncDifferentiator) ?? false)
}
