module test

import "../GithubAction/GithubAction.pkl" as gha
import "Common.pkl"
import "Steps.pkl"
import "BaaS.pkl"

local const outputFile = "TestResults.xml"

// Public test targets
function netFramework(_packageJob: String, syncDifferentiators: Listing<String>): gha.Job = new {
  local testConfig = new TestConfig {
    packageJob = _packageJob
    runSyncTests = syncDifferentiators.toList().contains("net-framework")
    syncDifferentiator = "net-framework"
    title = ".NET Framework"
  }
  name = "Test \(testConfig.title)"
  needs {
    _packageJob
  }
  `if` = Common.ifNotCanceledCondition
  `runs-on` = new gha.WindowsLatest{}
  `timeout-minutes` = Common.testTimeout
  steps {
    ...prepareTests(testConfig)
    ...buildTests(_packageJob, "Tests/Realm.Tests", new Mapping {
      ["TargetFramework"] = "net461"
    })
    new gha.Step {
      name = "Run the tests"
      run = "./Tests/Realm.Tests/bin/\(Common.configuration)/net461/Realm.Tests.exe --result=\(outputFile) --labels=After \(baasTestArgs(testConfig))"
    }
    ...reportTestResults(testConfig)
  }
}

function netCore(_packageJob: String, frameworks: Listing<Common.NetFramework>): gha.MatrixJob = new {
  local testConfig = new TestConfig {
    packageJob = _packageJob
    title = "${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}"
    shouldCleanWorkspace = true
  }

  name = "Test \(testConfig.title)"
  needs {
    _packageJob
  }
  `runs-on` = "${{ matrix.os.runner }}"
  `timeout-minutes` = Common.testTimeout
  `if` = Common.ifNotCanceledCondition
  strategy {
    matrix {
      ["framework"] = frameworks
      ["os"] = new Listing<MatrixOS> {
        new { runner = "windows-latest" runtime = "win-x64" }
        new { runner = "ubuntu-latest" runtime = "linux-x64" }
        new { runner = "macos-13" runtime = "osx-x64" }
      }
      ["include"] = new Listing {
        new Mapping {
          ["framework"] = "net8.0"
          ["os"] = new MatrixOS { runner = "macos-14" runtime = "osx-arm64" }
        }
      }
    }
  }
  steps {
    ...prepareTests(testConfig)
    // To avoid NU5037 error
    new gha.Step {
      name = "Clear nuget cache"
      run = "dotnet nuget locals all --clear"
      `if` = "${{ matrix.os.runner == 'win81' }}"
    }
    new gha.Step {
      id = "get-net-version"
      name = "Extract .NET version"
      run = """
        NET_VERSION=$(echo '${{ matrix.framework }}.x' | sed 's/net//g')
        echo "version=$NET_VERSION" >> $GITHUB_OUTPUT
      """
      shell = "bash"
    }
    Steps.setupDotnet("${{ steps.get-net-version.outputs.version }}")
    ...dotnetPublishNetCoreTests(_packageJob, "Tests/Realm.Tests", "${{ matrix.framework }}", "${{ matrix.os.runtime }}")
    new gha.Step {
      name = "Run the tests"
      env {
        ["DOTNET_DbgEnableMiniDump"] = 1
        ["DOTNET_EnableCrashReport"] = 1
      }
      run = "${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Tests --result=\(outputFile) --labels=After"
    }
    new gha.Step {
      name = "Archive core dump"
      uses = "actions/upload-artifact@v4"
      `if` = "failure()"
      with {
        ["name"] = "crash-report-net-core-${{ matrix.os.runner }}-${{ matrix.os.runtime }}"
        ["path"] = "/tmp/coredump*"
      }
    }
    ...reportTestResults(testConfig)
  }
}

function weaver(): gha.MatrixJob = new {
  local testConfig = new TestConfig {
    title = "Weaver"
    shouldCleanWorkspace = true
  }

  name = "Test \(testConfig.title)"
  strategy {
    matrix {
      ["os"] = new Listing<MatrixOS> {
        new { runner = "windows-latest" runtime = "win-x64" }
        new { runner = "ubuntu-latest" runtime = "linux-x64" }
        new { runner = "macos-14" runtime = "osx-arm64" }
      }
    }
  }
  `runs-on` = "${{ matrix.os.runner }}"
  `timeout-minutes` = Common.testTimeout
  steps {
    Steps.checkout()
    ...Steps.setupWorkloads("android ${{ (matrix.os.runner != 'ubuntu-latest' && 'tvos ios maccatalyst') || '' }}", "6.0.x").toList()
    ...Steps.dotnetPublish("Tests/Weaver/Realm.Fody.Tests", "net6.0", "${{ matrix.os.runtime }}", new Mapping{}).toList()
    new gha.Step {
      name = "Run the tests"
      run = "${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Fody.Tests --result=\(outputFile) --labels=After"
    }
    ...reportTestResults(testConfig)
  }
}

// Private helpers
local function prepareTests(config: TestConfig): Listing<gha.Step> = new Listing {
  Steps.checkout()
  ...cleanWorkspace(config.shouldCleanWorkspace)
  ...fetchTestArtifacts(config.packageJob, config.useWrappers)
  ...BaaS.deployStep(config.syncDifferentiator, config.runSyncTests)
}

local function cleanWorkspace(shouldClean: Boolean): List<gha.Step> = if (shouldClean) List(new gha.Step {
  name = "Cleanup Workspace"
  run = "git clean -fdx"
}) else List()

local function fetchTestArtifacts(packageJob: String, useWrappers: Boolean): List<gha.Step> = if (useWrappers)
  Steps.fetchPackages(packageJob, Common.nugetPackages)
  else Steps.fetchPackages(packageJob, Common.nugetPackages)

local function buildTests(packageJob: String, projectPath: String, properties: Mapping<String, String>): List<gha.Step> = Steps.msbuild(projectPath, new Mapping{
  ...getTestProps(packageJob)
  ...properties
})

local function baasTestArgs(config: TestConfig): String = if (config.runSyncTests) " --baasaas-api-key=${{ secrets.BAASAAS_API_KEY}} --baas-differentiator=\(config.syncDifferentiator)-${{ github.run_id }}-${{ github.run_attempt }}" else ""

local function reportTestResults(config: TestConfig): Listing<gha.Step> = new {
  local _outputFile = if (config.transformResults) "\(outputFile)_transformed.xml" else outputFile
  ...(if (config.transformResults) List(new gha.Step {
    name = "Transform Results"
    run = "xsltproc --output \(_outputFile) Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt \(outputFile)"
  }) else List())
  new gha.Step {
    name = "Publish Unit Test Results"
    uses = "LaPeste/test-reporter@510caf50a955b1003bec48a6494be4d6537f3a0b"
    `if` = "always()"
    with {
      ["name"] = "Results \(config.title)"
      ["path"] = _outputFile
      ["reporter"] = "java-junit"
      ["list-suites"] = "failed"
      ["path-replace-backslashes"] = true
      ["fail-on-error"] = true
    }
  }
}

local function dotnetPublishNetCoreTests(packageJob: String, project: String, framework: Common.NetFramework, runtime: Common.NetRuntime): Listing<gha.Step> = Steps.dotnetPublish(project, framework, runtime, getTestProps(packageJob))

local function getTestProps(packageJob: String): Mapping<String, String> = new Mapping {
  ["RestoreConfigFile"] = "Tests/Test.NuGet.Config"
  ["UseRealmNupkgsWithVersion"] = "${{ needs.\(packageJob).outputs.package_version }}"
  ["RealmTestsStandaloneExe"] = "true"
}

local class MatrixOS {
  runner: "windows-latest" | "ubuntu-latest" | "macos-13" | "macos-14"
  runtime: Common.NetRuntime
}

local class TestConfig {
  packageJob: String
  useWrappers: Boolean = false
  shouldCleanWorkspace: Boolean = false
  runSyncTests: Boolean = false
  syncDifferentiator: String?
  transformResults: Boolean = false
  title: String
}
