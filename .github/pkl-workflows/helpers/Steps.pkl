import "../GithubAction/GithubAction.pkl" as gha
import "Common.pkl"

const actionRunSimulator = "realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf"
const actionSetupJDK = "actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0"
const actionAWSConfigureCredentials = "aws-actions/configure-aws-credentials@v4.0.2"
const actionCoveralls = "coverallsapp/github-action@v2.3.0"
const actionCheckout = "actions/checkout@v4"
const actionUploadArtifact = "actions/upload-artifact@v4"
const actionDownloadArtifact = "actions/download-artifact@v4"
const actionSetupXcode = "maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd"
const actionSetupDotnet = "actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59"
const actionSetupMsBuild = "microsoft/setup-msbuild@0b44c6745b7e81956596964100aadb92d667c497"

const function checkout(submodules: (Boolean | "recursive")): Listing<gha.Step> = new Listing {
  checkoutWithoutMatchers(submodules)
  registerProblemMatchers()
}

const function checkoutWithoutMatchers(submodules: (Boolean | "recursive")): gha.Step = new {
  name = "Checkout Code"
  uses = actionCheckout
  with {
    ["submodules"] = submodules
    ["ref"] = "${{ github.event.pull_request.head.sha }}"
  }
}

const function uploadArtifacts(artifactName: String, relPath: String): gha.Step = new {
  name = "Store artifacts for \(artifactName)"
  uses = actionUploadArtifact
  with {
    ["name"] = artifactName
    ["path"] = "${{ github.workspace }}/\(relPath)"
    ["retention-days"] = "${{ github.event_name != 'pull_request' && 30 || 1 }}"
    ["if-no-files-found"] = "error"
  }
}

const function setupXcode(version: String): gha.Step = new gha.Step {
  name = "Setup Xcode"
  uses = actionSetupXcode
  with {
    ["xcode-version"] = version
  }
}

const function setupMSVC(edition: String): gha.Step = new {
  name = "Setup MSVC"
  run = "Start-Process \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe\" -ArgumentList 'modify --installPath \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\" --quiet --add Microsoft.VisualStudio.Component.VC.14.35.17.5.\(edition)' -Wait -PassThru"
  shell = "pwsh"
}

const function setupDotnet(version: String?): gha.Step = new {
  uses = actionSetupDotnet
  with {
    ["dotnet-version"] = version ?? "8.0.x"
  }
}

const function registerProblemMatchers(): gha.Step = new {
  name = "Register problem matchers"
  run = """
    echo "::add-matcher::.github/problem-matchers/csc.json"
    echo "::add-matcher::.github/problem-matchers/msvc.json"
    """
}

const function fetchPackages(packageJob: String, _packages: List<String>?): List<gha.Step> = (_packages ?? Common.packages).map((package) -> new gha.Step {
  name = "Fetch \(package)"
  uses = actionDownloadArtifact
  with {
    ["name"] = "\(package).${{ needs.\(packageJob).outputs.package_version }}"
    ["path"] = "${{ github.workspace }}/Realm/packages/"
  }
})

const function fetchWrappers(wrappers: List<String>(every((wrapper) -> Common.wrapperBinaryNames.contains(wrapper)))): List<gha.Step> = wrappers.map((wrapper) -> new gha.Step {
  name = "Fetch wrappers for \(wrapper)"
  uses = actionDownloadArtifact
  with {
    ["name"] = "wrappers-\(wrapper)"
    ["path"] = "wrappers/build"
  }
})

const function setupWorkloads(workloads: String?, dotnetVersion: String?): Listing<gha.Step> = new Listing<gha.Step> {
  setupDotnet(dotnetVersion)
  new {
    name = "Setup workloads"
    run = "dotnet workload install \(workloads ?? "android ${{ (runner.os != 'Linux' && 'tvos ios maccatalyst') || '' }}")"
  }
}

const function setupJDK(): gha.Step = new {
  name = "Setup JDK"
  uses = actionSetupJDK
  with {
    ["distribution"] = "microsoft"
    ["java-version"] = 11
  }
}

const function configureAWSCredentials(accessKey: String, secretKey: String, region: String): gha.Step = new {
  name = "Configure AWS Credentials"
  uses = actionAWSConfigureCredentials
  with {
    ["aws-access-key-id"] = "${{ secrets.\(accessKey) }}"
    ["aws-secret-access-key"] = "${{ secrets.\(secretKey) }}"
    ["aws-region"] = region
  }
}

class MSBuildConfig {
  project: String
  target: String?
  properties: Mapping<String, String> = new Mapping{}
  standaloneExe: Boolean = false

  function getTargetForInvocation(): String = if (target != null) " -t:\(target)" else ""
  function getPropertiesForInvocation(): String = "-p:Configuration=\(Common.configuration)\(propertiesToString(properties))"
}

const function msbuild(config: MSBuildConfig): List<gha.Step> = List(
  addMSBuildToPath(),
  new gha.Step {
    name = "Build \(config.project)"
    run = "msbuild \(config.project)\(config.getTargetForInvocation()) -restore \(config.getPropertiesForInvocation())"
  }
)

const function dotnetPublish(project: String, framework: Common.NetFramework, runtime: Common.NetRuntime?, properties: Mapping<String, String>): Listing<gha.Step> = new Listing {
  new gha.Step {
    name = "Publish \(project)"
    run = "dotnet publish \(project) -c \(Common.configuration) -f \(framework)\(if (runtime != null) " -r \(runtime)" else "")\(propertiesToString(properties)) --no-self-contained"
  }
  new gha.Step {
    name = "Output executable path"
    id = "dotnet-publish"
    run = "echo 'executable-path=./\(project)/bin/\(Common.configuration)/\(framework)/\(runtime)/\(project.split("/").last)' >> $GITHUB_OUTPUT"
    shell = "bash"
  }
}

const function dotnetBuild(project: String, framework: Common.NetFramework, runtime: Common.NetRuntime?, properties: Mapping<String, String>): gha.Step = new gha.Step {
  name = "Build \(project)"
  run = "dotnet build \(project) -c \(Common.configuration) -f \(framework)\(if (runtime != null) " -r \(runtime)" else "")\(propertiesToString(properties))"
}

const function runSimulator(config: SimulatorConfig): gha.Step = new {
  name = "Run on Simulator"
  uses = actionRunSimulator
  with = config.toMap().toMapping()
}

const function runDeviceFarm(config: DeviceFarmConfig): Listing<gha.Step> = new Listing<gha.Step> {
  configureAWSCredentials("AWS_DEVICEFARM_ACCESS_KEY_ID", "AWS_DEVICEFARM_SECRET_ACCESS_KEY", "us-west-2")
  new gha.Step {
    name = "Run the tests"
    uses = "./.github/actions/run-android-device-farm-test"
    id = "run_tests"
    with {
      ["apk-path"] = config.apkPath
      ["app-id"] = config.appId
      ["project-arn"] = "${{ secrets.DEVICEFARM_PROJECT_ARN }}"
      ["device-pool-arn"] = "${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}"
    }
  }
}

const function publishCoverage(file: String): Listing<gha.Step> = new Listing<gha.Step> {
  new gha.Step {
    name = "Publish Coverage"
    id = "publish-coveralls"
    uses = actionCoveralls
    with {
      ["github-token"] = "${{ secrets.GITHUB_TOKEN }}"
      ["file"] = file
      ["git-commit"] = "${{ github.event.pull_request.head.sha }}"
      ["compare-sha"] = "${{ github.event.pull_request.base.sha }}"
    }
  }
  new gha.Step {
    name = "Output Coveralls response"
    run = "echo ${{ steps.publish-coveralls.outputs.coveralls-api-result }}"
  }
}

class SimulatorConfig {
  appPath: String
  bundleId: String
  iphoneToSimulate: "Apple-TV-1080p" | "iPhone-8" | "iPhone-15"
  arguments: String
  os: "tvOS" | "iOS"
}

class DeviceFarmConfig {
  apkPath: String
  appId: String
}

local const function addMSBuildToPath(): gha.Step = new {
  name = "Add msbuild to PATH"
  uses = actionSetupMsBuild
  `if` = "${{ runner.os == 'Windows' }}"
}

local const function propertiesToString(properties: Mapping<String, String>): String = " " + properties.toMap().entries.map((kvp) -> "-p:\(kvp.key)=\(kvp.value)").join(" ")