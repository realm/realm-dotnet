#@ load("@ytt:template", "template")

#@ def uploadToNuget(packageName, includeSymbols = False):
  - name: #@ "NuGet Publish " + packageName + ".${{ steps.get-version.outputs.version }}"
    run: #@ "dotnet nuget push ${{ github.workspace }}/Realm/packages/" + packageName + ".${{ steps.get-version.outputs.version }}/" + packageName + ".${{ steps.get-version.outputs.version }}.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"

#@ if includeSymbols:
  - name: #@ "NuGet Publish Symbols " + packageName + ".${{ steps.get-version.outputs.version }}"
    run: #@ "dotnet nuget push ${{ github.workspace }}/Realm/packages/" + packageName + ".${{ steps.get-version.outputs.version }}/" + packageName + ".${{ steps.get-version.outputs.version }}.snupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json"
#@ end
#@ end

#@ def uploadToNpm(packageName):
  - uses: actions/setup-node@v2
    with:
      node-version: '12.x'
      registry-url: 'https://registry.npmjs.org'
  - name: #@ "Npm Publish " + packageName + "-${{ steps.get-version.outputs.version }}"
    run: #@ "npm publish ${{ github.workspace }}/Realm/packages/" + packageName + "-${{ steps.get-version.outputs.version }}.tgz/" + packageName + "-${{ steps.get-version.outputs.version }}.tgz"
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#@ end

#@ def publishGithubRelease():
  - name: Create Github Release
    uses: ncipollo/release-action@v1
    with:
      artifacts: ${{ github.workspace }}/Realm/packages/io.realm.unity-${{ steps.get-version.outputs.version }}.tgz/io.realm.unity-${{ steps.get-version.outputs.version }}.tgz
      bodyFile: ${{ steps.extract-release-notes.outputs.release-notes-path }}
      name: ${{ steps.get-version.outputs.version }}
      commit: ${{ github.ref }}
      tag: ${{ steps.get-version.outputs.version }}
      token: ${{ secrets.GITHUB_TOKEN }}
      draft: true
#@ end

#@ def uploadDocsToS3():
  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.DOCS_S3_ACCESS_KEY }}
      aws-secret-access-key: ${{ secrets.DOCS_S3_SECRET_KEY }}
      aws-region: us-east-2
  - name: Upload docs
    run: |
      Expand-Archive -Path Realm/packages/Docs.zip/Docs.zip -DestinationPath Realm/packages
      $versions = "${{ steps.get-version.outputs.version }}", "latest"
      Foreach ($ver in $versions)
      {
        aws s3 sync --acl public-read "${{ github.workspace }}\Realm\packages\_site" s3://realm-sdks/realm-sdks/dotnet/$ver/
      }
#@ end
---
name: Publish Release
"on":
  workflow_dispatch

jobs:
  main:
    runs-on: windows-latest
    environment: Production
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download all artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        commit: ${{ github.sha }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Extract release notes
      id: extract-release-notes
      run: |
        $changelogContent = Get-Content -Raw -Path "./CHANGELOG.md"
        $output_file = "./RELEASE_NOTES.md"
        $regex = "(?sm)^(## \d{1,2}\.\d{1,2}\.\d{1,2}(?:-[a-zA-Z]*\.\d{1,2})? \(\d{4}-\d{2}-\d{2}\))(.+?)(\n## \d{1,2}\.\d{1,2}\.\d{1,2}(?:-[a-zA-Z]*\.\d{1,2})? \(\d{4}-\d{2}-\d{2}\))"
        $changelogContent -match $regex
        Set-Content -Path $output_file -Value $Matches[2]
        echo "::set-output name=release-notes-path::$output_file"
    - name: Read version
      id: get-version
      run: |
        $nupkgName = ls "Realm/packages" | Select -expandproperty Name | Select-String Realm.Fody
        $nupkgName -match "(?sm)\d{1,2}\.\d{1,2}\.\d{1,2}(?:-[a-zA-Z]*\.\d{1,2})?"
        $version = $Matches[0]
        echo "::set-output name=version::$version"
    - #@ template.replace(publishGithubRelease())
    - #@ template.replace(uploadDocsToS3())
    - #@ template.replace(uploadToNuget("Realm.Fody"))
    - #@ template.replace(uploadToNuget("Realm", True))
    - #@ template.replace(uploadToNpm("io.realm.unity"))
