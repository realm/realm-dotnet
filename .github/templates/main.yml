#@ load("@ytt:template", "template")
#@ load("common.lib.yml", "checkoutCode", "uploadArtifacts", "setupDotnet", "uploadPackagesToSleet", "cleanupWorkspace", "dotnetPublish", "actionDownloadArtifact")
#@ load("test.lib.yml", "dotnetBuildTests")
#@ load("build.lib.yml", "deployBaas", "cleanupBaas", "runTests", "runNetCoreTests", "ignoreSkippedJobsCondition", "buildUnity")

#@ def fetchPackageArtifacts():
#@ for pkg in [ "Realm", "Realm.Fody" ]:
  - name: #@ "Fetch " + pkg
    uses: #@ actionDownloadArtifact
    with:
      name: #@ pkg + ".${{ needs.build-packages.outputs.package_version }}"
      path: ${{ github.workspace }}/Realm/packages/
#@ end
#@ end
---
name: main
"on":
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish-prerelease:
        description: Indicates whether to publish the package to Sleet/npm
        required: false
        type: boolean
      run-benchmark:
        description: Indicates whether to run the benchmark tests
        required: false
        type: boolean
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  build-wrappers:
    uses: ./.github/workflows/wrappers.yml
    name: Wrappers
  _: #@ template.replace(deployBaas([".NET Framework", "Code Coverage", "UWP Managed", "Xamarin.macOS", "iOS", "Xamarin.Android", "MacCatalyst"]))
  build-packages:
    uses: ./.github/workflows/build-packages.yml
    name: Package
    needs:
    - build-wrappers
  publish-packages-to-sleet:
    runs-on: ubuntu-latest
    name: Publish package to S3
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition + " && (github.event_name == 'push' || github.event.inputs.publish-prerelease)"
    steps:
    - #@ template.replace(checkoutCode(False, False))
    - #@ template.replace(fetchPackageArtifacts())
    - #@ template.replace(uploadPackagesToSleet("needs.build-packages.outputs.package_version", True))
  _: #@ template.replace(buildUnity())
  _: #@ template.replace(runTests(".NET Framework"))
  _: #@ template.replace(runTests("UWP Managed", additionalSecrets = ["Pfx_Password", "Base64_Encoded_Pfx"]))
  _: #@ template.replace(runNetCoreTests("[\"netcoreapp3.1\", \"net5.0\", \"net6.0\"]"))
  _: #@ template.replace(runTests("macOS"))
  _: #@ template.replace(runTests("iOS"))
  _: #@ template.replace(runTests("Xamarin.Android", additionalSecrets=["AWS_DEVICEFARM_ACCESS_KEY_ID", "AWS_DEVICEFARM_SECRET_ACCESS_KEY", "DEVICEFARM_PROJECT_ARN", "DEVICEFARM_ANDROID_POOL_ARN"]))
  test-xunit:
    runs-on: windows-latest
    name: Test xUnit Compatibility
    timeout-minutes: 10
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ setupDotnet()
      - #@ template.replace(dotnetPublish("Tests/Tests.XUnit", "net6.0", "win-x64", { "RestoreConfigFile": "Tests/Test.NuGet.Config", "UseRealmNupkgsWithVersion": "${{ needs.build-packages.outputs.package_version }}" }))
      - name: Run Tests
        run: dotnet test ${{ steps.dotnet-publish.outputs.executable-path }}/Tests.XUnit.dll --logger GitHubActions
  test-weaver:
    uses: ./.github/workflows/test-weaver.yml
    name: Test
  _: #@ template.replace(runTests("Code Coverage"))
  benchmark-linux:
    name: Benchmark Linux
    needs: build-packages
    runs-on: performance-tests
    if: #@ ignoreSkippedJobsCondition + " && (github.event_name == 'push' || github.event.inputs.run-benchmark)"
    timeout-minutes: 60
    steps:
      - #@ template.replace(cleanupWorkspace())
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ setupDotnet()
      - #@ template.replace(dotnetBuildTests("Tests/Benchmarks/PerformanceTests", "net6.0", "linux-x64", "needs.build-packages.outputs.package_version"))
      - name: Run the tests
        run: #@ "${{ steps.dotnet-publish.outputs.executable-path }}/PerformanceTests -f \"*\" --join"
      - name: Find Results file
        id: find-results-file
        run: |
          cd BenchmarkDotNet.Artifacts/results
          file=$(basename BenchmarkRun*json)
          echo "::set-output name=benchmark-results::$file"
      - name: Publish Benchmark Results
        uses: ./.github/actions/benchmark-uploader
        with:
          realm-token: ${{ secrets.Realm_Token }}
          file: ${{ github.workspace }}/BenchmarkDotNet.Artifacts/results/${{ steps.find-results-file.outputs.benchmark-results }}
          dashboard-path: dashboard.charts
          nuget-package: ${{ github.workspace }}/Realm/packages/Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
      - #@ uploadArtifacts("dashboard.charts", "dashboard.charts", 30)
  _: #@ template.replace(cleanupBaas([".NET Framework", "Code Coverage", "UWP Managed", "MacOS", "iOS", "Xamarin.Android"]))
