#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")

#@ configuration = "Release"
#@ androidABIs = [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
#@ windowsArchs = [ 'Win32', 'x64' ]
#@ windowsUWPArchs = [ 'Win32', 'x64', 'ARM' ]
#@ wrappersCacheCondition = "steps.check-cache.outputs.cache-hit != 'true'"
#@ nugetPackages = [ 'Realm.Fody', 'Realm', 'Realm.UnityUtils', 'Realm.UnityWeaver']

#@ def checkoutCode():
name: Checkout code
uses: actions/checkout@v2
with:
  submodules: recursive
#@ end

#@ def checkCache(key):
name: Check cache
id: check-cache
uses: actions/cache@v2
with:
  path: ./wrappers/build/**
  key: #@ key
#@ end

#@ def cacheVcpkg():
name: Check Vcpkg cache
id: check-vcpkg-cache
uses: actions/cache@v2
with:
  path: 'C:\src'
  key: vcpkg
if: #@ wrappersCacheCondition
#@ end

#@ def setupVcpkg():
name: Setup Vcpkg
run: |
  Write-Output 'Beginning download...'
  Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
  Write-Output ((Get-Item C:\vcpkg.zip).length/1MB)
  Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
  Write-Output 'Completed!'
shell: powershell
if: #@ wrappersCacheCondition + " && steps.check-vcpkg-cache.outputs.cache-hit != 'true'"
#@ end

#@ def buildWrappers(cmd, outputVar, intermediateSteps = []):
#@ configurationParam =  " --configuration=" + configuration
#@ ltoParam =  " -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}"
#@ if cmd.startswith("powershell"):
#@   configurationParam = " -Configuration " + configuration
#@   ltoParam =  "${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}"
#@ end
#@ cacheKey = outputVar + "-" + configuration + "-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}"
#@ actualCommand = cmd + configurationParam + ltoParam

steps:
  - #@ checkoutCode()
  - #@ checkCache(cacheKey)
  #@ for step in intermediateSteps:
  - #@ step
  #@ end
  - name: Build wrappers
    run: #@ actualCommand
    if: #@ wrappersCacheCondition
  - name: Store artifacts
    uses: actions/upload-artifact@v2
    with:
      name: #@ outputVar
      path: wrappers/build/**
      retention-days: 1
#@ end

#@ def buildPackages():
#@ for pkgName in nugetPackages:
#@ buildCmd = "MsBuild.exe ${{ github.workspace }}/Realm/" + pkgName + " -t:Pack -p:Configuration=" + configuration + " -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }} -restore"
  - name: #@ "Build nuget package " + pkgName
    run: #@ buildCmd
#@ end
#@ end

#@ def uploadPackageArtifacts():
#@ for pkgName in nugetPackages:
#@ finalPkgName = pkgName + ".${{ steps.find-nupkg-version.outputs.package_version }}.nupkg"
  - name: #@ "Store artifacts for " + pkgName
    uses: actions/upload-artifact@v2
    with:
      name: #@ finalPkgName
      path: #@ "${{ github.workspace }}/Realm/packages/" + finalPkgName
      retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
#@ end
#@ end

#@ def fetchPackageArtifacts(pkgs):
#@ for pkg in pkgs:
#@ finalPkgName = pkg + ".${{ needs.build-packages.outputs.package_version }}.nupkg"
  - name: #@ "Fetch " + pkg
    uses: actions/download-artifact@v2
    with:
      name: #@ finalPkgName
      path: ${{ github.workspace }}/Realm/packages/
#@ end
#@ end

#@ def publishTestsResults(files, test_title):
  - name: Publish Unit Test Results
    uses: EnricoMi/publish-unit-test-result-action/composite@v1
    if: always()
    with:
      files: #@ files
      comment_on_pr: false
      check_name: #@ test_title
#@ end

#@ def findPackageVersion():
name: Find nupkg version
id: find-nupkg-version
run: |
  cd Realm/packages
  tmpName=$(basename Realm.Fody* .nupkg)
  pkgName=${tmpName#"Realm.Fody."}
  echo "::set-output name=package_version::$pkgName"
shell: bash
#@ end

#@ def buildNetFrameworkTest(relSolutionPath, **properties):
#@ parsedProps = ""
#@ for prop in properties.keys():
#@ parsedProps += " -p:" + prop + "=" + properties[prop]
#@ end
name: Build the tests
run: #@ "msbuild ${{ github.workspace }}/" + relSolutionPath + " -p:RestoreConfigFile=${{ github.workspace }}/Tests/Test.NuGet.Config -p:Configuration=" + configuration + " -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -restore" + parsedProps
#@ end

---
name: build and test
"on":
  push:
    branches:
      - main
      - master
  pull_request:
jobs:
  build-wrappers-macos:
    runs-on: macos-latest
    name: Build macOS wrappers
    _: #@ template.replace(buildWrappers("./wrappers/build-macos.sh", "wrappers-macos"))
  build-wrappers-ios:
    runs-on: macos-latest
    name: Build iOS wrappers
    _: #@ template.replace(buildWrappers("./wrappers/build-ios.sh", "wrappers-ios"))
  build-wrappers-linux:
    runs-on: ubuntu-20.04
    name: Build Linux wrappers
    _: #@ template.replace(buildWrappers("./wrappers/build.sh", "wrappers-linux"))
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Build Android wrappers
    strategy:
      matrix:
        arch: #@ androidABIs
    _: #@ template.replace(buildWrappers("./wrappers/build-android.sh --ARCH=${{ matrix.arch }}", "wrappers-android-${{ matrix.arch }}"))
  build-wrappers-windows:
    runs-on: windows-latest
    name: Build Windows wrappers
    strategy:
      matrix:
        arch: #@ windowsArchs
    _: #@ template.replace(buildWrappers("powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }}", "wrappers-windows-${{ matrix.arch }}", [ cacheVcpkg(), setupVcpkg() ]))
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Build Windows UWP wrappers
    strategy:
      matrix:
        arch: #@ windowsUWPArchs
    _: #@ template.replace(buildWrappers("powershell ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }}", "wrappers-windows-uwp-${{ matrix.arch }}", [ cacheVcpkg(), setupVcpkg() ]))
  build-packages:
    runs-on: windows-latest
    name: Build packages
    needs:
      - build-wrappers-windows
      - build-wrappers-macos
      - build-wrappers-ios
      - build-wrappers-android
      - build-wrappers-linux
      - build-wrappers-windows-uwp
    outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - #@ checkoutCode()
      - name: Set version suffix
        id: set-version-suffix
        #! Build suffix is PR-1234.5 for PR builds or alpha.123 for branch builds.
        run: echo "::set-output name=build_suffix::${{ github.event_name == 'pull_request' && format('PR-{0}', github.event.number) || 'alpha'}}.${{ github.run_number }}"
      - name: Fetch artifacts MacOS
        uses: actions/download-artifact@v2
        with:
          name: wrappers-macos
          path: wrappers/build
      - name: Fetch artifacts iOS
        uses: actions/download-artifact@v2
        with:
          name: wrappers-ios
          path: wrappers/build
      - name: Fetch artifacts Linux
        uses: actions/download-artifact@v2
        with:
          name: wrappers-linux
          path: wrappers/build
      - name: Fetch artifacts Android armeabi-v7a
        uses: actions/download-artifact@v2
        with:
          name: wrappers-android-armeabi-v7a
          path: wrappers/build
      - name: Fetch artifacts Android arm64-v8a
        uses: actions/download-artifact@v2
        with:
          name: wrappers-android-arm64-v8a
          path: wrappers/build
      - name: Fetch artifacts Android x86
        uses: actions/download-artifact@v2
        with:
          name: wrappers-android-x86
          path: wrappers/build
      - name: Fetch artifacts Android x86_64
        uses: actions/download-artifact@v2
        with:
          name: wrappers-android-x86_64
          path: wrappers/build
      - name: Fetch artifacts Windows 32bit
        uses: actions/download-artifact@v2
        with:
          name: wrappers-windows-Win32
          path: wrappers/build
      - name: Fetch artifacts Windows 64bit
        uses: actions/download-artifact@v2
        with:
          name: wrappers-windows-x64
          path: wrappers/build
      - name: Fetch artifacts Windows UWP 32bit
        uses: actions/download-artifact@v2
        with:
          name: wrappers-windows-uwp-Win32
          path: wrappers/build
      - name: Fetch artifacts Windows UWP 64bit
        uses: actions/download-artifact@v2
        with:
          name: wrappers-windows-uwp-x64
          path: wrappers/build
      - name: Fetch artifacts Windows UWP ARM
        uses: actions/download-artifact@v2
        with:
          name: wrappers-windows-uwp-ARM
          path: wrappers/build
      - #@ template.replace(buildPackages())
      - #@ findPackageVersion()
      - #@ template.replace(uploadPackageArtifacts())
  run-tests-net-framework:
    runs-on: windows-latest
    name: Run tests for NET framework
    needs: build-packages
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - #@ checkoutCode()
      - #@ template.replace(fetchPackageArtifacts( [ "Realm", "Realm.Fody" ] ))
      - #@ buildNetFrameworkTest("Tests/Realm.Tests", TargetFramework="net461" )
      - name: Run the tests
        run: #@ "${{ github.workspace }}/Tests/Realm.Tests/bin/" + configuration + "/net461/Realm.Tests.exe --result=TestResults.Windows.xml --labels=After"
      - #@ template.replace(publishTestsResults("TestResults.Windows.xml", "Windows .NET framework tests results"))
  run-tests-uwp:
    runs-on: windows-latest
    name: Run tests for UWP on Windows
    needs: build-packages
    steps:
      - #@ checkoutCode()
      - #@ template.replace(fetchPackageArtifacts( [ "Realm", "Realm.Fody" ] ))
      - #@ buildNetFrameworkTest("Tests/Tests.UWP", AppxBundlePlatforms="x64", Platform="x64" )
      - name: Install the UWP test app
        run: Add-AppPackage Tests/Tests.UWP/bin/x64/Release/Tests.UWP_1.0.0.0_x64.msix
      - name: Some debug things
        run: |
          Get-AppxPackage -Name realm.uwp.tests
          Write-Output $env:LOCALAPPDATA
      - name: Run the tests
        run: #@ "Tests.UWP.exe --headless --labels=All --result=TestResults.UWP.xml"
      - #@ template.replace(publishTestsResults("$env:LOCALAPPDATA\Packages\realm.uwp.tests_dnf38210mrefr\LocalState\TestResults.UWP.xml", "UWP tests results"))
  run-tests-netcore-net5:
    name: Run tests for .NetCore and .Net5
    needs: build-packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        targetFramework: [ netcoreapp3.1, net5.0 ]
    steps:
    - #@ checkoutCode()
    - #@ template.replace(fetchPackageArtifacts( [ "Realm", "Realm.Fody" ] ))
    - name: Build the test
      run: #@ "dotnet build ${{ github.workspace }}/Tests/Realm.Tests -c " + configuration + " -f ${{ matrix.targetFramework }} -p:RestoreConfigFile=${{ github.workspace }}/Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:AddNet5Framework=${{ matrix.targetFramework == 'net5.0' && 'true' || 'false' }}"
    - name: Run the tests
      run: #@ "dotnet run -p ${{ github.workspace }}/Tests/Realm.Tests -c " + configuration + " -f ${{ matrix.targetFramework }} --no-build -- --labels=After --result=${{ github.workspace }}/TestResults.NetCore.xml"
    - #@ template.replace(publishTestsResults("TestResults.NetCore.xml", "${{ matrix.os }} ${{ matrix.targetFramework }} tests results"))
  run-tests-xamarin-macos:
    runs-on: macos-latest
    name: Run tests for Xamarin on MacOS
    needs: build-packages
    steps:
      - #@ checkoutCode()
      - #@ template.replace(fetchPackageArtifacts( [ "Realm", "Realm.Fody" ] ))
      - #@ buildNetFrameworkTest("Tests/Tests.XamarinMac", TargetFrameworkVersion="v2.0" )
      - name: Run the tests
        run: #@ "${{ github.workspace }}/Tests/Tests.XamarinMac/bin/" + configuration + "/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --labels=All --result=${{ github.workspace }}/TestResults.macOS.xml"
      - #@ template.replace(publishTestsResults("TestResults.macOS.xml", "Xamarin MacOs tests results"))
  run-tests-weaver:
    runs-on: windows-latest
    name: Run tests for the weaver
    steps:
      - #@ checkoutCode()
      - name: Run the tests
        run: #@ "dotnet run -p ${{ github.workspace }}/Tests/Weaver/Realm.Fody.Tests -f netcoreapp3.1 -c " + configuration + " --result=${{ github.workspace }}/TestResults.Weaver.xml --labels=After"
      - #@ template.replace(publishTestsResults("TestResults.Weaver.xml", "Weaver tests results"))
