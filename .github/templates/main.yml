#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")
#@ load("common.lib.yml", "configuration", "nugetPackages", "checkoutCode", "actionCache", "actionUploadArtifact", "actionDownloadArtifact", "actionSetupDotnet", "readVersionFromPackage", "uploadPackagesToSleet", "cleanupWorkspace", "fetchWrapperBinaries", "msbuild", "dotnetPublish")
#@ load("test.lib.yml", "publishTestsResults")

#@ isRelease = "contains(github.head_ref, 'release')"

#@ ignoreSkippedJobsCondition = "always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')"

#@ secret_BaseUrl = "${{ (" + isRelease + " && secrets.REALM_QA_BASE_URL) || secrets.REALM_BASE_URL }}"
#@ secret_AtlasBaseUrl = "${{ (" + isRelease + " && secrets.ATLAS_QA_BASE_URL) || secrets.ATLAS_BASE_URL }}"
#@ secret_AtlasPublicKey = "${{ (" + isRelease + " && secrets.ATLAS_QA_PUBLIC_API_KEY) || secrets.ATLAS_PUBLIC_API_KEY }}"
#@ secret_AtlasPrivateKey = "${{ (" + isRelease + " && secrets.ATLAS_QA_PRIVATE_API_KEY) || secrets.ATLAS_PRIVATE_API_KEY }}"
#@ secret_AtlasProjectId = "${{ (" + isRelease + " && secrets.ATLAS_QA_PROJECT_ID) || secrets.ATLAS_PROJECT_ID }}"

#@ wrappersCacheCondition = "steps.check-cache.outputs.cache-hit != 'true'"
#@ testTimeout = 45

#@ def deployBaas(name):
#@ baasJobName = "baas-" + name.replace(".", "").replace(" ", "-").lower()
#@yaml/text-templated-strings
(@= baasJobName @):
  uses: ./.github/workflows/deploy-baas.yml
  with:
    name: #@ name
  secrets:
    AtlasProjectId: #@ secret_AtlasProjectId
    BaseUrl: #@ secret_BaseUrl
    AtlasBaseUrl: #@ secret_AtlasBaseUrl
    AtlasPublicKey: #@ secret_AtlasPublicKey
    AtlasPrivateKey: #@ secret_AtlasPrivateKey
#@ end

#@ def cleanupBaas(name):
#@ testJobName = "test-" + name.replace(".", "").replace(" ", "-").lower()
#@ cleanupJobName = "cleanup-" + name.replace(".", "").replace(" ", "-").lower()
#@yaml/text-templated-strings
(@= cleanupJobName @):
  uses: ./.github/workflows/cleanup-baas.yml
  needs:
    - #@ testJobName
  with:
    name: #@ name
  secrets:
    AtlasProjectId: #@ secret_AtlasProjectId
    BaseUrl: #@ secret_BaseUrl
    AtlasBaseUrl: #@ secret_AtlasBaseUrl
    AtlasPublicKey: #@ secret_AtlasPublicKey
    AtlasPrivateKey: #@ secret_AtlasPrivateKey
#@ end

#@ def runTests(name):
#@ baasJobName = "baas-" + name.replace(".", "").replace(" ", "-").lower()
#@ testJobName = "test-" + name.replace(".", "").replace(" ", "-").lower()
#@yaml/text-templated-strings
(@= testJobName @):
  uses: #@ "./.github/workflows/" + testJobName + ".yml"
  if: #@ ignoreSkippedJobsCondition
  needs:
    - build-packages
    - #@ baasJobName
  with:
    version: ${{ needs.build-packages.outputs.package_version }}
    clusterName: #@ "${{ needs." + baasJobName + ".outputs.clusterName }}"
  secrets:
    AtlasProjectId: #@ secret_AtlasProjectId
    BaseUrl: #@ secret_BaseUrl
    AtlasPublicKey: #@ secret_AtlasPublicKey
    AtlasPrivateKey: #@ secret_AtlasPrivateKey
#@ end

#@ def uploadArtifacts(artifactName, relPath, retentionDays = "${{ github.event_name != 'pull_request' && 30 || 1 }}"):
name: #@ "Store artifacts for " + artifactName
uses: #@ actionUploadArtifact
with:
  name: #@ artifactName
  path: #@ "${{ github.workspace }}/" + relPath
  retention-days: #@ retentionDays
#@ end

---
#@ def buildUnityPackage():
#@ finalPkgName = "io.realm.unity-${{ steps.get-version.outputs.version }}.tgz"
  - name: Build Unity
    run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
  - #@ uploadArtifacts(finalPkgName, "Realm/Realm.Unity/" + finalPkgName)
  - #@ uploadArtifacts("AssetStorePublisher-${{ steps.get-version.outputs.version }}", "Tools/AssetStorePublisher", "${{ (github.event_name != 'pull_request' || contains(github.head_ref, 'release')) && 30 || 1 }}")
#@ end

#@ def buildDocs():
#@ docsCondition = "${{ " + isRelease + " }}"
  - name: Check Docfx cache
    id: check-docfx-cache
    if: #@ docsCondition
    uses: #@ actionCache
    with:
      path: 'C:\docfx'
      key: docfx
  - name: Download docfx
    if: #@ "steps.check-docfx-cache.outputs.cache-hit != 'true' && " + isRelease
    run: |
      Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip -OutFile C:\docfx.zip
      Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
    shell: powershell
  - name: Build docs
    if: #@ docsCondition
    run: |
      C:\docfx\docfx Docs/docfx.json
      Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
  - _: #@ template.replace(uploadArtifacts("Docs.zip", "Realm/packages/Docs.zip"))
    if: #@ docsCondition
#@ end

#@ def uploadPackageArtifacts():
#@ for pkgName in [ 'Realm.Fody', 'Realm' ]:
#@  finalPkgName = pkgName + ".${{ steps.get-version.outputs.version }}"
  - #@ uploadArtifacts(finalPkgName, "Realm/packages/" + finalPkgName + ".*nupkg")
#@ end
#@ end

#@ def fetchPackageArtifacts():
#@ for pkg in [ "Realm", "Realm.Fody" ]:
  - name: #@ "Fetch " + pkg
    uses: #@ actionDownloadArtifact
    with:
      name: #@ pkg + ".${{ needs.build-packages.outputs.package_version }}"
      path: ${{ github.workspace }}/Realm/packages/
#@ end
#@ end

#@ def dotnetPublishAndRunTests(projectPath, framework, executeCommand):
#@ properties = {
#@   "AdditionalFrameworks": framework,
#@   "RestoreConfigFile": "Tests/Test.NuGet.Config",
#@   "UseRealmNupkgsWithVersion": "${{ needs.build-packages.outputs.package_version }}"
#@ }
#@
  - #@ template.replace(dotnetPublish(projectPath, framework, properties))
  - name: Run the tests
    run: #@ "${{ steps.dotnet-publish.outputs.executable-path }}/" + executeCommand
#@ end

---
name: main
"on":
  push:
    branches:
      - main
  pull_request:
    paths:
      - '**.cs'
      - '**.cpp'
      - '**.hpp'
      - '**.csproj'
      - '*CMakeLists.txt'
      - '**.ps1'
      - '**.sh'
      - '**.props'
      - 'wrappers/realm-core'
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  build-wrappers:
    uses: ./.github/workflows/build-wrappers.yml
  _: #@ template.replace(deployBaas(".NET Framework"))
  _: #@ template.replace(deployBaas("UWP Managed"))
  _: #@ template.replace(deployBaas("Xamarin.macOS"))
  _: #@ template.replace(deployBaas("Xamarin.iOS"))
  _: #@ template.replace(deployBaas("Xamarin.Android"))
  _: #@ template.replace(deployBaas("Code Coverage"))
  build-packages:
    runs-on: windows-latest
    name: Package
    needs:
      - build-wrappers
    if: #@ ignoreSkippedJobsCondition
    outputs:
      package_version: ${{ steps.get-version.outputs.version }}
    timeout-minutes: 30
    steps:
      - #@ template.replace(checkoutCode())
      - name: Set version suffix
        id: set-version-suffix
        #! Build suffix is pr-1234.5 for pr builds or alpha.123 for branch builds.
        run: |
          $suffix = ""
          if ($env:GITHUB_EVENT_NAME -eq "pull_request")
          {
            if (-Not "${{ github.head_ref }}".Contains("release"))
            {
              $suffix = "pr-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
            }
          }
          else
          {
            $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
          }
          echo "::set-output name=build_suffix::$suffix"
      - #@ template.replace(fetchWrapperBinaries())
      #@ for pkgName in nugetPackages:
      - #@ template.replace(msbuild("Realm/" + pkgName, target="Pack", PackageOutputPath="${{ github.workspace }}/Realm/packages", VersionSuffix="${{ steps.set-version-suffix.outputs.build_suffix }}"))
      #@ end
      - #@ template.replace(readVersionFromPackage())
      - #@ template.replace(buildDocs())
      - #@ template.replace(uploadPackageArtifacts())
      - #@ template.replace(buildUnityPackage())
      - #@ uploadArtifacts("ExtractedChangelog", "Realm/Realm/ExtractedChangelog.md")
  publish-packages-to-sleet:
    runs-on: ubuntu-latest
    name: Publish package to S3
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition + " && github.event_name != 'pull_request'"
    steps:
    - #@ template.replace(checkoutCode(False, False))
    - #@ template.replace(fetchPackageArtifacts())
    - #@ template.replace(uploadPackagesToSleet("needs.build-packages.outputs.package_version", True))
  _: #@ template.replace(runTests(".NET Framework"))
  _: #@ template.replace(runTests("UWP Managed"))
  run-tests-netcore:
    runs-on: ${{ matrix.os}}
    name: "Test .NET"
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest, win81 ]
        targetFramework: [ netcoreapp3.1, net5.0, net6.0 ]
    timeout-minutes: #@ testTimeout
    steps:
      - name: Cleanup Workspace
        run: Remove-Item ${{ github.workspace }}\* -Recurse -Force
        if: matrix.os == 'win81'
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - uses: #@ actionSetupDotnet
        if: matrix.targetFramework == 'net6.0'
        with:
          dotnet-version: '6.0.x'
      - #@ template.replace(dotnetPublishAndRunTests("Tests/Realm.Tests", "${{ matrix.targetFramework }}", "Realm.Tests --result=TestResults.xml --labels=After"))
      - #@ publishTestsResults("TestResults.xml", ".NET (${{ matrix.os }}, ${{ matrix.targetFramework }})")
  _: #@ template.replace(runTests("Xamarin.macOS"))
  _: #@ template.replace(runTests("Xamarin.iOS"))
  _: #@ template.replace(runTests("Xamarin.Android"))
  run-tests-xunit:
    runs-on: windows-latest
    name: Test xUnit Compatibility
    timeout-minutes: #@ testTimeout
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition + " && github.event_name != 'pull_request'"
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - uses: #@ actionSetupDotnet
        with:
          dotnet-version: '6.0.x'
      - #@ template.replace(dotnetPublish("Tests/Tests.XUnit", "net6.0", { "RestoreConfigFile": "Tests/Test.NuGet.Config", "UseRealmNupkgsWithVersion": "${{ needs.build-packages.outputs.package_version }}" }))
      - name: Run Tests
        run: dotnet test ${{ steps.dotnet-publish.outputs.executable-path }}/Tests.XUnit.dll --logger GitHubActions
  run-tests-weaver:
    runs-on: windows-latest
    name: Test Weaver
    timeout-minutes: #@ testTimeout
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(dotnetPublish("Tests/Weaver/Realm.Fody.Tests", "netcoreapp3.1"))
      - name: Run Tests
        run: ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Fody.Tests --result=TestResults.Weaver.xml --labels=After
      - #@ publishTestsResults("TestResults.Weaver.xml", "Weaver")
  _: #@ template.replace(runTests("Code Coverage"))
  setup-unity-tests:
    runs-on: windows-latest
    name: Setup Unity Tests
    needs:
    - build-packages
    if: #@ ignoreSkippedJobsCondition
    steps:
      - #@ template.replace(checkoutCode())
      - name: Fetch Unity package
        uses: #@ actionDownloadArtifact
        with:
          name: io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
          path: ${{ github.workspace }}/Realm/packages/
      - name: Build Tests
        run: dotnet run --project Tools/SetupUnityPackage/ -- tests --realm-package Realm/packages/io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
      - #@ uploadArtifacts("UnityTests", "Tests/Tests.Unity")
  benchmark-linux:
    name: Benchmark Linux
    needs: build-packages
    runs-on: performance-tests
    if: #@ ignoreSkippedJobsCondition + " && github.event_name != 'pull_request'"
    timeout-minutes: #@ testTimeout
    steps:
      - #@ template.replace(cleanupWorkspace())
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ template.replace(dotnetPublishAndRunTests("Tests/Benchmarks/PerformanceTests", "net5.0", "PerformanceTests -f \"*\" --join"))
      - name: Find Results file
        id: find-results-file
        run: |
          cd BenchmarkDotNet.Artifacts/results
          file=$(basename BenchmarkRun*json)
          echo "::set-output name=benchmark-results::$file"
      - name: Publish Benchmark Results
        uses: ./.github/actions/benchmark-uploader
        with:
          realm-token: ${{ secrets.Realm_Token }}
          file: ${{ github.workspace }}/BenchmarkDotNet.Artifacts/results/${{ steps.find-results-file.outputs.benchmark-results }}
          dashboard-path: dashboard.charts
          nuget-package: ${{ github.workspace }}/Realm/packages/Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
      - #@ uploadArtifacts("dashboard.charts", "dashboard.charts", 30)
  _: #@ template.replace(cleanupBaas(".NET Framework"))
  _: #@ template.replace(cleanupBaas("UWP Managed"))
  _: #@ template.replace(cleanupBaas("Xamarin.macOS"))
  _: #@ template.replace(cleanupBaas("Xamarin.iOS"))
  _: #@ template.replace(cleanupBaas("Xamarin.Android"))
  _: #@ template.replace(cleanupBaas("Code Coverage"))
