#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")

#@ configuration = "Release"
#@ androidABIs = [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
#@ windowsArchs = [ 'Win32', 'x64' ]
#@ windowsUWPArchs = [ 'Win32', 'x64', 'ARM' ]
#@ wrappersCacheCondition = "steps.check-cache.outputs.cache-hit != 'true'"
#@ nugetPackages = [ 'Realm.Fody', 'Realm', 'Realm.UnityUtils', 'Realm.UnityWeaver' ]

#@ def checkCache(key):
name: Check cache
id: check-cache
uses: actions/cache@v2
with:
  path: ./wrappers/build/**
  key: #@ key
#@ end

#@ def cacheVcpkg():
name: Check Vcpkg cache
id: check-vcpkg-cache
uses: actions/cache@v2
with:
  path: 'C:\src'
  key: vcpkg
if: #@ wrappersCacheCondition
#@ end

#@ def setupVcpkg():
name: Setup Vcpkg
run: |
  Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
  Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
shell: powershell
if: #@ wrappersCacheCondition + " && steps.check-vcpkg-cache.outputs.cache-hit != 'true'"
#@ end

#@ def buildWrappers(cmd, outputVar, intermediateSteps = []):
#@ configurationParam =  " --configuration=" + configuration
#@ ltoParam =  " -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}"
#@ if cmd.startswith("powershell"):
#@   configurationParam = " -Configuration " + configuration
#@   ltoParam =  "${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}"
#@ end
#@ cacheKey = outputVar + "-" + configuration + "-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}"
#@ actualCommand = cmd + configurationParam + ltoParam

steps:
  - #@ template.replace(checkoutCode("recursive"))
  - #@ checkCache(cacheKey)
  #@ for step in intermediateSteps:
  - #@ step
  #@ end
  - name: Build wrappers
    run: #@ actualCommand
    if: #@ wrappersCacheCondition
  - name: Store artifacts
    uses: actions/upload-artifact@v2
    with:
      name: #@ outputVar
      path: wrappers/build/**
      retention-days: 1
#@ end

#@ def checkoutCode(submodules=False):
  - name: Disable Analytics
    run: |
      echo "REALM_DISABLE_ANALYTICS=true" >> $GITHUB_ENV
  - name: Checkout code
    uses: actions/checkout@v2
    with:
      submodules: #@ submodules
      ref: ${{ github.event.pull_request.head.sha }}
  - name: Register csc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/csc.json"
  - name: Register msvc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/msvc.json"
#@ end

#@ def buildPackages():
#@ for pkgName in nugetPackages:
  - #@ msbuild("Realm/" + pkgName, target="Pack", PackageOutputPath="${{ github.workspace }}/Realm/packages", VersionSuffix="${{ steps.set-version-suffix.outputs.build_suffix }}")
#@ end
#@ end

#@ def msbuildOnWin(projectPath, **properties):
  - name: Add msbuild to PATH
    uses: microsoft/setup-msbuild@v1.0.2
  - #@ msbuild(projectPath, RestoreConfigFile="Tests/Test.NuGet.Config", UseRealmNupkgsWithVersion="${{ needs.build-packages.outputs.package_version }}", **properties)
#@ end

#@ def buildUnityPackage():
#@ finalPkgName = "io.realm.unity-" + "${{ steps.find-nupkg-version.outputs.package_version }}.tgz"
  - name: #@ "Build Unity"
    run: #@ "dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack"
  - name: Store Unity artifacts
    uses: actions/upload-artifact@v2
    with:
      name: #@ finalPkgName
      path: #@ "${{ github.workspace }}/Realm/Realm.Unity/" + finalPkgName
      retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
#@ end

#@ def buildDocs():
#@ docsCondition = "${{ contains(github.ref, 'release') }}"
  - name: Check Docfx cache
    id: check-docfx-cache
    if: #@ docsCondition
    uses: actions/cache@v2
    with:
      path: 'C:\docfx'
      key: docfx
  - name: Download docfx
    if: ${{ steps.check-docfx-cache.outputs.cache-hit != 'true' && contains(github.ref, 'release') }}
    run: |
      Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip -OutFile C:\docfx.zip
      Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
    shell: powershell
  - name: Build docs
    if: #@ docsCondition
    run: |
      C:\docfx\docfx Docs/docfx.json
      Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
  - name: Store docs artifacts
    if: #@ docsCondition
    uses: actions/upload-artifact@v2
    with:
      name: Docs.zip
      path: ${{ github.workspace }}/Realm/packages/Docs.zip
      retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
#@ end

#@ def uploadPackageArtifacts():
#@ for pkgName in [ 'Realm.Fody', 'Realm' ]:
#@ finalPkgName = pkgName + ".${{ steps.find-nupkg-version.outputs.package_version }}.nupkg"
  - name: #@ "Store artifacts for " + pkgName
    uses: actions/upload-artifact@v2
    with:
      name: #@ finalPkgName
      path: #@ "${{ github.workspace }}/Realm/packages/" + finalPkgName
      retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
#@ end
#@ end

#@ def fetchPackageArtifacts():
#@ for pkg in [ "Realm", "Realm.Fody" ]:
  - name: #@ "Fetch " + pkg
    uses: actions/download-artifact@v2
    with:
      name: #@ pkg + ".${{ needs.build-packages.outputs.package_version }}.nupkg"
      path: ${{ github.workspace }}/Realm/packages/
#@ end
#@ end

#@ def getWrapperBinaryNames():
#@ wrapperPlatforms = [ 'macos', 'ios', 'linux' ]
#@ for androidABI in androidABIs:
#@   wrapperPlatforms.append("android-" + androidABI)
#@ end
#@ for windowsArch in windowsArchs:
#@   wrapperPlatforms.append("windows-" + windowsArch)
#@ end
#@ for uwpArch in windowsUWPArchs:
#@   wrapperPlatforms.append("windows-uwp-" + uwpArch)
#@ end
#@
#@ return wrapperPlatforms
#@ end

#@ def fetchWrapperBinaries():
#@ for platform in getWrapperBinaryNames():
  - name: #@ "Fetch artifacts for " + platform
    uses: actions/download-artifact@v2
    with:
      name: #@ "wrappers-" + platform
      path: wrappers/build
#@ end
#@ end

#@ def dotnetPublishAndRunTests(projectPath, framework, executeCommand, addNet5):
#@ properties = {
#@   "AddNet5Framework": addNet5,
#@   "RestoreConfigFile": "Tests/Test.NuGet.Config",
#@   "UseRealmNupkgsWithVersion": "${{ needs.build-packages.outputs.package_version }}"
#@ }
#@
#@ return dotnetPublishAndRun(projectPath, framework, executeCommand, properties)
#@ end

#@ def dotnetPublishAndRun(projectPath, framework, executeCommand, properties = {}):
#@ propsArg = ""
#@ for prop in properties.keys():
#@   propsArg += " -p:" + prop + "=" + properties[prop]
#@ end
#@
#@ runtime = "${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}"
  - name: #@ "Publish " + projectPath
    run: #@ "dotnet publish " + projectPath + " -c " + configuration + " -f " + framework + " -r " + runtime + propsArg
    shell: bash
  - name: Run the tests
    run: #@ "./" + projectPath + "/bin/" + configuration + "/" + framework + "/" + runtime + "/" + executeCommand
    shell: bash
#@ end

#@ def publishTestsResults(files, test_title):
name: Publish Unit Test Results
uses: EnricoMi/publish-unit-test-result-action/composite@v1
if: always()
with:
  files: #@ files
  comment_mode: "off"
  check_name: #@ "Results " + test_title
#@ end

#@ def findPackageVersion():
name: Find nupkg version
id: find-nupkg-version
run: |
  cd Realm/packages
  tmpName=$(basename Realm.Fody* .nupkg)
  pkgName=${tmpName#"Realm.Fody."}
  echo "::set-output name=package_version::$pkgName"
shell: bash
#@ end

#@ def msbuild(projectPath, **properties):
#@ parsedProps = ""
#@ target = ""
#@ for prop in properties.keys():
#@  if prop == "target":
#@    target = " -t:" + properties[prop]
#@  else:
#@    parsedProps += " -p:" + prop + "=" + properties[prop]
#@  end
#@ end
#@
name: #@ "Build " + projectPath
run: #@ "msbuild " + projectPath + target + " -p:Configuration=" + configuration + " -restore" + parsedProps
#@ end

---
name: main
"on":
  push:
    branches:
      - main
      - master
  pull_request:
jobs:
  build-wrappers-macos:
    runs-on: macos-latest
    name: Wrappers macOS
    _: #@ template.replace(buildWrappers("./wrappers/build-macos.sh", "wrappers-macos"))
  build-wrappers-ios:
    runs-on: macos-latest
    name: Wrappers iOS
    _: #@ template.replace(buildWrappers("./wrappers/build-ios.sh", "wrappers-ios"))
  build-wrappers-linux:
    runs-on: ubuntu-20.04
    name: Wrappers Linux
    _: #@ template.replace(buildWrappers("./wrappers/build.sh", "wrappers-linux"))
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Wrappers Android
    strategy:
      matrix:
        arch: #@ androidABIs
    _: #@ template.replace(buildWrappers("./wrappers/build-android.sh --ARCH=${{ matrix.arch }}", "wrappers-android-${{ matrix.arch }}"))
  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch: #@ windowsArchs
    _: #@ template.replace(buildWrappers("powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }}", "wrappers-windows-${{ matrix.arch }}", [ cacheVcpkg(), setupVcpkg() ]))
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Wrappers UWP
    strategy:
      matrix:
        arch: #@ windowsUWPArchs
    _: #@ template.replace(buildWrappers("powershell ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }}", "wrappers-windows-uwp-${{ matrix.arch }}", [ cacheVcpkg(), setupVcpkg() ]))
  build-packages:
    runs-on: windows-latest
    name: Package
    needs:
      - build-wrappers-windows
      - build-wrappers-macos
      - build-wrappers-ios
      - build-wrappers-android
      - build-wrappers-linux
      - build-wrappers-windows-uwp
    outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - #@ template.replace(checkoutCode())
      - name: Set version suffix
        id: set-version-suffix
        #! Build suffix is PR-1234.5 for PR builds or alpha.123 for branch builds.
        run: |
          $suffix = ""
          if ($env:GITHUB_EVENT_NAME -eq "pull_request")
          {
            if (-Not $env:GITHUB_REF.Contains("release"))
            {
              $suffix = "PR-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
            }
          }
          else
          {
            $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
          }
          echo "::set-output name=build_suffix::$suffix"
      - #@ template.replace(fetchWrapperBinaries())
      - #@ template.replace(buildPackages())
      - #@ findPackageVersion()
      - #@ template.replace(buildDocs())
      - #@ template.replace(uploadPackageArtifacts())
      - #@ template.replace(buildUnityPackage())
  run-tests-net-framework:
    runs-on: windows-latest
    name: Test .NET Framework
    needs: build-packages
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ template.replace(msbuildOnWin("Tests/Realm.Tests", TargetFramework="net461"))
      - name: Run the tests
        run: #@ "./Tests/Realm.Tests/bin/" + configuration + "/net461/Realm.Tests.exe --result=TestResults.Windows.xml --labels=After"
      - #@ publishTestsResults("TestResults.Windows.xml", ".NET Framework")
  run-tests-uwp:
    runs-on: windows-latest
    name: Test UWP managed
    needs: build-packages
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - name: Import test certificate
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $currentDirectory = Get-Location
          [IO.File]::WriteAllBytes("${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
          certutil -f -p ${{ secrets.Pfx_Password }} -importpfx my ${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx
        shell: powershell
      - #@ template.replace(msbuildOnWin("Tests/Tests.UWP", AppxBundle="Always", PackageCertificateKeyFile="${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", PackageCertificatePassword="${{ secrets.Pfx_Password }}", UseDotNetNativeToolchain="false", AppxBundlePlatforms="x64"))
      - name: Install the UWP test app
        run: Tests/Tests.UWP/AppPackages/Tests.UWP_1.0.0.0_Test/Install.ps1 -Force
        shell: powershell
      - name: Run the tests
        run: |
          echo "test_results=$env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
          Start-Process shell:AppsFolder\$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)!App -ArgumentList "--headless --labels=After --result=TestResults.UWP.xml"
          Write-Output "The test application is launched, this step is monitoring it and it will terminate when the tests are fully run"
          do
          {
              Start-Sleep -s 3
              $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
              $uwp_test_app = (Get-Process Tests.UWP -ErrorAction SilentlyContinue) -ne $null
          } while ($uwp_test_app -and !$file_available)

          $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
          if (!$file_available)
          {
            exit 1
          }
          else
          {
            Get-Content $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestRunOutput.txt
          }
        shell: powershell
      - #@ publishTestsResults( "${{ env.test_results }}", "UWP")
  run-tests-netcore-net5:
    name: Test .NET
    needs: build-packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        targetFramework: [ netcoreapp3.1, net5.0 ]
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ template.replace(dotnetPublishAndRunTests("Tests/Realm.Tests", "${{ matrix.targetFramework }}", "Realm.Tests --result=TestResults.xml --labels=After", "${{ matrix.targetFramework == 'net5.0' && 'true' || 'false' }}"))
      - #@ publishTestsResults("TestResults.xml", ".NET (${{ matrix.os }}, ${{ matrix.targetFramework }})")
  run-tests-xamarin-macos:
    runs-on: macos-latest
    name: Test Xamarin.macOS
    needs: build-packages
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ msbuild("Tests/Tests.XamarinMac", TargetFrameworkVersion="v2.0", RestoreConfigFile="Tests/Test.NuGet.Config", UseRealmNupkgsWithVersion="${{ needs.build-packages.outputs.package_version }}")
      - name: Run the tests
        run: #@ "Tests/Tests.XamarinMac/bin/" + configuration + "/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --labels=All --result=${{ github.workspace }}/TestResults.macOS.xml"
      - #@ publishTestsResults("TestResults.macOS.xml", "Xamarin.macOS")
  run-tests-xamarin-ios:
    runs-on: macos-latest
    name: Test Xamarin.iOS
    needs: build-packages
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ msbuild("Tests/Tests.iOS", TargetFrameworkVersion="v1.0", Platform="iPhoneSimulator", RestoreConfigFile="Tests/Test.NuGet.Config", UseRealmNupkgsWithVersion="${{ needs.build-packages.outputs.package_version }}")
      - name: Run the tests
        uses: realm/ci-actions/run-ios-simulator@v1
        with:
         appPath: 'Tests/Tests.iOS/bin/iPhoneSimulator/Release/Tests.iOS.app'
         bundleId: 'io.realm.dotnettests'
         iphoneToSimulate: 'iPhone-8'
         arguments: '--headless --resultpath ${{ github.workspace }}/TestResults.iOS.xml'
      - #@ publishTestsResults("TestResults.iOS.xml", "Xamarin.iOS")
  run-tests-weaver:
    runs-on: windows-latest
    name: Test Weaver
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(dotnetPublishAndRun("Tests/Weaver/Realm.Fody.Tests", "netcoreapp3.1", "Realm.Fody.Tests --result=TestResults.Weaver.xml --labels=After"))
      - #@ publishTestsResults("TestResults.Weaver.xml", "Weaver")
  run-cleanup:
    runs-on: ubuntu-latest
    name: Workflow cleanup
    needs: [ build-packages ]
    if: always()
    steps:
#@ for platform in getWrapperBinaryNames():
      - name: #@ "Delete artifacts for " + platform
        uses: geekyeggo/delete-artifact@v1
        with:
          name: #@ "wrappers-" + platform
#@ end
  benchmark-linux:
    name: Benchmark Linux
    needs: build-packages
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - #@ template.replace(checkoutCode())
      - #@ template.replace(fetchPackageArtifacts())
      - #@ template.replace(dotnetPublishAndRunTests("Tests/Benchmarks/PerformanceTests", "net5.0", "PerformanceTests -f \"*\" --join", "true"))
      - name: Find Results file
        id: find-results-file
        run: |
          cd BenchmarkDotNet.Artifacts/results
          file=$(basename BenchmarkRun*json)
          echo "::set-output name=benchmark-results::$file"
      - name: Publish Benchmark Results
        uses: ./.github/actions/benchmark-uploader
        with:
          realm-token: ${{ secrets.Realm_Token }}
          file: ${{ github.workspace }}/BenchmarkDotNet.Artifacts/results/${{ steps.find-results-file.outputs.benchmark-results }}
          dashboard-path: dashboard.charts
      - name: Upload Charts Dashboard File
        uses: actions/upload-artifact@v2
        with:
          name: dashboard.charts
          path: ${{ github.workspace }}/dashboard.charts
          retention-days: 30
