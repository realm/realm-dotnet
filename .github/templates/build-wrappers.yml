#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")
#@ load("common.lib.yml", "configuration", "checkoutCode", "setupVcpkg", "actionCache", "actionUploadArtifact", "actionDownloadArtifact", "getWrapperBinaryNames", "androidABIs", "windowsArchs", "windowsUWPArchs", "iOSArchs", "actionDockerLayerCaching", "actionDockerBuild", "actionDockerRun")

#@ wrappersTimeout = 90
#@ wrappersCacheCondition = "steps.check-cache.outputs.cache-hit != 'true'"

#@ def getWrapperBuildCommand(cmd, enableLto = True):
#@ defaultParams =  " --configuration=" + configuration
#@ if enableLto:
#@   defaultParams = defaultParams + " -DCMAKE_INTERPROCEDURAL_OPTIMIZATION='ON'"
#@ end
#@ if cmd.startswith("pwsh"):
#@   defaultParams = " -Configuration " + configuration
#@   if enableLto:
#@     defaultParams = defaultParams + " -EnableLTO"
#@   end
#@ end
#@ return cmd + defaultParams
#@ end

#@ def checkCache(outputVar, path = "wrappers/build/**", id = "check-cache", name = "Check cache"):
#@ key = outputVar + "-" + configuration + "-${{hashFiles('./wrappers/**')}}"
name: #@ name
id: #@ id
uses: #@ actionCache
with:
  path: #@ "./" + path
  key: #@ key
#@ end

#@ def uploadArtifacts(artifactName, relPath, retentionDays = "${{ github.event_name != 'pull_request' && 30 || 1 }}"):
name: #@ "Store artifacts for " + artifactName
uses: #@ actionUploadArtifact
with:
  name: #@ artifactName
  path: #@ "${{ github.workspace }}/" + relPath
  retention-days: #@ retentionDays
#@ end

#@ def buildWrappers(cmd, outputVar, intermediateSteps = [], enableLto = True, artifactsPath = "wrappers/build/**", cacheVariable = ""):
#@ if cacheVariable == "":
#@   cacheVariable = outputVar
#@ end
timeout-minutes: #@ wrappersTimeout
needs:
  - check-wrappers-cache
if: #@ "needs.check-wrappers-cache.outputs." + cacheVariable + " != 'true'"
steps:
  - #@ template.replace(checkoutCode("recursive", False))
  - #@ checkCache(outputVar, artifactsPath)
  #@ for step in intermediateSteps:
  - #@ template.replace(step)
  #@ end
  - name: Build wrappers
    run: #@ getWrapperBuildCommand(cmd, enableLto)
    if: #@ wrappersCacheCondition
  - #@ uploadArtifacts(outputVar, artifactsPath, 1)
#@ end

#@ def fetchiOSFrameworks():
#@ for platform in iOSArchs:
  - name: #@ "Fetch Framework for " + platform
    uses: #@ actionDownloadArtifact
    with:
      name: #@ "wrappers-ios-" + platform
      path: wrappers/cmake
    if: #@ wrappersCacheCondition
#@ end
#@ end

---
name: main
"on":
  workflow_call:
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  check-wrappers-cache:
    strategy:
      matrix:
        os:
        - ubuntu
        - windows
    runs-on: ${{ matrix.os }}-latest
    name: Check wrapper cache
    env:
      CACHE_SKIP_SAVE: true
    outputs:
      #@ for platform in getWrapperBinaryNames():
      #@yaml/text-templated-strings
      (@= "wrappers-" + platform @): #@ "${{ steps.check-cache-" + platform + ".outputs.cache-hit }}"
      #@ end
    steps:
        - #@ template.replace(checkoutCode("recursive", False))
      #@ for platform in getWrapperBinaryNames():
        #@ condition = "matrix.os == " + ("'windows'" if platform.find("windows") > -1 else "'ubuntu'")
        - _: #@ template.replace(checkCache("wrappers-" + platform, id = "check-cache-" + platform, name = "Check cache for " + platform))
          if: #@ condition
        - _: #@ template.replace(uploadArtifacts("wrappers-" + platform, "wrappers/build/**", 1))
          if: #@ condition + " && steps.check-cache-" + platform + ".outputs.cache-hit == 'true'"
        - run: git clean -fdx
          if: #@ condition
      #@ end
  build-wrappers-macos:
    runs-on: macos-latest
    name: Wrappers macOS
    _: #@ template.replace(buildWrappers("./wrappers/build-macos.sh", "wrappers-macos"))
  build-wrappers-ios-frameworks:
    runs-on: macos-latest
    name: Wrappers iOS frameworks
    strategy:
      matrix:
        arch: #@ iOSArchs
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build-ios.ps1 ${{ matrix.arch }} -SkipXCFramework", "wrappers-ios-${{ matrix.arch }}", enableLto = False, artifactsPath = "wrappers/cmake/**/realm-wrappers.framework", cacheVariable = "wrappers-ios"))
  build-wrappers-ios:
    runs-on: macos-latest
    name: Wrappers iOS XCframework
    needs:
      - check-wrappers-cache
      - build-wrappers-ios-frameworks
    if: needs.check-wrappers-cache.outputs.wrappers-ios != 'true'
    timeout-minutes: #@ wrappersTimeout
    steps:
      - #@ template.replace(checkoutCode("recursive", False))
      - #@ checkCache("wrappers-ios")
      - #@ template.replace(fetchiOSFrameworks())
      - name: Create xcframework
        #@yaml/text-templated-strings
        run: |
          $build_directory = "${{ github.workspace }}/wrappers/cmake/iOS"
          $install_prefix = "${{ github.workspace }}/wrappers/build"
          $xcframework_path = "$install_prefix/iOS/(@= configuration @)/realm-wrappers.xcframework"
          xcodebuild -create-xcframework -framework $build_directory/src/(@= configuration @)-iphonesimulator/realm-wrappers.framework -framework $build_directory/src/(@= configuration @)-iphoneos/realm-wrappers.framework -output "$xcframework_path"
        shell: powershell
        if: #@ wrappersCacheCondition
      - #@ uploadArtifacts("wrappers-ios", "wrappers/build/**", 1)
  build-wrappers-linux:
    runs-on: ubuntu-latest
    name: Wrappers Linux
    timeout-minutes: #@ wrappersTimeout
    needs:
      - check-wrappers-cache
    if: needs.check-wrappers-cache.outputs.wrappers-linux != 'true'
    steps:
      - #@ template.replace(checkoutCode("recursive"))
      - #@ checkCache("wrappers-linux")
      - uses: #@ actionDockerLayerCaching
        continue-on-error: true
        if: #@ wrappersCacheCondition
      - name: Build CentOS image
        uses: #@ actionDockerBuild
        with:
          tags: wrappers-centos:latest
          file: ./wrappers/centos.Dockerfile
          push: false
        if: #@ wrappersCacheCondition
      - name: Build wrappers
        uses: #@ actionDockerRun
        with:
          image: wrappers-centos:latest
          shell: bash
          options: -v ${{ github.workspace }}:/work
          run: #@ getWrapperBuildCommand("/work/wrappers/build.sh")
        if: #@ wrappersCacheCondition
      - #@ uploadArtifacts("wrappers-linux", "wrappers/build/**", 1)
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Wrappers Android
    strategy:
      matrix:
        arch: #@ androidABIs
    _: #@ template.replace(buildWrappers("./wrappers/build-android.sh --ARCH=${{ matrix.arch }}", "wrappers-android-${{ matrix.arch }}", enableLto = False, cacheVariable = "wrappers-android"))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-wrappers-cache.outputs.wrappers-android-" + x + " != 'true'" for x in androidABIs ])
  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch: #@ windowsArchs
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }}", "wrappers-windows-${{ matrix.arch }}", [ setupVcpkg("windows-${{ matrix.arch }}") ], cacheVariable = "wrappers-windows"))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-wrappers-cache.outputs.wrappers-windows-" + x + " != 'true'" for x in windowsArchs ])
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Wrappers UWP
    strategy:
      matrix:
        arch: #@ windowsUWPArchs
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }}", "wrappers-windows-uwp-${{ matrix.arch }}", [ setupVcpkg("uwp-${{ matrix.arch }}") ], cacheVariable = "wrappers-uwp"))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-wrappers-cache.outputs.wrappers-windows-uwp-" + x + " != 'true'" for x in windowsUWPArchs ])
