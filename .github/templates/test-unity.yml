#@ load("common.lib.yml", "uploadArtifacts", "actionDownloadArtifact")

#@ unityPkgName = "io.realm.unity-${{ inputs.version }}.tgz"

---
name: test-unity
"on":
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      platform:
        type: string
        required: true
      settings:
        type: string
        required: true
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  build-tests:
    runs-on:
      - unity
      - ${{ matrix.platrofm.os }}
    name: Build Unity ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform: ${{ fromJson(matrix.platrofm.testPlatform) }}
        settings: ${{ fromJson(matrix.settings) }}
    timeout-minutes: 30
    steps:
      - name: Fetch Unity Package
        uses: #@ actionDownloadArtifact
        with:
          name: #@ unityPkgName
          path: Realm/Realm.Unity
      - name: Fetch Unity Tests
        uses: #@ actionDownloadArtifact
        with:
          name: UnityTests
          path: Tests/Tests.Unity
      - name: Build Unity Tests
        run: |
          unity-editor -runTests -batchmode -projectPath ${{ github.workspace }}/Tests/Tests.Unity -testPlatform Standalone${{ matrix.platrofm.testPlatform }} -testSettingsFile ${{ github.workspace }}/Tests/Tests.Unity/.TestConfigs/${{ matrix.settings }}.json -logFile ${{ matrix.platrofm.os == 'windows' && 'build.log' || '-'}}
          ${{ matrix.platrofm.os == 'windows' && 'cat build.log' || ''}}
      - #@ uploadArtifacts("UnityTestsRunner.${{ matrix.platrofm.os }}", "Tests/Tests.Unity/Player_Standalone${{ matrix.platrofm.testPlatform }}_${{ matrix.settings }}/")

  #! run-tests-linux:
  #!   runs-on: ubuntu-latest
  #!   name: Unity Linux
  #!   timeout-minutes: 30
  #!   needs:
  #!     - build-tests
  #!   steps:
  #!     - name: Download Test Runner
  #!       uses: #@ actionDownloadArtifact
  #!       with:
  #!         name: UnityTestsRunner.linux
  #!         path: TestRunner
  #!     - name: Run Tests
  #!       run: |
  #!         ./TestRunner/PlayerWithTests -logFile -

  run-tests-windows:
    runs-on: windows-latest
    name: Unity Windows
    timeout-minutes: 30
    needs:
      - build-tests
    steps:
      - name: Download Test Runner
        uses: #@ actionDownloadArtifact
        with:
          name: UnityTestsRunner.windows
          path: TestRunner
      - name: Run Tests
        run: |
          tree
          ${{ github.workspace }}\TestRunner\PlayerWithTests.exe -logFile test.log
          cat test.log
        shell: powershell
