#@ load("@ytt:template", "template")
#@ load("common.lib.yml", "uploadArtifacts", "actionDownloadArtifact", "checkoutCode")
#@ load("test.lib.yml", "publishTestsResults")

#@ unityPkgName = "io.realm.unity-${{ inputs.version }}.tgz"

---
name: test-unity
"on":
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      platform:
        type: string
        required: true
      settings:
        type: string
        required: true
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  build-tests:
    runs-on:
      - unity
      - ${{ matrix.platform.os }}
    name: Build Unity ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.platform) }}
        settings: ${{ fromJson(inputs.settings) }}
    timeout-minutes: 30
    steps:
      - #@ template.replace(checkoutCode())
      - name: Cleanup Workspace
        run: git clean -fdx
      - name: Fetch Unity Package
        uses: #@ actionDownloadArtifact
        with:
          name: #@ unityPkgName
          path: Realm/Realm.Unity
      - name: Fetch Unity Tests
        uses: #@ actionDownloadArtifact
        with:
          name: UnityTests
          path: Tests/Tests.Unity
      - name: Build Unity Tests
        run: |
          unity-editor -runTests -batchmode -projectPath ${{ github.workspace }}/Tests/Tests.Unity -testPlatform Standalone${{ matrix.platform.testPlatform }} -testSettingsFile ${{ github.workspace }}/Tests/Tests.Unity/.TestConfigs/${{ matrix.settings }}.json -logFile ${{ matrix.platform.os == 'windows' && 'build.log' || '-'}}
      - #@ uploadArtifacts("UnityTestsRunner.${{ matrix.platform.os }}", "Tests/Tests.Unity/Player_Standalone${{ matrix.platform.testPlatform }}_${{ matrix.settings }}/")

  run-tests-linux:
    runs-on: ubuntu-latest
    name: Unity Linux
    timeout-minutes: 30
    needs:
      - build-tests
    if: ${{ contains(inputs.platform, 'Linux') }}
    steps:
      - #@ template.replace(checkoutCode())
      - name: Download Test Runner
        uses: #@ actionDownloadArtifact
        with:
          name: UnityTestsRunner.linux
          path: TestRunner
      - name: Install xvfb
        run: sudo apt install -y xvfb libglu1 libxcursor1
      - name: Run Tests
        run: |
          chmod +x ${{ github.workspace }}/TestRunner/PlayerWithTests.x86_64
          xvfb-run --auto-servernum --server-args='-screen 0 640x480x24:32' ${{ github.workspace }}/TestRunner/PlayerWithTests.x86_64 -logFile - --result=${{ github.workspace }}/TestResults.xml
      - #@ publishTestsResults("TestResults.xml", "Unity Linux Mono_Net4")

  run-tests-windows:
    runs-on: windows-latest
    name: Unity Windows
    if: ${{ contains(inputs.platform, 'Windows') }}
    timeout-minutes: 30
    needs:
      - build-tests
    steps:
      - #@ template.replace(checkoutCode())
      - name: Download Test Runner
        uses: #@ actionDownloadArtifact
        with:
          name: UnityTestsRunner.windows
          path: TestRunner
      - name: Run Tests
        run: |
          Start-Process ${{ github.workspace }}\TestRunner\PlayerWithTests.exe -Wait -ArgumentList "-logFile","${{ github.workspace }}\test.log","--result=${{ github.workspace }}\TestResults.xml"
          cat ${{ github.workspace }}\test.log
        shell: powershell
      - #@ publishTestsResults("TestResults.xml", "Unity Windows Mono_Net4")
