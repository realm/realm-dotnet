#@ load("@ytt:template", "template")
#@ load("common.lib.yml", "configuration", "checkoutCode", "actionCache", "actionDownloadArtifact", "getWrapperBinaryNames", "androidABIs", "windowsArchs", "windowsUWPArchs", "applePlatforms", "actionDockerLayerCaching", "actionDockerBuild", "actionDockerRun", "uploadArtifacts", "setupXcode", "linuxArchs")

#@ wrappersTimeout = 90
#@ wrappersCacheCondition = "steps.check-cache.outputs.cache-hit != 'true'"

#@ def getWrapperBuildCommand(cmd, enableLto = True):
#@ defaultParams =  " --configuration=" + configuration
#@ if enableLto:
#@   defaultParams = defaultParams + " -DCMAKE_INTERPROCEDURAL_OPTIMIZATION='ON'"
#@ end
#@ if cmd.startswith("pwsh"):
#@   defaultParams = " -Configuration " + configuration
#@   if enableLto:
#@     defaultParams = defaultParams + " -EnableLTO"
#@   end
#@ end
#@ return cmd + defaultParams
#@ end

#@ def checkCache(outputVar, path = "wrappers/build/**", id = "check-cache", name = "Check cache"):
#@ key = outputVar + "-" + configuration + "-${{hashFiles('./wrappers/**')}}"
name: #@ name
id: #@ id
uses: #@ actionCache
with:
  path: #@ "./" + path
  key: #@ key
#@ end
---
#@ def setupMSVC():
  - name: Setup MSVC
    run: |
      Start-Process "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" -ArgumentList 'modify --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" --quiet --add Microsoft.VisualStudio.Component.VC.14.35.17.5.${{ startswith(matrix.arch, 'ARM') && matrix.arch || 'x86.x64' }}' -Wait -PassThru
    shell: pwsh
    if: #@ wrappersCacheCondition
#@ end
---
#@ def buildWrappers(cmd, outputVar, intermediateSteps = [], enableLto = True, artifactsPath = "wrappers/build/**", cacheVariable = ""):
#@ if cacheVariable == "":
#@   cacheVariable = outputVar
#@ end
timeout-minutes: #@ wrappersTimeout
needs:
  - check-cache
if: #@ "needs.check-cache.outputs." + cacheVariable + " != 'true'"
steps:
  - #@ template.replace(checkoutCode("recursive", False))
  - #@ checkCache(outputVar, artifactsPath)
  #@ for step in intermediateSteps:
  - #@ template.replace(step)
  #@ end
  - name: Build wrappers
    run: #@ getWrapperBuildCommand(cmd, enableLto)
    if: #@ wrappersCacheCondition
  - #@ uploadArtifacts(outputVar, artifactsPath, 1)
#@ end

---
name: wrappers
"on":
  workflow_call:
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  check-cache:
    strategy:
      matrix:
        os:
        - ubuntu
        - windows
    runs-on: ${{ matrix.os }}-latest
    name: Check cache
    env:
      CACHE_SKIP_SAVE: true
    outputs:
      #@ for platform in getWrapperBinaryNames():
      #@yaml/text-templated-strings
      (@= "wrappers-" + platform @): #@ "${{ steps.check-cache-" + platform + ".outputs.cache-hit }}"
      #@ end
    steps:
        - #@ template.replace(checkoutCode("recursive", False))
      #@ for platform in getWrapperBinaryNames():
        #@ condition = "matrix.os == " + ("'windows'" if platform.find("windows") > -1 else "'ubuntu'")
        - _: #@ template.replace(checkCache("wrappers-" + platform, id = "check-cache-" + platform, name = "Check cache for " + platform))
          if: #@ condition
        - _: #@ template.replace(uploadArtifacts("wrappers-" + platform, "wrappers/build/**", 1))
          if: #@ condition + " && steps.check-cache-" + platform + ".outputs.cache-hit == 'true'"
        - run: git clean -fdx
          if: #@ condition
      #@ end
  macos:
    runs-on: macos-12
    name: macOS
    _: #@ template.replace(buildWrappers("./wrappers/build-macos.sh", "wrappers-macos"))
  catalyst:
    runs-on: macos-12
    name: Catalyst
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build-apple-platform.ps1 Catalyst", "wrappers-catalyst"))
  apple-platforms:
    runs-on: macos-12
    name: Apple Platform
    strategy:
      matrix:
        platform: #@ applePlatforms
        target: [ 'Device', 'Simulator' ]
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build-apple-platform.ps1 ${{ matrix.platform }} -Targets ${{ matrix.target }}", "wrappers-${{ matrix.platform }}-${{ matrix.target }}", enableLto = False, intermediateSteps = [setupXcode()]))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-cache.outputs.wrappers-" + x + "-Device != 'true'" for x in applePlatforms ] + [ "needs.check-cache.outputs.wrappers-" + x + "-Simulator != 'true'" for x in applePlatforms ])
  linux:
    runs-on: ubuntu-latest
    name: Linux
    strategy:
      matrix:
        arch: #@ linuxArchs
    timeout-minutes: #@ wrappersTimeout
    needs:
      - check-cache
    if: #@ " || ".join([ "needs.check-cache.outputs.wrappers-linux-" + x + " != 'true'" for x in linuxArchs ])
    steps:
      - #@ template.replace(checkoutCode("recursive"))
      - #@ checkCache("wrappers-linux-${{ matrix.arch }}")
      - name: Install Ninja
        run: sudo apt install ninja-build
        if: #@ wrappersCacheCondition
      - name: Build wrappers
        run: #@ getWrapperBuildCommand("./wrappers/build-linux.sh -a=${{ matrix.arch }}")
        if: #@ wrappersCacheCondition
      - #@ uploadArtifacts("wrappers-linux-${{ matrix.arch }}", "wrappers/build/**", 1)
  android:
    runs-on: ubuntu-20.04
    name: Android
    strategy:
      matrix:
        arch: #@ androidABIs
    _: #@ template.replace(buildWrappers("./wrappers/build-android.sh --ARCH=${{ matrix.arch }}", "wrappers-android-${{ matrix.arch }}", enableLto = False, cacheVariable = "wrappers-android"))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-cache.outputs.wrappers-android-" + x + " != 'true'" for x in androidABIs ])
  windows:
    runs-on: windows-latest
    name: Windows
    strategy:
      matrix:
        arch: #@ windowsArchs
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -ExtraCMakeArgs \"-T v143,version=14.35\"", "wrappers-windows-${{ matrix.arch }}", cacheVariable = "wrappers-windows", intermediateSteps = [setupMSVC()]))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-cache.outputs.wrappers-windows-" + x + " != 'true'" for x in windowsArchs ])
  uwp:
    runs-on: windows-latest
    name: UWP
    strategy:
      matrix:
        arch: #@ windowsUWPArchs
    _: #@ template.replace(buildWrappers("pwsh ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }} -ExtraCMakeArgs \"-T v143,version=14.35\"", "wrappers-windows-uwp-${{ matrix.arch }}", cacheVariable = "wrappers-uwp", intermediateSteps = [setupMSVC()]))
    #@yaml/map-key-override
    if: #@ " || ".join([ "needs.check-cache.outputs.wrappers-windows-uwp-" + x + " != 'true'" for x in windowsUWPArchs ])
