#@ load("@ytt:template", "template")
#@ load("common.lib.yml", "actionDownloadArtifact", "msbuild", "dotnetPublish", "fetchWrapperBinaries", "checkoutCode", "fetchPackageArtifacts")

#@ def baasTestArgs(differentiator):
#@   return " --baasurl=${{ inputs.realmUrl }} --baascluster=${{ inputs.clusterName }} --baasapikey=${{ secrets.AtlasPublicKey}} --baasprivateapikey=${{ secrets.AtlasPrivateKey}} --baasprojectid=${{ secrets.AtlasProjectId }} --baasdifferentiator=" + differentiator
#@ end
---
#@ def publishTestsResults(files, test_title):
name: Publish Unit Test Results
uses: LaPeste/test-reporter@510caf50a955b1003bec48a6494be4d6537f3a0b
if: always()
with:
  name: #@ "Results " + test_title
  path: #@ files
  reporter: java-junit
  list-suites: failed
  list-tests: failed
  path-replace-backslashes: true
  fail-on-error: false
#@ end
---
#@ def testDefinition(additionalSecrets = [], additionalInputs = []):
"on":
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      clusterName:
        required: false
        type: string
      realmUrl:
        required: false
        type: string
      atlasUrl:
        required: false
        type: string
      #@ for input in additionalInputs:
      #@yaml/text-templated-strings
      (@= input @):
        required: true
        type: string
      #@ end
    secrets:
      AtlasProjectId:
        required: false
      AtlasPublicKey:
        required: false
      AtlasPrivateKey:
        required: false
      #@ for secret in additionalSecrets:
      #@yaml/text-templated-strings
      (@= secret @):
        required: true
      #@ end
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
#@ end
---
#@ def buildTests(projectPath, **properties):
#@ return msbuild(projectPath, RestoreConfigFile="Tests/Test.NuGet.Config", UseRealmNupkgsWithVersion="${{ inputs.version }}", **properties)
#@ end

#@ def dotnetBuildTests(projectPath, framework, runtime, version = "inputs.version"):
#@ properties = {
#@   "RestoreConfigFile": "Tests/Test.NuGet.Config",
#@   "UseRealmNupkgsWithVersion": "${{ " + version + " }}",
#@   "RealmTestsStandaloneExe": "true"
#@ }
#@ return dotnetPublish(projectPath, framework, runtime, properties)
#@ end

#@ def wovenClassesBuildTests(projectPath, framework, runtime, version = "inputs.version"):
#@ properties = {
#@   "RestoreConfigFile": "Tests/Test.NuGet.Config",
#@   "UseRealmNupkgsWithVersion": "${{ " + version + " }}",
#@   "TestWeavedClasses": "true",
#@   "RealmTestsStandaloneExe": "true"
#@ }
#@ return dotnetPublish(projectPath, framework, runtime, properties)
#@ end
---
#@ def prepareTest(fetchWrappers = False, cleanupWorkspace = False):
- #@ template.replace(checkoutCode())
#@ if cleanupWorkspace:
- name: Cleanup Workspace
  run: git clean -fdx
#@ end
#@ if fetchWrappers:
- #@ template.replace(fetchWrapperBinaries())
#@ else:
- #@ template.replace(fetchPackageArtifacts())
#@ end
- uses: realm/ci-actions/mdb-realm/deploy@fa20eb972b9f018654fdb4e2c7afb52b0532f907
  if: ${{ inputs.realmUrl }}
  with:
    projectId: ${{ secrets.AtlasProjectId}}
    realmUrl: ${{ inputs.realmUrl }}
    atlasUrl: ${{ inputs.atlasUrl}}
    apiKey: ${{ secrets.AtlasPublicKey}}
    privateApiKey: ${{ secrets.AtlasPrivateKey }}
    clusterSize: M10
#@ end