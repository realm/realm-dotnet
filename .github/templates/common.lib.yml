#@ load("@ytt:template", "template")

#@ configuration = "Release"
#@ nugetPackages = [ 'Realm.Fody', 'Realm', 'Realm.UnityUtils', 'Realm.UnityWeaver' ]
#@ actionCheckout = "actions/checkout@v2"
#@ actionCache = "nirinchev/cache@d7c96a77c26ab70dd32b202c885cb4b34d95d8a8"
#@ actionUploadArtifact = "actions/upload-artifact@v2"
#@ actionDownloadArtifact = "actions/download-artifact@v2"
#@ actionSetupMSBuild = "microsoft/setup-msbuild@v1.0.2"
#@ actionSetupDotnet = "actions/setup-dotnet@v1"
#@ actionRuniOSSimulator = "realm/ci-actions/run-ios-simulator@v1"
#@ actionCodeQLInit = "github/codeql-action/init@v1"
#@ actionCodeQLAnalyze = "github/codeql-action/analyze@v1"
#@ actionSetupNode = "actions/setup-node@v2"
#@ actionAWSConfigureCredentials = "aws-actions/configure-aws-credentials@v1"
#@ actionReleaseToSlack = "realm/ci-actions/release-to-slack@v3"
#@ actionDeployBaaS = "realm/ci-actions/mdb-realm/deployApps@fac1d6958f03d71de743305ce3ab27594efbe7b7"
#@ actionCleanupBaaS = "realm/ci-actions/mdb-realm/cleanup@fac1d6958f03d71de743305ce3ab27594efbe7b7"

#@ androidABIs = [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
#@ windowsArchs = [ 'Win32', 'x64', 'ARM64' ]
#@ windowsUWPArchs = [ 'Win32', 'x64', 'ARM', 'ARM64' ]
#@ iOSArchs = [ 'Simulator', 'Device' ]

#@ actionDockerLayerCaching = "satackey/action-docker-layer-caching@cc3f3828e75cbb45f0cf5139b95329c88480aa97" #! 0.0.11
#@ actionDockerBuild = "docker/build-push-action@375f72aff65b645c51f122f04a776df8416b222b" #! 2.7.0
#@ actionDockerRun = "addnab/docker-run-action@3e77f186b7a929ef010f183a9e24c0f9955ea609" #! v3
#@ actionCoveralls = "coverallsapp/github-action@9ba913c152ae4be1327bfb9085dc806cedb44057" #! v1.1.3
#@ actionDeleteArtifact = "geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44" #! v1
#@ actionGithubRelease = "ncipollo/release-action@10c84d509b28aae3903113151bfd832314964f2e" #! v1.8.8
#@ actionDownloadAllArtifacts = "dawidd6/action-download-artifact@d0f291cf39bd21965ea9c4c6e210fc355c3844ed" #! v2.14.1
#@ actionCreatePR = "peter-evans/create-pull-request@7380612b49221684fefa025244f2ef4008ae50ad" #! 3.10.1
#@ actionFindPR = "juliangruber/find-pull-request-action@f9f7484f8237cf8485e5ab826e542ba5dd9e9c6e" #! 1.5.0
#@ actionMergePR = "juliangruber/merge-pull-request-action@8a13f2645ad8b6ada32f829b2fae9c0955a5265d" #! 1.0.6

#@ mainBranch = "main"
---

#@ def setupNugetCache(projectPaths = []):
#@ globs = []
#@ for projectPath in projectPaths:
#@   globs.append("'" + projectPath + "/*.csproj'")
#@ end
uses: actions/cache@v2
with:
  path: ~/.nuget/packages
  key: #@ "${{ runner.os }}-nuget-${{ hashFiles(" + ", ".join(globs) + ") }}"
#@ end
---
#@ def msbuild(projectPath, **properties):
#@ return msBuildMultiple([projectPath], **properties)
#@ end

#@ def msBuildMultiple(projectPaths, **properties):
#@ parsedProps = ""
#@ target = ""
#@ for prop in properties.keys():
#@  if prop == "target":
#@    target = " -t:" + properties[prop]
#@  else:
#@    parsedProps += " -p:" + prop + "=" + properties[prop]
#@  end
#@ end
#@
- name: Add msbuild to PATH
  uses: #@ actionSetupMSBuild
  if: ${{ runner.os == 'Windows' }}
- #@ setupNugetCache(projectPaths)
#@ for projectPath in projectPaths:
- name: #@ "Build " + projectPath
  run: #@ "msbuild " + projectPath + target + " -p:Configuration=" + configuration + " -restore" + parsedProps
#@ end
#@ end
---
#@ dotnetRuntime = "${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}"

#@ def dotnetPublish(projectPath, framework, properties = {}):
#@ propsArg = ""
#@ for prop in properties.keys():
#@   propsArg += " -p:" + prop + "=" + properties[prop]
#@ end
  - #@ setupNugetCache([ projectPath ])
  - name: #@ "Publish " + projectPath
    run: #@ "dotnet publish " + projectPath + " -c " + configuration + " -f " + framework + " -r " + dotnetRuntime + propsArg + " --no-self-contained"
  - name: Output executable path
    id: dotnet-publish
    run: #@ "echo '::set-output name=executable-path::./" + projectPath + "/bin/" + configuration + "/" + framework + "/" + dotnetRuntime + "'"
#@ end
---
#@ def checkoutCode(submodules=False, registerProblemMatchers=True):
  - name: Checkout code
    uses: #@ actionCheckout
    with:
      submodules: #@ submodules
      ref: ${{ github.event.pull_request.head.sha }}
#@ if registerProblemMatchers:
  - name: Register csc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/csc.json"
  - name: Register msvc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/msvc.json"
#@ end
#@ end

#@ def setupVcpkg(preset):
  - name: Setup Vcpkg
    uses: friendlyanon/setup-vcpkg@v1
    with:
      path: wrappers/realm-core/tools/vcpkg/ports
      cache-key: #@ "vcpkg-" + preset
      cache-restore-keys: #@ "vcpkg-" + preset
#@ end

#@ def downloadAllArtifacts(conclusion = "completed"):
  - name: Download all artifacts
    uses: #@ actionDownloadAllArtifacts
    with:
      workflow: pr.yml
      commit: ${{ github.sha }}
      path: ${{ github.workspace }}/Realm/packages/
      workflow_conclusion: #@ conclusion
#@ end

#@ def readVersionFromPackage():
  - name: Read version
    id: get-version
    run: |
      cd Realm/packages
      pkgVersion=$(find . -type f -iname "Realm.Fody.*.nupkg" -exec basename {} \; | sed -n 's/Realm.Fody\.\(.*\)\.nupkg$/\1/p')
      echo "::set-output name=version::$pkgVersion"
    shell: bash
#@ end

#@ def configureAWSCredentials(accessKey, secretKey, region = "us-east-1"):
  - name: Configure AWS Credentials
    uses: #@ actionAWSConfigureCredentials
    with:
      aws-access-key-id: #@ "${{ secrets." + accessKey + " }}"
      aws-secret-access-key: #@ "${{ secrets." + secretKey + " }}"
      aws-region: #@ region
#@ end

#@ def uploadPackagesToSleet(versionExpression = "steps.get-version.outputs.version", expectShortPath = False):
  - name: Configure .NET 6
    uses: #@ actionSetupDotnet
    with:
      dotnet-version: '6.0.x'
      include-prerelease: true
  - name: Install sleet
    run: dotnet tool install -g sleet
  - #@ template.replace(configureAWSCredentials("NUGET_S3_ACCESS_KEY", "NUGET_S3_SECRET_KEY"))
#@ for pkg in [ "Realm.Fody", "Realm" ]:
#@ pkg = pkg + ".${{ " + versionExpression + " }}"
#@ pkgPath = "" if expectShortPath else pkg + "/"
  - name: #@ "NuGet Publish " + pkg
    run: #@ "sleet push ${{ github.workspace }}/Realm/packages/" + pkgPath + pkg + ".nupkg --config ${{ github.workspace }}/.github/sleet.json --source NugetSource"
#@ end
#@ end

#@ def cleanupWorkspace():
  - name: Cleanup Workspace
    run: rm -rf "${{ github.workspace }}/*"
#@ end

#@ def getWrapperBinaryNames():
#@ wrapperPlatforms = [ 'macos', 'ios', 'linux' ]
#@ for androidABI in androidABIs:
#@   wrapperPlatforms.append("android-" + androidABI)
#@ end
#@ for windowsArch in windowsArchs:
#@   wrapperPlatforms.append("windows-" + windowsArch)
#@ end
#@ for uwpArch in windowsUWPArchs:
#@   wrapperPlatforms.append("windows-uwp-" + uwpArch)
#@ end
#@
#@ return wrapperPlatforms
#@ end

#@ def fetchWrapperBinaries():
#@ for platform in getWrapperBinaryNames():
  - name: #@ "Fetch artifacts for " + platform
    uses: #@ actionDownloadArtifact
    with:
      name: #@ "wrappers-" + platform
      path: wrappers/build
#@ end
#@ end
---
#@ def uploadArtifacts(artifactName, relPath, retentionDays = "${{ github.event_name != 'pull_request' && 30 || 1 }}"):
name: #@ "Store artifacts for " + artifactName
uses: #@ actionUploadArtifact
with:
  name: #@ artifactName
  path: #@ "${{ github.workspace }}/" + relPath
  retention-days: #@ retentionDays
#@ end