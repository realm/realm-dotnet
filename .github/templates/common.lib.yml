#@ load("@ytt:template", "template")

#@ configuration = "Release"
#@ nugetPackages = [ 'Realm', 'Realm.UnityUtils', 'Realm.UnityWeaver' ]
#@ actionCheckout = "actions/checkout@v3"
#@ actionCache = "nirinchev/cache@29e8e4dd9148ea81f9e188480132072cb6cc92d8"
#@ actionUploadArtifact = "actions/upload-artifact@v3"
#@ actionDownloadArtifact = "actions/download-artifact@v3"
#@ actionSetupMSBuild = "microsoft/setup-msbuild@0b44c6745b7e81956596964100aadb92d667c497"
#@ actionSetupDotnet = "actions/setup-dotnet@607fce577a46308457984d59e4954e075820f10a"
#@ actionRuniOSSimulator = "realm/ci-actions/run-ios-simulator@729a80d203351eab7df4eca564daa275e76ec52f"
#@ actionCodeQLInit = "github/codeql-action/init@40542d38bc4936c2ca7da883aeb050a6081b4b31"
#@ actionCodeQLAnalyze = "github/codeql-action/analyze@40542d38bc4936c2ca7da883aeb050a6081b4b31"
#@ actionSetupNode = "actions/setup-node@16352bb09bc672a073e326c2cc1d3d7d2a3e577e"
#@ actionAWSConfigureCredentials = "aws-actions/configure-aws-credentials@v1-node16"
#@ actionReleaseToSlack = "realm/ci-actions/release-to-slack@729a80d203351eab7df4eca564daa275e76ec52f"
#@ actionSetupXcode = "maxim-lobanov/setup-xcode@9a697e2b393340c3cacd97468baa318e4c883d98"

#@ androidABIs = [ 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' ]
#@ windowsArchs = [ 'Win32', 'x64', 'ARM64' ]
#@ linuxArchs = [ 'x86_64', 'armhf', 'aarch64' ]
#@ windowsUWPArchs = [ 'Win32', 'x64', 'ARM', 'ARM64' ]
#@ applePlatforms = [ 'iOS', 'tvOS'  ]

#@ actionDockerLayerCaching = "jpribyl/action-docker-layer-caching@c632825d12ec837065f49726ea27ddd40bcc7894" #! 0.1.1
#@ actionDockerBuild = "docker/build-push-action@6e95f19fb8c9e00a1a391941edbc0ae30c1799f7" #! 2.7.0
#@ actionDockerRun = "addnab/docker-run-action@3e77f186b7a929ef010f183a9e24c0f9955ea609" #! v3
#@ actionCoveralls = "coverallsapp/github-action@ca2a9dd5a20b12fa9aa428e0a6418a60a38bab22" #! v2.1.1
#@ actionDeleteArtifact = "geekyeggo/delete-artifact@dc8092f14c4245ef6a3501b1669b171c12899167" #! v1
#@ actionGithubRelease = "ncipollo/release-action@3ac4132803a6419fa2a7f4e9dbd1d93fceb690b9" #! v1.8.8
#@ actionDownloadAllArtifacts = "dawidd6/action-download-artifact@46b4ae883bf0726f5949d025d31cb62c7a5ac70c" #! v2.14.1
#@ actionCreatePR = "peter-evans/create-pull-request@6c704eb7a8ba1daa13da0dcea9bb93a4fe530275" #! 3.10.1
#@ actionFindPR = "juliangruber/find-pull-request-action@afdd62ccd2d4c55f5bdb154b489b85fc4cbcb9c1" #! 1.5.0
#@ actionMergePR = "juliangruber/merge-pull-request-action@333730196b34b74936aad75a4e31c23a57582d14" #! 1.0.6

#@ mainBranch = "main"
---

#@ def setupNugetCache(projectPaths = []):
#@ globs = []
#@ for projectPath in projectPaths:
#@   globs.append("'" + projectPath + "/*.csproj'")
#@ end
uses: actions/cache@v2
with:
  path: ~/.nuget/packages
  key: #@ "${{ runner.os }}-nuget-${{ hashFiles(" + ", ".join(globs) + ") }}"
#@ end
---
#@ def msbuild(projectPath, **properties):
#@ return msBuildMultiple([projectPath], **properties)
#@ end

#@ def msBuildMultiple(projectPaths, **properties):
#@ parsedProps = ""
#@ target = ""
#@ for prop in properties.keys():
#@  if prop == "target":
#@    target = " -t:" + properties[prop]
#@  else:
#@    parsedProps += " -p:" + prop + "=" + properties[prop]
#@  end
#@ end
#@
- name: Add msbuild to PATH
  uses: #@ actionSetupMSBuild
  if: ${{ runner.os == 'Windows' }}
#@ for projectPath in projectPaths:
- name: #@ "Build " + projectPath
  run: #@ "msbuild " + projectPath + target + " -p:Configuration=" + configuration + " -restore" + parsedProps
#@ end
#@ end
---
#@ def dotnetPublish(projectPath, framework, runtime, properties = {}):
#@ propsArg = ""
#@ for prop in properties.keys():
#@   propsArg += " -p:" + prop + "=" + properties[prop]
#@ end
  - name: #@ "Publish " + projectPath
    run: #@ "dotnet publish " + projectPath + " -c " + configuration + " -f " + framework + " -r " + runtime + propsArg + " --no-self-contained"
  - name: Output executable path
    id: dotnet-publish
    run: #@ "echo 'executable-path=./" + projectPath + "/bin/" + configuration + "/" + framework + "/" + runtime + "' >> $GITHUB_OUTPUT"
    shell: bash
#@ end
---
#@ def checkoutCode(submodules=False, registerProblemMatchers=True):
  - name: Checkout code
    uses: #@ actionCheckout
    with:
      submodules: #@ submodules
      ref: ${{ github.event.pull_request.head.sha }}
#@ if registerProblemMatchers:
  - name: Register csc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/csc.json"
  - name: Register msvc problem matcher
    run: echo "::add-matcher::.github/problem-matchers/msvc.json"
#@ end
#@ end

#@ def downloadAllArtifacts(conclusion = "completed"):
  - name: Download all artifacts
    uses: #@ actionDownloadAllArtifacts
    with:
      workflow: pr.yml
      commit: ${{ github.sha }}
      path: ${{ github.workspace }}/Realm/packages/
      workflow_conclusion: #@ conclusion
#@ end

#@ def readVersionFromPackage():
  - name: Read version
    id: get-version
    run: |
      cd Realm/packages
      pkgVersion=$(find . -type f -regex ".*Realm.[1-9].*.nupkg" -exec basename {} \; | sed -n 's/Realm\.\(.*\)\.nupkg$/\1/p')
      echo "version=$pkgVersion" >> $GITHUB_OUTPUT
    shell: bash
#@ end

#@ def configureAWSCredentials(accessKey, secretKey, region = "us-east-1"):
  - name: Configure AWS Credentials
    uses: #@ actionAWSConfigureCredentials
    with:
      aws-access-key-id: #@ "${{ secrets." + accessKey + " }}"
      aws-secret-access-key: #@ "${{ secrets." + secretKey + " }}"
      aws-region: #@ region
#@ end

#@ def uploadPackagesToSleet(versionExpression = "steps.get-version.outputs.version", expectShortPath = False):
  - #@ setupDotnet()
  - name: Install sleet
    run: dotnet tool install -g sleet
  - #@ template.replace(configureAWSCredentials("NUGET_S3_ACCESS_KEY", "NUGET_S3_SECRET_KEY"))
#@ for pkg in [ "Realm" ]:
#@ pkg = pkg + ".${{ " + versionExpression + " }}"
#@ pkgPath = "" if expectShortPath else pkg + "/"
  - name: #@ "NuGet Publish " + pkg
    run: #@ "sleet push ${{ github.workspace }}/Realm/packages/" + pkgPath + pkg + ".nupkg --config ${{ github.workspace }}/.github/sleet.json --source NugetSource"
#@ end
#@ end

#@ def cleanupWorkspace():
  - name: Cleanup Workspace
    run: rm -rf "${{ github.workspace }}/*"
#@ end

#@ def getWrapperBinaryNames():
#@ wrapperPlatforms = [ 'macos', 'catalyst' ]
#@ for linuxArch in linuxArchs:
#@   wrapperPlatforms.append("linux-" + linuxArch)
#@ end
#@ for platform in applePlatforms:
#@   wrapperPlatforms.append(platform + "-Device")
#@   wrapperPlatforms.append(platform + "-Simulator")
#@ end
#@ for androidABI in androidABIs:
#@   wrapperPlatforms.append("android-" + androidABI)
#@ end
#@ for windowsArch in windowsArchs:
#@   wrapperPlatforms.append("windows-" + windowsArch)
#@ end
#@ for uwpArch in windowsUWPArchs:
#@   wrapperPlatforms.append("windows-uwp-" + uwpArch)
#@ end
#@
#@ return wrapperPlatforms
#@ end

#@ def fetchWrapperBinaries():
#@ for platform in getWrapperBinaryNames():
  - name: #@ "Fetch artifacts for " + platform
    uses: #@ actionDownloadArtifact
    with:
      name: #@ "wrappers-" + platform
      path: wrappers/build
#@ end
#@ end
---
#@ def uploadArtifacts(artifactName, relPath, retentionDays = "${{ github.event_name != 'pull_request' && 30 || 1 }}"):
name: #@ "Store artifacts for " + artifactName
uses: #@ actionUploadArtifact
with:
  name: #@ artifactName
  path: #@ "${{ github.workspace }}/" + relPath
  retention-days: #@ retentionDays
  if-no-files-found: error
#@ end
---
#@ def setupDotnet(version = "6.0.x", ifCondition = ""):
name: Configure .NET
uses: #@ actionSetupDotnet
#@ if (ifCondition != ""):
if: #@ ifCondition
#@ end
with:
  dotnet-version: #@ version
#@ end
---
#@ def setupXcode(version = "14.0.1"):
- name: Setup Xcode
  uses: #@ actionSetupXcode
  with:
    xcode-version: #@ version
#@ end
---
#@ def uploadToNpm(tag = "latest", versionExpression = "steps.get-version.outputs.version", expectShortPath = False):
#@ package = "io.realm.unity-${{" + versionExpression + "}}.tgz"
#@ pkgPath = "" if expectShortPath else package + "/"
  - uses: #@ actionSetupNode
    with:
      node-version: '16.x'
      registry-url: 'https://registry.npmjs.org'
  - name: #@ "Npm Publish " + package
    run: #@ "npm publish ${{ github.workspace }}/Realm/packages/" + pkgPath + package + " --tag " + tag
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#@ end