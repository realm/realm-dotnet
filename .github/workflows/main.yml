name: main
"on":
  push:
    branches:
    - main
    - master
  pull_request: null
env:
  REALM_DISABLE_ANALYTICS: true
jobs:
  build-wrappers-macos:
    runs-on: macos-latest
    name: Wrappers macOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-macos-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-macos.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-ios:
    runs-on: macos-latest
    name: Wrappers iOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-ios-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-ios.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-linux:
    runs-on: ubuntu-latest
    name: Wrappers Linux
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - uses: satackey/action-docker-layer-caching@cc3f3828e75cbb45f0cf5139b95329c88480aa97
      continue-on-error: true
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build CentOS image
      uses: docker/build-push-action@375f72aff65b645c51f122f04a776df8416b222b
      with:
        tags: wrappers-centos:latest
        file: ./wrappers/centos.Dockerfile
        push: false
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      uses: addnab/docker-run-action@3e77f186b7a929ef010f183a9e24c0f9955ea609
      with:
        image: wrappers-centos:latest
        shell: bash
        options: -v ${{ github.workspace }}:/work
        run: /work/wrappers/build.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Wrappers Android
    strategy:
      matrix:
        arch:
        - armeabi-v7a
        - arm64-v8a
        - x86
        - x86_64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-android-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-android.sh --ARCH=${{ matrix.arch }} --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-android-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch:
        - Win32
        - x64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Install Win8.1 SDK
      run: |
        md C:\win81sdk
        Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile C:\win81sdk\sdksetup.exe -UseBasicParsing
        Start-Process -Wait C:\win81sdk\sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Wrappers UWP
    strategy:
      matrix:
        arch:
        - Win32
        - x64
        - ARM
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-uwp-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-packages:
    runs-on: windows-latest
    name: Package
    needs:
    - build-wrappers-windows
    - build-wrappers-macos
    - build-wrappers-ios
    - build-wrappers-android
    - build-wrappers-linux
    - build-wrappers-windows-uwp
    outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Set version suffix
      id: set-version-suffix
      run: |
        $suffix = ""
        if ($env:GITHUB_EVENT_NAME -eq "pull_request")
        {
          if (-Not "${{ github.head_ref }}".Contains("release"))
          {
            $suffix = "PR-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
          }
        }
        else
        {
          $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
        }
        echo "::set-output name=build_suffix::$suffix"
    - name: Fetch artifacts for macos
      uses: actions/download-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch artifacts for ios
      uses: actions/download-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build
    - name: Fetch artifacts for linux
      uses: actions/download-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build
    - name: Fetch artifacts for android-armeabi-v7a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch artifacts for android-arm64-v8a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch artifacts for android-x86
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch artifacts for android-x86_64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch artifacts for windows-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-ARM
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Build Realm/Realm.Fody
      run: msbuild Realm/Realm.Fody -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityUtils
      run: msbuild Realm/Realm.UnityUtils -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityWeaver
      run: msbuild Realm/Realm.UnityWeaver -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Find nupkg version
      id: find-nupkg-version
      run: |
        cd Realm/packages
        pkgVersion=$(find . -type f -iname "Realm.Fody.*.nupkg" | sed -n 's/\.\/Realm.Fody\.\(.*\)\.nupkg$/\1/p')
        echo "::set-output name=package_version::$pkgVersion"
      shell: bash
    - name: Check Docfx cache
      id: check-docfx-cache
      if: ${{ contains(github.head_ref, 'release') }}
      uses: actions/cache@v2
      with:
        path: C:\docfx
        key: docfx
    - name: Download docfx
      if: ${{ steps.check-docfx-cache.outputs.cache-hit != 'true' && contains(github.head_ref, 'release') }}
      run: |
        Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip -OutFile C:\docfx.zip
        Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
      shell: powershell
    - name: Build docs
      if: ${{ contains(github.head_ref, 'release') }}
      run: |
        C:\docfx\docfx Docs/docfx.json
        Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
    - name: Store docs artifacts
      if: ${{ contains(github.head_ref, 'release') }}
      uses: actions/upload-artifact@v2
      with:
        name: Docs.zip
        path: ${{ github.workspace }}/Realm/packages/Docs.zip
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm.Fody
      uses: actions/upload-artifact@v2
      with:
        name: Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm
      uses: actions/upload-artifact@v2
      with:
        name: Realm.${{ steps.find-nupkg-version.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/Realm.${{ steps.find-nupkg-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Build Unity
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
    - name: Store Unity artifacts
      uses: actions/upload-artifact@v2
      with:
        name: io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        path: ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for ExtractedChangelog.md
      uses: actions/upload-artifact@v2
      with:
        name: ExtractedChangelog
        path: ${{ github.workspace }}/Realm/Realm/ExtractedChangelog.md
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
  run-tests-net-framework:
    runs-on: windows-latest
    name: Test .NET Framework
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build Tests/Realm.Tests
      run: msbuild Tests/Realm.Tests -p:Configuration=Release -restore -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:TargetFramework=net461
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/net461/Realm.Tests.exe --result=TestResults.Windows.xml --labels=After
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.Windows.xml
        comment_mode: "off"
        check_name: Results .NET Framework
  run-tests-uwp:
    runs-on: windows-latest
    name: Test UWP managed
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Import test certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        [IO.File]::WriteAllBytes("${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
        certutil -f -p ${{ secrets.Pfx_Password }} -importpfx my ${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx
      shell: powershell
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build Tests/Tests.UWP
      run: msbuild Tests/Tests.UWP -p:Configuration=Release -restore -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:AppxBundle=Always -p:PackageCertificateKeyFile=${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Password }} -p:UseDotNetNativeToolchain=false -p:AppxBundlePlatforms=x64
    - name: Install the UWP test app
      run: Tests/Tests.UWP/AppPackages/Tests.UWP_1.0.0.0_Test/Install.ps1 -Force
      shell: powershell
    - name: Run the tests
      run: |
        echo "test_results=$env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
        Start-Process shell:AppsFolder\$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)!App -ArgumentList "--headless --labels=After --result=TestResults.UWP.xml"
        Write-Output "The test application is launched, this step is monitoring it and it will terminate when the tests are fully run"
        do
        {
            Start-Sleep -s 3
            $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
            $uwp_test_app = (Get-Process Tests.UWP -ErrorAction SilentlyContinue) -ne $null
        } while ($uwp_test_app -and !$file_available)

        $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
        if (!$file_available)
        {
          exit 1
        }
        else
        {
          Get-Content $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestRunOutput.txt
        }
      shell: powershell
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: ${{ env.test_results }}
        comment_mode: "off"
        check_name: Results UWP
  run-tests-netcore:
    name: Test .NET
    needs: build-packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - macos-latest
        - windows-latest
        - ubuntu-latest
        - win81
        targetFramework:
        - netcoreapp3.1
        - net5.0
        - net6.0
    steps:
    - name: Cleanup Workspace
      run: Remove-Item ${{ github.workspace }}\* -Recurse -Force
      if: matrix.os == 'win81'
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@v1
      if: matrix.targetFramework == 'net6.0'
      with:
        dotnet-version: 6.0.x
        include-prerelease: true
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f ${{ matrix.targetFramework }} -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }} -p:AdditionalFrameworks=${{ matrix.targetFramework }} -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      run: echo '::set-output name=executable-path::./Tests/Realm.Tests/bin/Release/${{ matrix.targetFramework }}/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}'
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Tests --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.xml
        comment_mode: "off"
        check_name: Results .NET (${{ matrix.os }}, ${{ matrix.targetFramework }})
  run-tests-xamarin-macos:
    runs-on: macos-latest
    name: Test Xamarin.macOS
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Tests/Tests.XamarinMac
      run: msbuild Tests/Tests.XamarinMac -p:Configuration=Release -restore -p:TargetFrameworkVersion=v2.0 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.XamarinMac/bin/Release/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --labels=All --result=${{ github.workspace }}/TestResults.macOS.xml
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.macOS.xml
        comment_mode: "off"
        check_name: Results Xamarin.macOS
  run-tests-xamarin-ios:
    runs-on: macos-latest
    name: Test Xamarin.iOS
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Tests/Tests.iOS
      run: msbuild Tests/Tests.iOS -p:Configuration=Release -restore -p:TargetFrameworkVersion=v1.0 -p:Platform=iPhoneSimulator -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      uses: realm/ci-actions/run-ios-simulator@v1
      with:
        appPath: Tests/Tests.iOS/bin/iPhoneSimulator/Release/Tests.iOS.app
        bundleId: io.realm.dotnettests
        iphoneToSimulate: iPhone-8
        arguments: --headless --resultpath ${{ github.workspace }}/TestResults.iOS.xml
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.iOS.xml
        comment_mode: "off"
        check_name: Results Xamarin.iOS
  run-tests-weaver:
    runs-on: windows-latest
    name: Test Weaver
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Publish Tests/Weaver/Realm.Fody.Tests
      run: dotnet publish Tests/Weaver/Realm.Fody.Tests -c Release -f netcoreapp3.1 -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      run: echo '::set-output name=executable-path::./Tests/Weaver/Realm.Fody.Tests/bin/Release/netcoreapp3.1/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}'
    - name: Run Tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Fody.Tests --result=TestResults.Weaver.xml --labels=After
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.Weaver.xml
        comment_mode: "off"
        check_name: Results Weaver
  code-coverage:
    runs-on: ubuntu-latest
    name: Code Coverage
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch artifacts for macos
      uses: actions/download-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch artifacts for ios
      uses: actions/download-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build
    - name: Fetch artifacts for linux
      uses: actions/download-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build
    - name: Fetch artifacts for android-armeabi-v7a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch artifacts for android-arm64-v8a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch artifacts for android-x86
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch artifacts for android-x86_64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch artifacts for windows-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-ARM
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Setup Coverlet & Report Generator
      run: |
        dotnet tool install coverlet.console --tool-path tools
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
        echo "${{ github.workspace }}/tools" >> $GITHUB_PATH
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f net5.0 -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }} -p:AdditionalFrameworks=net5.0 --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      run: echo '::set-output name=executable-path::./Tests/Realm.Tests/bin/Release/net5.0/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}'
    - name: Run the tests
      run: ./tools/coverlet ${{ steps.dotnet-publish.outputs.executable-path }} -t ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Tests -a "--labels=After" -f lcov -o ./report.lcov --exclude '[Realm.Tests]*' --exclude '[Realm.Fody]*'
    - name: Publish Coverage
      id: publish-coveralls
      uses: coverallsapp/github-action@9ba913c152ae4be1327bfb9085dc806cedb44057
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./report.lcov
        git-commit: ${{ github.event.pull_request.head.sha }}
    - name: Output Coveralls response
      run: echo ${{ steps.publish-coveralls.outputs.coveralls-api-result }}
  run-cleanup:
    runs-on: ubuntu-latest
    name: Workflow cleanup
    needs:
    - code-coverage
    if: always()
    steps:
    - name: Delete artifacts for macos
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-macos
    - name: Delete artifacts for ios
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-ios
    - name: Delete artifacts for linux
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-linux
    - name: Delete artifacts for android-armeabi-v7a
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-android-armeabi-v7a
    - name: Delete artifacts for android-arm64-v8a
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-android-arm64-v8a
    - name: Delete artifacts for android-x86
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-android-x86
    - name: Delete artifacts for android-x86_64
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-android-x86_64
    - name: Delete artifacts for windows-Win32
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-windows-Win32
    - name: Delete artifacts for windows-x64
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-windows-x64
    - name: Delete artifacts for windows-uwp-Win32
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-windows-uwp-Win32
    - name: Delete artifacts for windows-uwp-x64
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-windows-uwp-x64
    - name: Delete artifacts for windows-uwp-ARM
      uses: geekyeggo/delete-artifact@56e063d7d8bf9972ac54aca4454d3a6675917f44
      with:
        name: wrappers-windows-uwp-ARM
  benchmark-linux:
    name: Benchmark Linux
    needs: build-packages
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Publish Tests/Benchmarks/PerformanceTests
      run: dotnet publish Tests/Benchmarks/PerformanceTests -c Release -f net5.0 -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }} -p:AdditionalFrameworks=net5.0 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      run: echo '::set-output name=executable-path::./Tests/Benchmarks/PerformanceTests/bin/Release/net5.0/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}'
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }}/PerformanceTests -f "*" --join
    - name: Find Results file
      id: find-results-file
      run: |
        cd BenchmarkDotNet.Artifacts/results
        file=$(basename BenchmarkRun*json)
        echo "::set-output name=benchmark-results::$file"
    - name: Publish Benchmark Results
      uses: ./.github/actions/benchmark-uploader
      with:
        realm-token: ${{ secrets.Realm_Token }}
        file: ${{ github.workspace }}/BenchmarkDotNet.Artifacts/results/${{ steps.find-results-file.outputs.benchmark-results }}
        dashboard-path: dashboard.charts
        nuget-package: ${{ github.workspace }}/Realm/packages/Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
    - name: Upload Charts Dashboard File
      uses: actions/upload-artifact@v2
      with:
        name: dashboard.charts
        path: ${{ github.workspace }}/dashboard.charts
        retention-days: 30
