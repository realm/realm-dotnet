name: main
"on":
  push:
    branches:
    - main
    - master
  pull_request: null
jobs:
  build-wrappers-macos:
    runs-on: macos-latest
    name: Wrappers macOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-macos-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-macos.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-ios:
    runs-on: macos-latest
    name: Wrappers iOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-ios-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-ios.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-linux:
    runs-on: ubuntu-20.04
    name: Wrappers Linux
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Wrappers Android
    strategy:
      matrix:
        arch:
        - armeabi-v7a
        - arm64-v8a
        - x86
        - x86_64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-android-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-android.sh --ARCH=${{ matrix.arch }} --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-android-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch:
        - Win32
        - x64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Write-Output 'Beginning download...'
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Write-Output ((Get-Item C:\vcpkg.zip).length/1MB)
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
        Write-Output 'Completed!'
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Wrappers UWP
    strategy:
      matrix:
        arch:
        - Win32
        - x64
        - ARM
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Write-Output 'Beginning download...'
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Write-Output ((Get-Item C:\vcpkg.zip).length/1MB)
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
        Write-Output 'Completed!'
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-uwp-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1
  build-packages:
    runs-on: windows-latest
    name: Package
    needs:
    - build-wrappers-windows
    - build-wrappers-macos
    - build-wrappers-ios
    - build-wrappers-android
    - build-wrappers-linux
    - build-wrappers-windows-uwp
    outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Set version suffix
      id: set-version-suffix
      run: echo "::set-output name=build_suffix::${{ github.event_name == 'pull_request' && format('PR-{0}', github.event.number) || 'alpha'}}.${{ github.run_number }}"
    - name: Fetch artifacts for macos
      uses: actions/download-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch artifacts for ios
      uses: actions/download-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build
    - name: Fetch artifacts for linux
      uses: actions/download-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build
    - name: Fetch artifacts for android-armeabi-v7a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch artifacts for android-arm64-v8a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch artifacts for android-x86
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch artifacts for android-x86_64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch artifacts for windows-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-ARM
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Build Realm/Realm.Fody
      run: msbuild Realm/Realm.Fody -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityUtils
      run: msbuild Realm/Realm.UnityUtils -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityWeaver
      run: msbuild Realm/Realm.UnityWeaver -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Find nupkg version
      id: find-nupkg-version
      run: |
        cd Realm/packages
        tmpName=$(basename Realm.Fody* .nupkg)
        pkgName=${tmpName#"Realm.Fody."}
        echo "::set-output name=package_version::$pkgName"
      shell: bash
    - name: Store artifacts for Realm.Fody
      uses: actions/upload-artifact@v2
      with:
        name: Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm
      uses: actions/upload-artifact@v2
      with:
        name: Realm.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm.UnityUtils
      uses: actions/upload-artifact@v2
      with:
        name: Realm.UnityUtils.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.UnityUtils.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm.UnityWeaver
      uses: actions/upload-artifact@v2
      with:
        name: Realm.UnityWeaver.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.UnityWeaver.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Build Unity
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
    - name: Store Unity artifacts
      uses: actions/upload-artifact@v2
      with:
        name: io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        path: ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Cleanup build folder
      run: rm ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
    - name: Build Unity Bundled Dependencies
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack --include-dependencies
    - name: Store Unity artifacts
      uses: actions/upload-artifact@v2
      with:
        name: io.realm.unity-bundled-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        path: ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-bundled-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Cleanup build folder
      run: rm ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-bundled-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
  run-tests-net-framework:
    runs-on: windows-latest
    name: Test .NET Framework
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build Tests/Realm.Tests
      run: msbuild Tests/Realm.Tests -p:Configuration=Release -restore -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:TargetFramework=net461
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/net461/Realm.Tests.exe --result=TestResults.Windows.xml --labels=After
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.Windows.xml
        comment_mode: "off"
        check_name: Windows .NET framework tests results
  run-tests-uwp:
    runs-on: windows-latest
    name: Test UWP managed
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Import test certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        [IO.File]::WriteAllBytes("${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
        certutil -f -p ${{ secrets.Pfx_Password }} -importpfx my ${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx
      shell: powershell
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build Tests/Tests.UWP
      run: msbuild Tests/Tests.UWP -p:Configuration=Release -restore -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:AppxBundle=Always -p:PackageCertificateKeyFile=${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Password }} -p:UseDotNetNativeToolchain=false -p:AppxBundlePlatforms=x64
    - name: Install the UWP test app
      run: Tests/Tests.UWP/AppPackages/Tests.UWP_1.0.0.0_Test/Install.ps1 -Force
      shell: powershell
    - name: Run the tests
      run: |
        echo "test_results=$env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml"  | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
        Start-Process shell:AppsFolder\$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)!App -ArgumentList "--headless --labels=After --result=TestResults.UWP.xml"
        Write-Output "The test application is launched, this step is monitoring it and it will terminate when the tests are fully run"
        do
        {
            Start-Sleep -s 3
            $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
            $uwp_test_app = (Get-Process Tests.UWP -ErrorAction SilentlyContinue) -ne $null
        } while ($uwp_test_app -and !$file_available)

        $file_available = Test-Path -Path $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestResults.UWP.xml
        if (!$file_available)
        {
          exit 1
        }
        else
        {
          Get-Content $env:LOCALAPPDATA/Packages/$(get-appxpackage -name realm.uwp.tests | select -expandproperty PackageFamilyName)/LocalState/TestRunOutput.txt
        }
      shell: powershell
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: ${{ env.test_results }}
        comment_mode: "off"
        check_name: UWP tests results
  run-tests-netcore-net5:
    name: Test .NET
    needs: build-packages
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - macos-latest
        - windows-latest
        - ubuntu-latest
        targetFramework:
        - netcoreapp3.1
        - net5.0
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f ${{ matrix.targetFramework }} -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }} -p:AddNet5Framework=${{ matrix.targetFramework == 'net5.0' && 'true' || 'false' }} -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
      shell: bash
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/${{ matrix.targetFramework }}/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}/Realm.Tests --result=TestResults.xml --labels=After
      shell: bash
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.xml
        comment_mode: "off"
        check_name: ${{ matrix.os }} ${{ matrix.targetFramework }} tests results
  run-tests-xamarin-macos:
    runs-on: macos-latest
    name: Test Xamarin.macOS
    needs: build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Tests/Tests.XamarinMac
      run: msbuild Tests/Tests.XamarinMac -p:Configuration=Release -restore -p:TargetFrameworkVersion=v2.0 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.XamarinMac/bin/Release/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --labels=All --result=${{ github.workspace }}/TestResults.macOS.xml
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.macOS.xml
        comment_mode: "off"
        check_name: Xamarin MacOs tests results
  run-tests-weaver:
    runs-on: windows-latest
    name: Test weaver
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Publish Tests/Weaver/Realm.Fody.Tests
      run: dotnet publish Tests/Weaver/Realm.Fody.Tests -c Release -f netcoreapp3.1 -r ${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}
      shell: bash
    - name: Run the tests
      run: ./Tests/Weaver/Realm.Fody.Tests/bin/Release/netcoreapp3.1/${{ (runner.os == 'macOS' && 'osx-x64') || (runner.os == 'Windows' && 'win-x64') || (runner.os == 'Linux' && 'linux-x64') || '???' }}/Realm.Fody.Tests --result=TestResults.Weaver.xml --labels=After
      shell: bash
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.Weaver.xml
        comment_mode: "off"
        check_name: Weaver tests results
