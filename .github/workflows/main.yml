name: build and test
on: [push]

jobs:
  # build-wrappers-macos:
  #   runs-on: macos-latest
  #   name: Build macOs wrappers
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: Build wrappers
  #       uses: ./.github/actions/build_cache_executor
  #       env:
  #         REALM_CMAKE_CONFIGURATION: Release
  #       with:
  #         cmd: ./wrappers/build-macos.sh
  #         cachePath: ./wrappers

  # build-wrappers-ios:
  #   runs-on: macos-latest
  #   name: Build iOS wrappers
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: Build wrappers
  #       uses: ./.github/actions/build_cache_executor
  #       with:
  #         cmd: ./wrappers/build-ios.sh --configuration=Release
  #         cachePath: ./wrappers

  # fetch-windows-dependencies:
  #   runs-on: windows-latest
  #   name: Fetch windows dependencies
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: Check if cached dependencies
  #       id: dependencies-cache
  #       uses: actions/cache@v2
  #       with:
  #         path: 'C:\src'
  #         key: dependencies-windows-${{hashfiles('.\wrappers\build.ps1')}}
  #     - name: Fetch dependencies
  #       if: steps.dependencies-cache.outputs.cache-hit != 'true'
  #       uses: .\.github\actions\get-vcpkg-prebuilt

  build-wrappers-windows:
    runs-on: windows-latest
    name: Build Windows wrappers
    # needs: fetch-windows-dependencies
    strategy:
      matrix:
        arch: [Win32, x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      # - name: Check if contains wrappers already
      #   uses: actions/cache@v2
      #   id: wrapper-cache
      #   with:
      #     path: ./wrappers/build/
      #     key: wrapper-windows-${{ matrix.arch }}-${{hashfiles('./wrappers/**')}}
      # - name: Obtain the cached dependencies
      # if: steps.wrapper-cache.outputs.cache-hit != 'true'
      # uses: actions/cache@v2
      # with:
      #   path: 'C:\src'
      #   key: dependencies-windows-${{hashfiles('.\wrappers\build.ps1')}}
      - name: Fetch dependencies
        uses: .\.github\actions\get-vcpkg-prebuilt
      - name: Build wrappers
        # if: steps.wrapper-cache.outputs.cache-hit != 'true'
        # uses: .\.github\actions\build_cache_executor
        # with:
        #   cmd: powershell .\wrappers\build.ps1 Windows -Configuration Release -Platforms ${{ matrix.arch }}
        #   cachePath: .\wrappers
        run: powershell .\wrappers\build.ps1 Windows -Configuration Release -Platforms ${{ matrix.arch }}

  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Build Windows UWP wrappers
    # needs: fetch-windows-dependencies
    strategy:
      matrix:
        arch: [Win32, x64, ARM]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      # - name: Check if contains wrappers already
      #   uses: actions/cache@v2
      #   id: wrapper-cache
      #   with:
      #     path: ./wrappers/build/
      #     key: wrapper-windows-uwp-${{ matrix.arch }}-${{hashfiles('./wrappers/**')}}
      # - name: Obtain the cached dependencies
      #   if: steps.wrapper-cache.outputs.cache-hit != 'true'
      #   uses: actions/cache@v2
      #   with:
      #     path: 'C:\src'
      #     key: dependencies-windows-${{hashfiles('.\wrappers\build.ps1')}}
      - name: Fetch dependencies
        uses: .\.github\actions\get-vcpkg-prebuilt
      - name: Build wrappers
        # if: steps.wrapper-cache.outputs.cache-hit != 'true'
        # uses: .\.github\actions\build_cache_executor
        # with:
        #   cmd: powershell .\wrappers\build.ps1 WindowsStore -Configuration Release -Platforms ${{ matrix.arch }}
        #   cachePath: .\wrappers
        run: powershell .\wrappers\build.ps1 WindowsStore -Configuration Release -Platforms ${{ matrix.arch }}
