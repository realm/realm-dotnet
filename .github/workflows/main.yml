name: main
"on":
  push:
    branches:
    - main
    - master
  pull_request: null
env:
  REALM_DISABLE_ANALYTICS: true
jobs:
  build-wrappers-macos:
    runs-on: macos-latest
    name: Wrappers macOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-macos-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-macos.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-macos
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-macos
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-wrappers-ios:
    runs-on: macos-latest
    name: Wrappers iOS
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-ios-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-ios.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-ios
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-ios
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-wrappers-linux:
    runs-on: ubuntu-latest
    name: Wrappers Linux
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - uses: satackey/action-docker-layer-caching@cc3f3828e75cbb45f0cf5139b95329c88480aa97
      continue-on-error: true
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build CentOS image
      uses: docker/build-push-action@375f72aff65b645c51f122f04a776df8416b222b
      with:
        tags: wrappers-centos:latest
        file: ./wrappers/centos.Dockerfile
        push: false
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      uses: addnab/docker-run-action@3e77f186b7a929ef010f183a9e24c0f9955ea609
      with:
        image: wrappers-centos:latest
        shell: bash
        options: -v ${{ github.workspace }}:/work
        run: /work/wrappers/build.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-linux
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-linux
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-wrappers-android:
    runs-on: ubuntu-20.04
    name: Wrappers Android
    strategy:
      matrix:
        arch:
        - armeabi-v7a
        - arm64-v8a
        - x86
        - x86_64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-android-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Build wrappers
      run: ./wrappers/build-android.sh --ARCH=${{ matrix.arch }} --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-android-${{ matrix.arch }}
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-android-${{ matrix.arch }}
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch:
        - Win32
        - x64
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Install Win8.1 SDK
      run: |
        md C:\win81sdk
        Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile C:\win81sdk\sdksetup.exe -UseBasicParsing
        Start-Process -Wait C:\win81sdk\sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-windows-${{ matrix.arch }}
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-${{ matrix.arch }}
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-wrappers-windows-uwp:
    runs-on: windows-latest
    name: Wrappers UWP
    strategy:
      matrix:
        arch:
        - Win32
        - x64
        - ARM
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts for wrappers-windows-uwp-${{ matrix.arch }}
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-uwp-${{ matrix.arch }}
        path: ${{ github.workspace }}/wrappers/build/**
        retention-days: 1
  build-packages:
    runs-on: windows-latest
    name: Package
    needs:
    - build-wrappers-windows
    - build-wrappers-macos
    - build-wrappers-ios
    - build-wrappers-android
    - build-wrappers-linux
    - build-wrappers-windows-uwp
    outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Set version suffix
      id: set-version-suffix
      run: |
        $suffix = ""
        if ($env:GITHUB_EVENT_NAME -eq "pull_request")
        {
          if (-Not "${{ github.head_ref }}".Contains("release"))
          {
            $suffix = "PR-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
          }
        }
        else
        {
          $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
        }
        echo "::set-output name=build_suffix::$suffix"
    - name: Fetch artifacts for macos
      uses: actions/download-artifact@v2
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch artifacts for ios
      uses: actions/download-artifact@v2
      with:
        name: wrappers-ios
        path: wrappers/build
    - name: Fetch artifacts for linux
      uses: actions/download-artifact@v2
      with:
        name: wrappers-linux
        path: wrappers/build
    - name: Fetch artifacts for android-armeabi-v7a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch artifacts for android-arm64-v8a
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch artifacts for android-x86
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch artifacts for android-x86_64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch artifacts for windows-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-ARM
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Build Realm/Realm.Fody
      run: msbuild Realm/Realm.Fody -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityUtils
      run: msbuild Realm/Realm.UnityUtils -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityWeaver
      run: msbuild Realm/Realm.UnityWeaver -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Find nupkg version
      id: find-nupkg-version
      run: |
        cd Realm/packages
        pkgVersion=$(find . -type f -iname "Realm.Fody.*.nupkg" | sed -n 's/\.\/Realm.Fody\.\(.*\)\.nupkg$/\1/p')
        echo "::set-output name=package_version::$pkgVersion"
      shell: bash
    - name: Check Docfx cache
      id: check-docfx-cache
      if: ${{ contains(github.head_ref, 'release') }}
      uses: actions/cache@v2
      with:
        path: C:\docfx
        key: docfx
    - name: Download docfx
      if: ${{ steps.check-docfx-cache.outputs.cache-hit != 'true' && contains(github.head_ref, 'release') }}
      run: |
        Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip -OutFile C:\docfx.zip
        Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
      shell: powershell
    - name: Build docs
      if: ${{ contains(github.head_ref, 'release') }}
      run: |
        C:\docfx\docfx Docs/docfx.json
        Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
    - name: Store artifacts for Docs.zip
      uses: actions/upload-artifact@v2
      with:
        name: Docs.zip
        path: ${{ github.workspace }}/Realm/packages/Docs.zip
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
      if: ${{ contains(github.head_ref, 'release') }}
    - name: Store artifacts for Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}
      uses: actions/upload-artifact@v2
      with:
        name: Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm.${{ steps.find-nupkg-version.outputs.package_version }}
      uses: actions/upload-artifact@v2
      with:
        name: Realm.${{ steps.find-nupkg-version.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/Realm.${{ steps.find-nupkg-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Build Unity
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
    - name: Store artifacts for io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
      uses: actions/upload-artifact@v2
      with:
        name: io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        path: ${{ github.workspace }}/Realm/Realm.Unity/io.realm.unity-${{ steps.find-nupkg-version.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for ExtractedChangelog
      uses: actions/upload-artifact@v2
      with:
        name: ExtractedChangelog
        path: ${{ github.workspace }}/Realm/Realm/ExtractedChangelog.md
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}

  test-xamarinandroid:
    runs-on: macos-latest
    name: Test Xamarin.Android
    needs:
    - build-packages
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Tests/Tests.Android
      run: msbuild Tests/Tests.Android -p:Configuration=Release -restore -p:AndroidUseSharedRuntime=False -p:EmbedAssembliesIntoApk=True -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: AVD cache
      uses: actions/cache@v2
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: android-avd
    - name: Create AVD for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
    - name: Run the tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          adb devices
          adb install ${{ github.workspace }}/Tests/Tests.Android/bin/Release/io.realm.xamarintests-Signed.apk
          adb shell pm grant io.realm.xamarintests android.permission.READ_EXTERNAL_STORAGE
          adb shell pm grant io.realm.xamarintests android.permission.WRITE_EXTERNAL_STORAGE
          adb shell am instrument -w -r io.realm.xamarintests/.TestRunner
          adb pull /storage/sdcard0/RealmTests/TestResults.Android.xml ${{ github.workspace }}/TestResults.Android.xml
          adb shell rm /sdcard/Realmtests/TestResults.Android.xml
    - name: Publish Unit Test Results
      uses: LaPeste/test-reporter@b8a650f4490e7472b930f56bbb92c7b42dc5db15
      if: always()
      with:
        name: Results Xamarin.iOS
        path: TestResults.Android.xml
        reporter: java-junit
        list-suites: failed
        list-tests: failed
        path-replace-backslashes: true
        fail-on-error: false
