name: test-weaver
"on":
  workflow_call: null
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  run-tests-weaver:
    strategy:
      matrix:
        os:
        - runner: windows-latest
          runtime: win-x64
        - runner: ubuntu-latest
          runtime: linux-x64
        - runner: macos-latest
          runtime: osx-x64
    runs-on: ${{ matrix.os.runner }}
    name: Weaver
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Get Workload Location
      id: workflow-location
      run: |
        if (${{ runner.os }} -eq "Windows") {
          echo "path=C:\ProgramData\dotnet\workloads" >> $env:GITHUB_OUTPUT
        } else {
          $dotnetPath = (get-item (get-command dotnet).Path).Directory.FullName
          echo "path=$dotnetPath/packs" >> $env:GITHUB_OUTPUT
        }
    - name: Get cache key
      id: workflow-cache-key
      run: echo "key=${{ runner.os }}-workload2-$(date +'%U')-" >> "$GITHUB_OUTPUT"
    - name: Restore cached workloads
      uses: actions/cache/restore@v3
      id: workload-restore
      with:
        path: ${{ steps.workflow-location.outputs.path }}
        key: ${{ steps.workflow-cache-key.outputs.key }}android ${{ (matrix.os.runner != 'ubuntu-latest' && 'tvos ios maccatalyst') || '' }}
    - name: Setup workloads
      run: dotnet workload install android ${{ (matrix.os.runner != 'ubuntu-latest' && 'tvos ios maccatalyst') || '' }}
    - name: Cache workloads
      uses: actions/cache/save@v3
      with:
        path: ${{ steps.workflow-location.outputs.path }}
        key: ${{ steps.workflow-cache-key.outputs.key }}android ${{ (matrix.os.runner != 'ubuntu-latest' && 'tvos ios maccatalyst') || '' }}
    - name: Publish Tests/Weaver/Realm.Fody.Tests
      run: dotnet publish Tests/Weaver/Realm.Fody.Tests -c Release -f net6.0 -r ${{ matrix.os.runtime }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      run: echo 'executable-path=./Tests/Weaver/Realm.Fody.Tests/bin/Release/net6.0/${{ matrix.os.runtime }}' >> $GITHUB_OUTPUT
      shell: bash
    - name: Run Tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }}/Realm.Fody.Tests --result=TestResults.Weaver.xml --labels=After
    - name: Publish Unit Test Results
      uses: LaPeste/test-reporter@510caf50a955b1003bec48a6494be4d6537f3a0b
      if: always()
      with:
        name: Results Weaver ${{ matrix.os.runtime }}
        path: TestResults.Weaver.xml
        reporter: java-junit
        list-suites: failed
        list-tests: failed
        path-replace-backslashes: true
        fail-on-error: false
