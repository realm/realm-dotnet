# Do not modify!
# This file was generated from a template using https://github.com/StefMa/pkl-gha

name: Main Build
'on':
  push:
    branches:
    - community
  workflow_dispatch:
    inputs:
      publish-prerelease:
        description: Indicates whether to publish the package to Sleet/npm
        required: false
        type: boolean
      run-benchmark:
        description: Indicates whether to run the benchmark tests
        required: false
        type: boolean
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  build-wrappers:
    name: Wrappers
    uses: ./.github/workflows/wrappers.yml
  build-packages:
    name: Package NuGet
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-wrappers
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      package_version: ${{ steps.get-version.outputs.package_version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Set version suffix
      id: set-version-suffix
      shell: pwsh
      run: |-
        $suffix = ""
        if ($env:GITHUB_EVENT_NAME -eq "pull_request")
        {
          if (-Not "${{ github.head_ref }}".Contains("release"))
          {
            $suffix = "pr-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
          }
        }
        else
        {
          $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
        }
        echo "build_suffix=$suffix" >> $Env:GITHUB_OUTPUT
    - name: Fetch wrappers for macos
      uses: actions/download-artifact@v4
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch wrappers for catalyst
      uses: actions/download-artifact@v4
      with:
        name: wrappers-catalyst
        path: wrappers/build
    - name: Fetch wrappers for linux-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-x86_64
        path: wrappers/build
    - name: Fetch wrappers for linux-armhf
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-armhf
        path: wrappers/build
    - name: Fetch wrappers for linux-aarch64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-aarch64
        path: wrappers/build
    - name: Fetch wrappers for android-armeabi-v7a
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch wrappers for android-arm64-v8a
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch wrappers for android-x86
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch wrappers for android-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch wrappers for windows-Win32
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch wrappers for windows-x64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch wrappers for windows-ARM64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-ARM64
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-Win32
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-x64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-ARM
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-ARM64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM64
        path: wrappers/build
    - name: Fetch wrappers for iOS-Device
      uses: actions/download-artifact@v4
      with:
        name: wrappers-iOS-Device
        path: wrappers/build
    - name: Fetch wrappers for iOS-Simulator
      uses: actions/download-artifact@v4
      with:
        name: wrappers-iOS-Simulator
        path: wrappers/build
    - name: Fetch wrappers for tvOS-Device
      uses: actions/download-artifact@v4
      with:
        name: wrappers-tvOS-Device
        path: wrappers/build
    - name: Fetch wrappers for tvOS-Simulator
      uses: actions/download-artifact@v4
      with:
        name: wrappers-tvOS-Simulator
        path: wrappers/build
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityUtils
      run: msbuild Realm/Realm.UnityUtils -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityWeaver
      run: msbuild Realm/Realm.UnityWeaver -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Read version
      id: get-version
      shell: bash
      run: |-
        cd Realm/packages
        pkgVersion=$(find . -type f -regex ".*Realm.[1-9].*.nupkg" -exec basename {} \; | sed -n 's/Realm\.\(.*\)\.nupkg$/\1/p')
        echo "package_version=$pkgVersion" >> $GITHUB_OUTPUT
    - name: Store artifacts for Realm.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for ExtractedChangelog
      uses: actions/upload-artifact@v4
      with:
        name: ExtractedChangelog
        path: Realm/Realm/ExtractedChangelog.md
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Check Docfx cache
      id: check-docfx-cache
      if: contains(github.head_ref, 'release')
      uses: actions/cache@v4
      with:
        path: C:\docfx
        key: docfx-2.75.2
    - name: Download docfx
      if: contains(github.head_ref, 'release') && steps.check-docfx-cache.outputs.cache-hit != 'true'
      run: |-
        Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.75.2/docfx-win-x64-v2.75.2.zip -OutFile C:\docfx.zip
        Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
    - name: Build docs
      if: contains(github.head_ref, 'release')
      env:
        DOCFX_SOURCE_BRANCH_NAME: ${{ github.head_ref }}
      run: C:\docfx\docfx Docs/docfx.json
    - name: Update Improve this doc links
      if: contains(github.head_ref, 'release')
      shell: pwsh
      run: |-
        Get-ChildItem Docs/_site -Filter *.html -Recurse -File |
        ForEach-Object {
          $content = ($_ | Get-Content -Raw)
          $content = $content -replace "/Docs/apispec/new\?filename", "/Docs/apispec?filename"
          Set-Content $_.FullName $content
        }
    - name: Archive docs
      if: contains(github.head_ref, 'release')
      run: Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
    - name: Store artifacts for Docs.zip
      if: contains(github.head_ref, 'release')
      uses: actions/upload-artifact@v4
      with:
        name: Docs.zip
        path: Realm/packages/Docs.zip
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  build-unity:
    name: Package Unity
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityUtils
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityUtils.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityWeaver
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Unity
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
    - name: Store artifacts for io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
      uses: actions/upload-artifact@v4
      with:
        name: io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
        path: Realm/Realm.Unity/io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Build Tests
      run: dotnet run --project Tools/SetupUnityPackage/ -- tests --realm-package Realm/Realm.Unity/io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
    - name: Store artifacts for UnityTests
      uses: actions/upload-artifact@v4
      with:
        name: UnityTests
        path: Tests/Tests.Unity
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  test-net-framework:
    name: Test .NET Framework
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Realm.Tests
      run: msbuild Tests/Realm.Tests -restore -p:Configuration=Release -p:TargetFramework=net461 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/net461/Realm.Tests.exe --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results .NET Framework
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-uwp:
    name: Test UWP
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Import test certificate
      shell: powershell
      run: |-
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        [IO.File]::WriteAllBytes("${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
        certutil -f -p "${{ secrets.Pfx_Password }}" -importpfx my ${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.UWP
      run: msbuild Tests/Tests.UWP -restore -p:Configuration=Release -p:AppxBundle=Always -p:PackageCertificateKeyFile=${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Password }} -p:UseDotNetNativeToolchain=false -p:AppxBundlePlatforms=x64 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      shell: powershell
      run: ./Tests/Tests.UWP/RunTests.ps1
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results UWP
        path: ${{ env.TEST_RESULTS }}
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-net-core:
    name: Test ${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    strategy:
      matrix:
        framework:
        - net6.0
        - net8.0
        os:
        - runner: windows-latest
          runtime: win-x64
        - runner: ubuntu-latest
          runtime: linux-x64
        - runner: macos-14
          runtime: osx-x64
        include:
        - framework: net8.0
          os:
            runner: macos-14
            runtime: osx-arm64
      fail-fast: false
    runs-on: ${{ matrix.os.runner }}
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Cleanup Workspace
      run: git clean -fdx
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Clear nuget cache
      if: ${{ matrix.os.runner == 'win81' }}
      run: dotnet nuget locals all --clear
    - name: Extract .NET version
      id: get-net-version
      shell: bash
      run: |2-
          NET_VERSION=$(echo '${{ matrix.framework }}.x' | sed 's/net//g')
          echo "version=$NET_VERSION" >> $GITHUB_OUTPUT
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: ${{ steps.get-net-version.outputs.version }}
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f ${{ matrix.framework }} -r ${{ matrix.os.runtime }} -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/${{ matrix.framework }}/${{ matrix.os.runtime }}/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      env:
        DOTNET_DbgEnableMiniDump: 1
        DOTNET_EnableCrashReport: 1
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Archive core dump
      if: ${{ failure() && runner.os != 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: crash-report-net-core-${{ runner.os }}-${{ runner.arch }}
        path: /tmp/coredump*
        retention-days: 30
        if-no-files-found: warn
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results ${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-macos-xamarin:
    name: Test Xamarin.macOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.XamarinMac
      run: msbuild Tests/Tests.XamarinMac -restore -p:Configuration=Release -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.XamarinMac/bin/Release/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.macOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-macos-maui:
    name: Test Maui.MacCatalyst
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-14
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
      with:
        xcode-version: latest-stable
    - name: Build Tests/Tests.Maui
      run: dotnet build Tests/Tests.Maui -c Release -f net8.0-maccatalyst -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.Maui/bin/Release/net8.0-maccatalyst/maccatalyst-x64/Tests.Maui.app/Contents/MacOS/Tests.Maui --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
    - name: Transform Results
      run: xsltproc --output TestResults.xml_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt TestResults.xml
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.MacCatalyst
        path: TestResults.xml_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-ios-xamarin:
    name: Test Xamarin.iOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.iOS
      run: msbuild Tests/Tests.iOS -restore -p:Configuration=Release -p:Platform=iPhoneSimulator -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.iOS/bin/iPhoneSimulator/Release/Tests.iOS.app
        bundleId: io.realm.dotnettests
        iphoneToSimulate: iPhone-8
        arguments: '--headless --result=${{ github.workspace }}/TestResults.xml --labels=All '
        os: iOS
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.iOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-ios-maui:
    name: Test Maui.iOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-14
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
      with:
        xcode-version: latest-stable
    - name: Build Tests/Tests.Maui
      run: dotnet build Tests/Tests.Maui -c Release -f net8.0-ios -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.Maui/bin/Release/net8.0-ios/iossimulator-arm64/Tests.Maui.app
        bundleId: io.realm.mauitests
        iphoneToSimulate: iPhone-15
        arguments: --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
        os: iOS
    - name: Transform Results
      run: xsltproc --output TestResults.xml_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt TestResults.xml
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.iOS
        path: TestResults.xml_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-tvos:
    name: Test Xamarin.tvOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.XamarinTVOS
      run: msbuild Tests/Tests.XamarinTVOS -restore -p:Configuration=Release -p:Platform=iPhoneSimulator -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.XamarinTVOS/bin/iPhoneSimulator/Release/Tests.XamarinTVOS.app
        bundleId: io.realm.Tests-XamarinTVOS
        iphoneToSimulate: Apple-TV-1080p
        arguments: --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
        os: tvOS
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.tvOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-android-xamarin:
    name: Test Xamarin.Android
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Setup JDK
      uses: actions/setup-java@2e74cbce18569d23ca8b812590dbb83f13ac7c5a
      with:
        distribution: microsoft
        java-version: 17
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.Android
      run: msbuild Tests/Tests.Android -t:SignAndroidPackage -restore -p:Configuration=Release -p:AndroidUseSharedRuntime=False -p:EmbedAssembliesIntoApk=True -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Run the tests
      id: run_tests
      uses: ./.github/actions/run-android-device-farm-test
      with:
        apk-path: ${{ github.workspace }}/Tests/Tests.Android/bin/Release/io.realm.xamarintests-Signed.apk
        app-id: io.realm.xamarintests
        project-arn: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
        device-pool-arn: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.Android
        path: ${{ steps.run_tests.outputs.test-results-path }}
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-android-maui:
    name: Test Maui.Android
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Setup JDK
      uses: actions/setup-java@2e74cbce18569d23ca8b812590dbb83f13ac7c5a
      with:
        distribution: microsoft
        java-version: 17
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Publish Tests/Tests.Maui
      run: dotnet publish Tests/Tests.Maui -c Release -f net8.0-android -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Tests.Maui/bin/Release/net8.0-android/null/Tests.Maui' >> $GITHUB_OUTPUT
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Run the tests
      id: run_tests
      uses: ./.github/actions/run-android-device-farm-test
      with:
        apk-path: ${{ github.workspace }}/Tests/Tests.Maui/bin/Release/net8.0-android/publish/io.realm.mauitests-Signed.apk
        app-id: io.realm.mauitests
        project-arn: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
        device-pool-arn: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
    - name: Transform Results
      run: xsltproc --output ${{ steps.run_tests.outputs.test-results-path }}_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt ${{ steps.run_tests.outputs.test-results-path }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.Android
        path: ${{ steps.run_tests.outputs.test-results-path }}_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-woven-classes:
    name: Test Woven Classes
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f net8.0 -r win-x64 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true -p:TestWeavedClasses=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/net8.0/win-x64/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Woven Classes
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-source-generation:
    name: Test Source Generation
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 6.0.x
    - name: Publish Tests/SourceGenerators/Realm.SourceGenerator.Tests
      run: dotnet publish Tests/SourceGenerators/Realm.SourceGenerator.Tests -c Release -f net6.0 -r win-x64  --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/SourceGenerators/Realm.SourceGenerator.Tests/bin/Release/net6.0/win-x64/Realm.SourceGenerator.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Source Generation
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-weaver:
    name: Test Weaver
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    strategy:
      matrix:
        os:
        - runner: windows-latest
          runtime: win-x64
        - runner: ubuntu-latest
          runtime: linux-x64
        - runner: macos-14
          runtime: osx-arm64
      fail-fast: false
    runs-on: ${{ matrix.os.runner }}
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 6.0.x
    - name: Publish Tests/Weaver/Realm.Fody.Tests
      run: dotnet publish Tests/Weaver/Realm.Fody.Tests -c Release -f net6.0 -r ${{ matrix.os.runtime }}  --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Weaver/Realm.Fody.Tests/bin/Release/net6.0/${{ matrix.os.runtime }}/Realm.Fody.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Weaver
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-code-coverage:
    name: Test Code Coverage
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-wrappers
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch wrappers for linux-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-x86_64
        path: wrappers/build
    - name: Setup Coverlet & Report Generator
      run: |-
        dotnet tool install coverlet.console --tool-path tools
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
        echo "${{ github.workspace }}/tools" >> $GITHUB_PATH
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f net8.0 -r linux-x64 -p:RealmTestsStandaloneExe=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/net8.0/linux-x64/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      env:
        DOTNET_DbgEnableMiniDump: 1
        DOTNET_EnableCrashReport: 1
      run: ./tools/coverlet ./Tests/Realm.Tests/bin/Release/net8.0/linux-x64 -t ${{ steps.dotnet-publish.outputs.executable-path }} -a '--result=TestResults.xml --labels=After' -f lcov -o ./report.lcov --exclude '[Realm.Tests]*' --exclude '[Realm.Fody]*'
    - name: Archive core dump
      if: ${{ failure() && runner.os != 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: crash-report-net-core-${{ runner.os }}-${{ runner.arch }}
        path: /tmp/coredump*
        retention-days: 30
        if-no-files-found: warn
    - name: Publish Coverage
      id: publish-coveralls
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: ./report.lcov
        git-commit: ${{ github.event.pull_request.head.sha }}
        compare-sha: ${{ github.event.pull_request.base.sha }}
    - name: Output Coveralls response
      run: echo ${{ steps.publish-coveralls.outputs.coveralls-api-result }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Code Coverage
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  verify-namespaces:
    name: Verify Namespaces
    needs:
    - build-packages
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityUtils
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityUtils.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityWeaver
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - run: dotnet tool install ilspycmd -g --version 8.0.0.7345
    - name: Verify Namespaces
      shell: pwsh
      run: |-
        $isFailure = $false
        Get-ChildItem ./Realm/packages -Filter *.nupkg | Foreach-Object {
          $targetPath = Join-Path ./Realm/packages $_.BaseName
          Expand-Archive $_.FullName -DestinationPath $targetPath

          Get-ChildItem $targetPath -Filter *.dll -Recurse | ForEach-Object {
            if (-not ($_.FullName -match "runtimes")) {
              $ilspyOutput = ilspycmd $_.FullName

              $parentDll = $_.FullName

              $ilspyOutput | ForEach-Object {
                if ($_ -match "namespace.*Realm(\.|$)") {
                  Write-Output "::error file=$parentDll::Realm present in namespace - $($_)"
                  Set-Variable "isFailure" -Value $true
                }
              }
            }
          }
        }

        if ($isFailure) {
          exit 1
        }
  lint:
    name: Verify TODOs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: nirinchev/verify-todo@ffa352ac028b4cdc8bc626471d33aa341b3ab7c9
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        include: '**/*.+(cs|cpp|hpp)'
        exclude: wrappers/realm-core/**
        pattern: \\WR[A-Z]+-[0-9]+
  publish-packages-to-sleet:
    name: Publish package to S3
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && (github.event_name == 'push' || github.event.inputs.publish-prerelease) }}
    needs: build-packages
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Install sleet
      run: dotnet tool install -g sleet
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.NUGET_S3_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.NUGET_S3_SECRET_KEY }}
        aws-region: us-east-1
    - name: NuGet Publish Realm.${{ needs.build-packages.outputs.package_version }}
      run: sleet push ${{ github.workspace }}/Realm/packages/Realm.${{ needs.build-packages.outputs.package_version }}.nupkg --config ${{ github.workspace }}/.github/sleet.json --source NugetSource
  test-xunit:
    name: Test xUnit Compatibility
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Publish Tests/Tests.XUnit
      run: dotnet publish Tests/Tests.XUnit -c Release -f net6.0 -r win-x64  --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Tests.XUnit/bin/Release/net6.0/win-x64/Tests.XUnit' >> $GITHUB_OUTPUT
    - name: Run Tests
      run: dotnet test ${{ steps.dotnet-publish.outputs.executable-path }}/Tests.XUnit.dll --logger GitHubActions
  benchmark-linux:
    name: Test Benchmark
    if: ${{ always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && (github.event_name == 'push' || github.event.inputs.run-benchmark) }}
    needs:
    - build-packages
    runs-on: performance-tests
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Cleanup Workspace
      run: git clean -fdx
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Clear nuget cache
      run: dotnet nuget locals all --clear
    - name: Publish Tests/Benchmarks/PerformanceTests
      run: dotnet publish Tests/Benchmarks/PerformanceTests -c Release -f net6.0 -r linux-x64 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Benchmarks/PerformanceTests/bin/Release/net6.0/linux-x64/PerformanceTests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }}/PerformanceTests -f "*" --join
    - name: Find Results file
      id: find-results-file
      shell: bash
      run: |-
        cd BenchmarkDotNet.Artifacts/results
        file=$(basename BenchmarkRun*json)
        echo "benchmark-results=$file" >> $GITHUB_OUTPUT
    - name: Publish Benchmark Results
      uses: ./github/actions/benchmark-uploader
      with:
        realm-token: ${{ secrets.Realm_Token }}
        file: ${{ github.workspace }}/BenchmarkDotNet.Artifacts/results/${{ steps.find-results-file.outputs.benchmark-results }}
        dashboard-path: dashboard.charts
        nuget-package: ${{ github.workspace }}/Realm/packages/Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
    - name: Store artifacts for dashboard.charts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard.charts
        path: dashboard.charts
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
---
# Do not modify!
# This file was generated from a template using https://github.com/StefMa/pkl-gha

name: PR Build
'on':
  pull_request:
    paths:
    - '**.cs'
    - '**.cpp'
    - '**.hpp'
    - '**.csproj'
    - '**CMakeLists.txt'
    - '**.ps1'
    - '**.sh'
    - '**.props'
    - wrappers/realm-core
    - .github/workflows/*.yml
    - '!.github/workflows/main.yml'
    - '!.github/workflows/publish-*.yml'
    - .github/actions/**
    - Tests/Tests.Android/Properties/AndroidManifest.xml
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build-wrappers:
    name: Wrappers
    uses: ./.github/workflows/wrappers.yml
  build-packages:
    name: Package NuGet
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-wrappers
    runs-on: windows-latest
    timeout-minutes: 30
    outputs:
      package_version: ${{ steps.get-version.outputs.package_version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Set version suffix
      id: set-version-suffix
      shell: pwsh
      run: |-
        $suffix = ""
        if ($env:GITHUB_EVENT_NAME -eq "pull_request")
        {
          if (-Not "${{ github.head_ref }}".Contains("release"))
          {
            $suffix = "pr-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
          }
        }
        else
        {
          $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
        }
        echo "build_suffix=$suffix" >> $Env:GITHUB_OUTPUT
    - name: Fetch wrappers for macos
      uses: actions/download-artifact@v4
      with:
        name: wrappers-macos
        path: wrappers/build
    - name: Fetch wrappers for catalyst
      uses: actions/download-artifact@v4
      with:
        name: wrappers-catalyst
        path: wrappers/build
    - name: Fetch wrappers for linux-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-x86_64
        path: wrappers/build
    - name: Fetch wrappers for linux-armhf
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-armhf
        path: wrappers/build
    - name: Fetch wrappers for linux-aarch64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-aarch64
        path: wrappers/build
    - name: Fetch wrappers for android-armeabi-v7a
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch wrappers for android-arm64-v8a
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch wrappers for android-x86
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch wrappers for android-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch wrappers for windows-Win32
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch wrappers for windows-x64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch wrappers for windows-ARM64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-ARM64
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-Win32
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-x64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-ARM
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Fetch wrappers for windows-uwp-ARM64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM64
        path: wrappers/build
    - name: Fetch wrappers for iOS-Device
      uses: actions/download-artifact@v4
      with:
        name: wrappers-iOS-Device
        path: wrappers/build
    - name: Fetch wrappers for iOS-Simulator
      uses: actions/download-artifact@v4
      with:
        name: wrappers-iOS-Simulator
        path: wrappers/build
    - name: Fetch wrappers for tvOS-Device
      uses: actions/download-artifact@v4
      with:
        name: wrappers-tvOS-Device
        path: wrappers/build
    - name: Fetch wrappers for tvOS-Simulator
      uses: actions/download-artifact@v4
      with:
        name: wrappers-tvOS-Simulator
        path: wrappers/build
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityUtils
      run: msbuild Realm/Realm.UnityUtils -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm.UnityWeaver
      run: msbuild Realm/Realm.UnityWeaver -t:Pack -restore -p:Configuration=Release -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Read version
      id: get-version
      shell: bash
      run: |-
        cd Realm/packages
        pkgVersion=$(find . -type f -regex ".*Realm.[1-9].*.nupkg" -exec basename {} \; | sed -n 's/Realm\.\(.*\)\.nupkg$/\1/p')
        echo "package_version=$pkgVersion" >> $GITHUB_OUTPUT
    - name: Store artifacts for Realm.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.UnityUtils.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}
      uses: actions/upload-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}
        path: Realm/packages/Realm.UnityWeaver.${{ steps.get-version.outputs.package_version }}.*nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Store artifacts for ExtractedChangelog
      uses: actions/upload-artifact@v4
      with:
        name: ExtractedChangelog
        path: Realm/Realm/ExtractedChangelog.md
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Check Docfx cache
      id: check-docfx-cache
      if: contains(github.head_ref, 'release')
      uses: actions/cache@v4
      with:
        path: C:\docfx
        key: docfx-2.75.2
    - name: Download docfx
      if: contains(github.head_ref, 'release') && steps.check-docfx-cache.outputs.cache-hit != 'true'
      run: |-
        Invoke-WebRequest -Uri https://github.com/dotnet/docfx/releases/download/v2.75.2/docfx-win-x64-v2.75.2.zip -OutFile C:\docfx.zip
        Expand-Archive -Path C:\docfx.zip -DestinationPath C:\docfx
    - name: Build docs
      if: contains(github.head_ref, 'release')
      env:
        DOCFX_SOURCE_BRANCH_NAME: ${{ github.head_ref }}
      run: C:\docfx\docfx Docs/docfx.json
    - name: Update Improve this doc links
      if: contains(github.head_ref, 'release')
      shell: pwsh
      run: |-
        Get-ChildItem Docs/_site -Filter *.html -Recurse -File |
        ForEach-Object {
          $content = ($_ | Get-Content -Raw)
          $content = $content -replace "/Docs/apispec/new\?filename", "/Docs/apispec?filename"
          Set-Content $_.FullName $content
        }
    - name: Archive docs
      if: contains(github.head_ref, 'release')
      run: Compress-Archive -Path Docs/_site -DestinationPath "Realm/packages/Docs.zip"
    - name: Store artifacts for Docs.zip
      if: contains(github.head_ref, 'release')
      uses: actions/upload-artifact@v4
      with:
        name: Docs.zip
        path: Realm/packages/Docs.zip
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  build-unity:
    name: Package Unity
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityUtils
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityUtils.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityWeaver
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Build Unity
      run: dotnet run --project Tools/SetupUnityPackage/ -- realm --packages-path Realm/packages --pack
    - name: Store artifacts for io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
      uses: actions/upload-artifact@v4
      with:
        name: io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
        path: Realm/Realm.Unity/io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - name: Build Tests
      run: dotnet run --project Tools/SetupUnityPackage/ -- tests --realm-package Realm/Realm.Unity/io.realm.unity-${{ needs.build-packages.outputs.package_version }}.tgz
    - name: Store artifacts for UnityTests
      uses: actions/upload-artifact@v4
      with:
        name: UnityTests
        path: Tests/Tests.Unity
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  test-net-framework:
    name: Test .NET Framework
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Realm.Tests
      run: msbuild Tests/Realm.Tests -restore -p:Configuration=Release -p:TargetFramework=net461 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/net461/Realm.Tests.exe --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results .NET Framework
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-uwp:
    name: Test UWP
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Import test certificate
      shell: powershell
      run: |-
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        [IO.File]::WriteAllBytes("${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx", $pfx_cert_byte)
        certutil -f -p "${{ secrets.Pfx_Password }}" -importpfx my ${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.UWP
      run: msbuild Tests/Tests.UWP -restore -p:Configuration=Release -p:AppxBundle=Always -p:PackageCertificateKeyFile=${{ github.workspace }}\Tests\Tests.UWP\Tests.UWP_TemporaryKey.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Password }} -p:UseDotNetNativeToolchain=false -p:AppxBundlePlatforms=x64 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      shell: powershell
      run: ./Tests/Tests.UWP/RunTests.ps1
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results UWP
        path: ${{ env.TEST_RESULTS }}
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-net-core:
    name: Test ${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    strategy:
      matrix:
        framework:
        - net6.0
        os:
        - runner: windows-latest
          runtime: win-x64
        - runner: ubuntu-latest
          runtime: linux-x64
        - runner: macos-14
          runtime: osx-x64
        include:
        - framework: net8.0
          os:
            runner: macos-14
            runtime: osx-arm64
      fail-fast: false
    runs-on: ${{ matrix.os.runner }}
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Cleanup Workspace
      run: git clean -fdx
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Clear nuget cache
      if: ${{ matrix.os.runner == 'win81' }}
      run: dotnet nuget locals all --clear
    - name: Extract .NET version
      id: get-net-version
      shell: bash
      run: |2-
          NET_VERSION=$(echo '${{ matrix.framework }}.x' | sed 's/net//g')
          echo "version=$NET_VERSION" >> $GITHUB_OUTPUT
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: ${{ steps.get-net-version.outputs.version }}
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f ${{ matrix.framework }} -r ${{ matrix.os.runtime }} -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/${{ matrix.framework }}/${{ matrix.os.runtime }}/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      env:
        DOTNET_DbgEnableMiniDump: 1
        DOTNET_EnableCrashReport: 1
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Archive core dump
      if: ${{ failure() && runner.os != 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: crash-report-net-core-${{ runner.os }}-${{ runner.arch }}
        path: /tmp/coredump*
        retention-days: 30
        if-no-files-found: warn
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results ${{ matrix.framework }}, ${{ (matrix.os.runner == 'win81' && 'win81') || matrix.os.runtime }}
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-macos-xamarin:
    name: Test Xamarin.macOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.XamarinMac
      run: msbuild Tests/Tests.XamarinMac -restore -p:Configuration=Release -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.XamarinMac/bin/Release/Tests.XamarinMac.app/Contents/MacOS/Tests.XamarinMac --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.macOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-macos-maui:
    name: Test Maui.MacCatalyst
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-14
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
      with:
        xcode-version: latest-stable
    - name: Build Tests/Tests.Maui
      run: dotnet build Tests/Tests.Maui -c Release -f net8.0-maccatalyst -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run the tests
      run: Tests/Tests.Maui/bin/Release/net8.0-maccatalyst/maccatalyst-x64/Tests.Maui.app/Contents/MacOS/Tests.Maui --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
    - name: Transform Results
      run: xsltproc --output TestResults.xml_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt TestResults.xml
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.MacCatalyst
        path: TestResults.xml_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-ios-xamarin:
    name: Test Xamarin.iOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.iOS
      run: msbuild Tests/Tests.iOS -restore -p:Configuration=Release -p:Platform=iPhoneSimulator -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.iOS/bin/iPhoneSimulator/Release/Tests.iOS.app
        bundleId: io.realm.dotnettests
        iphoneToSimulate: iPhone-8
        arguments: '--headless --result=${{ github.workspace }}/TestResults.xml --labels=All '
        os: iOS
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.iOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-ios-maui:
    name: Test Maui.iOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-14
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
      with:
        xcode-version: latest-stable
    - name: Build Tests/Tests.Maui
      run: dotnet build Tests/Tests.Maui -c Release -f net8.0-ios -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.Maui/bin/Release/net8.0-ios/iossimulator-arm64/Tests.Maui.app
        bundleId: io.realm.mauitests
        iphoneToSimulate: iPhone-15
        arguments: --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
        os: iOS
    - name: Transform Results
      run: xsltproc --output TestResults.xml_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt TestResults.xml
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.iOS
        path: TestResults.xml_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-tvos:
    name: Test Xamarin.tvOS
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: macos-12
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.XamarinTVOS
      run: msbuild Tests/Tests.XamarinTVOS -restore -p:Configuration=Release -p:Platform=iPhoneSimulator -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Run on Simulator
      uses: realm/ci-actions/run-ios-simulator@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        appPath: Tests/Tests.XamarinTVOS/bin/iPhoneSimulator/Release/Tests.XamarinTVOS.app
        bundleId: io.realm.Tests-XamarinTVOS
        iphoneToSimulate: Apple-TV-1080p
        arguments: --headless --result=${{ github.workspace }}/TestResults.xml --labels=All
        os: tvOS
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.tvOS
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-android-xamarin:
    name: Test Xamarin.Android
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Setup JDK
      uses: actions/setup-java@2e74cbce18569d23ca8b812590dbb83f13ac7c5a
      with:
        distribution: microsoft
        java-version: 17
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      if: ${{ runner.os == 'Windows' }}
      uses: microsoft/setup-msbuild@70b70342ae97ca98d5eaad06cafd26d30f9592a9
    - name: Build Tests/Tests.Android
      run: msbuild Tests/Tests.Android -t:SignAndroidPackage -restore -p:Configuration=Release -p:AndroidUseSharedRuntime=False -p:EmbedAssembliesIntoApk=True -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Run the tests
      id: run_tests
      uses: ./.github/actions/run-android-device-farm-test
      with:
        apk-path: ${{ github.workspace }}/Tests/Tests.Android/bin/Release/io.realm.xamarintests-Signed.apk
        app-id: io.realm.xamarintests
        project-arn: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
        device-pool-arn: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Xamarin.Android
        path: ${{ steps.run_tests.outputs.test-results-path }}
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-android-maui:
    name: Test Maui.Android
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Setup JDK
      uses: actions/setup-java@2e74cbce18569d23ca8b812590dbb83f13ac7c5a
      with:
        distribution: microsoft
        java-version: 17
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Setup Maui workload
      run: dotnet workload install maui
    - name: Publish Tests/Tests.Maui
      run: dotnet publish Tests/Tests.Maui -c Release -f net8.0-android -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Tests.Maui/bin/Release/net8.0-android/null/Tests.Maui' >> $GITHUB_OUTPUT
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Run the tests
      id: run_tests
      uses: ./.github/actions/run-android-device-farm-test
      with:
        apk-path: ${{ github.workspace }}/Tests/Tests.Maui/bin/Release/net8.0-android/publish/io.realm.mauitests-Signed.apk
        app-id: io.realm.mauitests
        project-arn: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
        device-pool-arn: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
    - name: Transform Results
      run: xsltproc --output ${{ steps.run_tests.outputs.test-results-path }}_transformed.xml Tests/Realm.Tests/EmbeddedResources/nunit3-junit.xslt ${{ steps.run_tests.outputs.test-results-path }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Maui.Android
        path: ${{ steps.run_tests.outputs.test-results-path }}_transformed.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-woven-classes:
    name: Test Woven Classes
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-packages
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f net8.0 -r win-x64 -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:RealmTestsStandaloneExe=true -p:TestWeavedClasses=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/net8.0/win-x64/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Woven Classes
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-source-generation:
    name: Test Source Generation
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 6.0.x
    - name: Publish Tests/SourceGenerators/Realm.SourceGenerator.Tests
      run: dotnet publish Tests/SourceGenerators/Realm.SourceGenerator.Tests -c Release -f net6.0 -r win-x64  --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/SourceGenerators/Realm.SourceGenerator.Tests/bin/Release/net6.0/win-x64/Realm.SourceGenerator.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Source Generation
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-weaver:
    name: Test Weaver
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    strategy:
      matrix:
        os:
        - runner: windows-latest
          runtime: win-x64
        - runner: ubuntu-latest
          runtime: linux-x64
        - runner: macos-14
          runtime: osx-arm64
      fail-fast: false
    runs-on: ${{ matrix.os.runner }}
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 6.0.x
    - name: Publish Tests/Weaver/Realm.Fody.Tests
      run: dotnet publish Tests/Weaver/Realm.Fody.Tests -c Release -f net6.0 -r ${{ matrix.os.runtime }}  --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Weaver/Realm.Fody.Tests/bin/Release/net6.0/${{ matrix.os.runtime }}/Realm.Fody.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      run: ${{ steps.dotnet-publish.outputs.executable-path }} --result=TestResults.xml --labels=After
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Weaver
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  test-code-coverage:
    name: Test Code Coverage
    if: always() && !cancelled() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    needs:
    - build-wrappers
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register problem matchers
      run: |-
        echo "::add-matcher::.github/problem-matchers/csc.json"
        echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch wrappers for linux-x86_64
      uses: actions/download-artifact@v4
      with:
        name: wrappers-linux-x86_64
        path: wrappers/build
    - name: Setup Coverlet & Report Generator
      run: |-
        dotnet tool install coverlet.console --tool-path tools
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
        echo "${{ github.workspace }}/tools" >> $GITHUB_PATH
    - name: Publish Tests/Realm.Tests
      run: dotnet publish Tests/Realm.Tests -c Release -f net8.0 -r linux-x64 -p:RealmTestsStandaloneExe=true --no-self-contained
    - name: Output executable path
      id: dotnet-publish
      shell: bash
      run: echo 'executable-path=./Tests/Realm.Tests/bin/Release/net8.0/linux-x64/Realm.Tests' >> $GITHUB_OUTPUT
    - name: Run the tests
      env:
        DOTNET_DbgEnableMiniDump: 1
        DOTNET_EnableCrashReport: 1
      run: ./tools/coverlet ./Tests/Realm.Tests/bin/Release/net8.0/linux-x64 -t ${{ steps.dotnet-publish.outputs.executable-path }} -a '--result=TestResults.xml --labels=After' -f lcov -o ./report.lcov --exclude '[Realm.Tests]*' --exclude '[Realm.Fody]*'
    - name: Archive core dump
      if: ${{ failure() && runner.os != 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: crash-report-net-core-${{ runner.os }}-${{ runner.arch }}
        path: /tmp/coredump*
        retention-days: 30
        if-no-files-found: warn
    - name: Publish Coverage
      id: publish-coveralls
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        file: ./report.lcov
        git-commit: ${{ github.event.pull_request.head.sha }}
        compare-sha: ${{ github.event.pull_request.base.sha }}
    - name: Output Coveralls response
      run: echo ${{ steps.publish-coveralls.outputs.coveralls-api-result }}
    - name: Publish Unit Test Results
      if: always()
      uses: dorny/test-reporter@31a54ee7ebcacc03a09ea97a7e5465a47b84aea5
      with:
        name: Results Code Coverage
        path: TestResults.xml
        reporter: java-junit
        list-suites: failed
        path-replace-backslashes: true
        fail-on-error: true
  verify-namespaces:
    name: Verify Namespaces
    needs:
    - build-packages
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Fetch Realm
      uses: actions/download-artifact@v4
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityUtils
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityUtils.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.UnityWeaver
      uses: actions/download-artifact@v4
      with:
        name: Realm.UnityWeaver.${{ needs.build-packages.outputs.package_version }}
        path: ${{ github.workspace }}/Realm/packages/
    - run: dotnet tool install ilspycmd -g --version 8.0.0.7345
    - name: Verify Namespaces
      shell: pwsh
      run: |-
        $isFailure = $false
        Get-ChildItem ./Realm/packages -Filter *.nupkg | Foreach-Object {
          $targetPath = Join-Path ./Realm/packages $_.BaseName
          Expand-Archive $_.FullName -DestinationPath $targetPath

          Get-ChildItem $targetPath -Filter *.dll -Recurse | ForEach-Object {
            if (-not ($_.FullName -match "runtimes")) {
              $ilspyOutput = ilspycmd $_.FullName

              $parentDll = $_.FullName

              $ilspyOutput | ForEach-Object {
                if ($_ -match "namespace.*Realm(\.|$)") {
                  Write-Output "::error file=$parentDll::Realm present in namespace - $($_)"
                  Set-Variable "isFailure" -Value $true
                }
              }
            }
          }
        }

        if ($isFailure) {
          exit 1
        }
  lint:
    name: Verify TODOs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: nirinchev/verify-todo@ffa352ac028b4cdc8bc626471d33aa341b3ab7c9
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        include: '**/*.+(cs|cpp|hpp)'
        exclude: wrappers/realm-core/**
        pattern: \\WR[A-Z]+-[0-9]+
---
# Do not modify!
# This file was generated from a template using https://github.com/StefMa/pkl-gha

name: Publish Prerelease
'on':
  workflow_dispatch: {}
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  main:
    name: Publish package to S3
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Download all artifacts
      uses: dawidd6/action-download-artifact@09f2f74827fd3a8607589e5ad7f9398816f540fe
      with:
        workflow: pr.yml
        commit: ${{ github.sha }}
        path: Realm/packages/
        workflow_conclusion: completed
    - name: Read version
      id: get-version
      shell: bash
      run: |-
        cd Realm/packages
        pkgVersion=$(find . -type f -regex ".*Realm.[1-9].*.nupkg" -exec basename {} \; | sed -n 's/Realm\.\(.*\)\.nupkg$/\1/p')
        echo "package_version=$pkgVersion" >> $GITHUB_OUTPUT
    - uses: actions/setup-dotnet@5d1464d5da459f3d7085106d52e499f4dc5d0f59
      with:
        dotnet-version: 8.0.x
    - name: Install sleet
      run: dotnet tool install -g sleet
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-access-key-id: ${{ secrets.NUGET_S3_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.NUGET_S3_SECRET_KEY }}
        aws-region: us-east-1
    - name: NuGet Publish Realm.${{ steps.get-version.outputs.package_version }}
      run: sleet push ${{ github.workspace }}/Realm/packages/Realm.${{ steps.get-version.outputs.package_version }}/Realm.${{ steps.get-version.outputs.package_version }}.nupkg --config ${{ github.workspace }}/.github/sleet.json --source NugetSource
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: 16.x
        registry-url: https://registry.npmjs.org
    - name: NPM publish io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish ${{ github.workspace }}/Realm/packages/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz --tag alpha
---
# Do not modify!
# This file was generated from a template using https://github.com/StefMa/pkl-gha

name: Publish Release
'on':
  workflow_dispatch: {}
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  main:
    name: Publish Release
    runs-on: windows-latest
    environment:
      name: Production
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Download all artifacts
      uses: dawidd6/action-download-artifact@09f2f74827fd3a8607589e5ad7f9398816f540fe
      with:
        workflow: pr.yml
        commit: ${{ github.sha }}
        path: Realm/packages/
        workflow_conclusion: completed
    - name: Read version
      id: get-version
      shell: bash
      run: |-
        cd Realm/packages
        pkgVersion=$(find . -type f -regex ".*Realm.[1-9].*.nupkg" -exec basename {} \; | sed -n 's/Realm\.\(.*\)\.nupkg$/\1/p')
        echo "package_version=$pkgVersion" >> $GITHUB_OUTPUT
    - name: NuGet Publish Realm.${{ steps.get-version.outputs.package_version }}
      run: dotnet nuget push ${{ github.workspace }}/Realm/packages/Realm.${{ steps.get-version.outputs.package_version }}/Realm.${{ steps.get-version.outputs.package_version }}.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
    - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version: 16.x
        registry-url: https://registry.npmjs.org
    - name: NPM publish io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish ${{ github.workspace }}/Realm/packages/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz --tag latest
    - name: Find Release PR
      id: find-pull-request
      uses: juliangruber/find-pull-request-action@48b6133aa6c826f267ebd33aa2d29470f9d9e7d0
      with:
        branch: ${{ github.ref }}
    - name: Merge Pull Request
      uses: juliangruber/merge-pull-request-action@9234b8714dda9a08f3d1df5b2a6a3abd7b695353
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.find-pull-request.outputs.number }}
        method: squash
    - name: Publish Github Release
      uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5
      with:
        artifacts: Realm/packages/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz/io.realm.unity-${{ steps.get-version.outputs.package_version }}.tgz
        bodyFile: Realm/packages/ExtractedChangelog/ExtractedChangelog.md
        name: ${{ steps.get-version.outputs.package_version }}
        commit: community
        tag: ${{ steps.get-version.outputs.package_version }}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
    - name: Update Changelog
      shell: bash
      run: |-
        echo "## vNext (TBD)

        ### Enhancements
        * None

        ### Fixed
        * None

        ### Compatibility
        * Realm Studio: 15.0.0 or later.

        ### Internal
        * Using Core x.y.z.
        " | cat - CHANGELOG.md >> temp
        mv temp CHANGELOG.md
    - name: Create vNext PR
      id: vnext-pr
      uses: peter-evans/create-pull-request@6d6857d36972b65feb161a90e484f2984215f83e
      with:
        branch: prepare-vnext
        title: Prepare for vNext
        body: Update Changelog for vNext
        delete-branch: true
        base: community
        commit-message: Prepare for vNext
        labels: no-jira-ticket
    - name: Merge Pull Request
      uses: juliangruber/merge-pull-request-action@9234b8714dda9a08f3d1df5b2a6a3abd7b695353
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.vnext-pr.outputs.pull-request-number }}
        method: squash
    - name: 'Post to #realm-releases'
      uses: realm/ci-actions/release-to-slack@6418e15ed9bbdb19b7d456a347e5623779f95cdf
      with:
        changelog: Realm/packages/ExtractedChangelog/ExtractedChangelog.md
        sdk: .NET
        webhook-url: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
        version: ${{ steps.get-version.outputs.package_version }}
  deploy-docs:
    name: Deploy Docs
    needs:
    - main
    permissions:
      contents: read
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy-pages.outputs.page_url }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Download all artifacts
      uses: dawidd6/action-download-artifact@09f2f74827fd3a8607589e5ad7f9398816f540fe
      with:
        workflow: pr.yml
        commit: ${{ github.sha }}
        path: Realm/packages/
        workflow_conclusion: completed
    - name: Expand docs
      shell: pwsh
      run: Expand-Archive -Path Realm/packages/Docs.zip/Docs.zip -DestinationPath Realm/packages
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ github.workspace }}/Realm/packages/_site
    - name: Deploy pages
      id: deploy-pages
      uses: actions/deploy-pages@v4
---
# Do not modify!
# This file was generated from a template using https://github.com/StefMa/pkl-gha

name: wrappers
'on':
  workflow_call: {}
env:
  REALM_DISABLE_ANALYTICS: true
  DOTNET_NOLOGO: true
jobs:
  check-cache:
    name: Check Cache
    strategy:
      matrix:
        os:
        - ubuntu
        - windows
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    env:
      CACHE_SKIP_SAVE: true
    outputs:
      wrappers-macos: ${{ steps.check-cache-macos.outputs.cache-hit }}
      wrappers-catalyst: ${{ steps.check-cache-catalyst.outputs.cache-hit }}
      wrappers-linux-x86_64: ${{ steps.check-cache-linux-x86_64.outputs.cache-hit }}
      wrappers-linux-armhf: ${{ steps.check-cache-linux-armhf.outputs.cache-hit }}
      wrappers-linux-aarch64: ${{ steps.check-cache-linux-aarch64.outputs.cache-hit }}
      wrappers-android-armeabi-v7a: ${{ steps.check-cache-android-armeabi-v7a.outputs.cache-hit }}
      wrappers-android-arm64-v8a: ${{ steps.check-cache-android-arm64-v8a.outputs.cache-hit }}
      wrappers-android-x86: ${{ steps.check-cache-android-x86.outputs.cache-hit }}
      wrappers-android-x86_64: ${{ steps.check-cache-android-x86_64.outputs.cache-hit }}
      wrappers-windows-Win32: ${{ steps.check-cache-windows-Win32.outputs.cache-hit }}
      wrappers-windows-x64: ${{ steps.check-cache-windows-x64.outputs.cache-hit }}
      wrappers-windows-ARM64: ${{ steps.check-cache-windows-ARM64.outputs.cache-hit }}
      wrappers-windows-uwp-Win32: ${{ steps.check-cache-windows-uwp-Win32.outputs.cache-hit }}
      wrappers-windows-uwp-x64: ${{ steps.check-cache-windows-uwp-x64.outputs.cache-hit }}
      wrappers-windows-uwp-ARM: ${{ steps.check-cache-windows-uwp-ARM.outputs.cache-hit }}
      wrappers-windows-uwp-ARM64: ${{ steps.check-cache-windows-uwp-ARM64.outputs.cache-hit }}
      wrappers-iOS-Device: ${{ steps.check-cache-iOS-Device.outputs.cache-hit }}
      wrappers-iOS-Simulator: ${{ steps.check-cache-iOS-Simulator.outputs.cache-hit }}
      wrappers-tvOS-Device: ${{ steps.check-cache-tvOS-Device.outputs.cache-hit }}
      wrappers-tvOS-Simulator: ${{ steps.check-cache-tvOS-Simulator.outputs.cache-hit }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for macos
      id: check-cache-macos
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-macos-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-macos
      if: matrix.os == 'ubuntu' && steps.check-cache-macos.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-macos
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for catalyst
      id: check-cache-catalyst
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-catalyst-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-catalyst
      if: matrix.os == 'ubuntu' && steps.check-cache-catalyst.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-catalyst
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for linux-x86_64
      id: check-cache-linux-x86_64
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-x86_64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-linux-x86_64
      if: matrix.os == 'ubuntu' && steps.check-cache-linux-x86_64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-linux-x86_64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for linux-armhf
      id: check-cache-linux-armhf
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-armhf-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-linux-armhf
      if: matrix.os == 'ubuntu' && steps.check-cache-linux-armhf.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-linux-armhf
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for linux-aarch64
      id: check-cache-linux-aarch64
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-aarch64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-linux-aarch64
      if: matrix.os == 'ubuntu' && steps.check-cache-linux-aarch64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-linux-aarch64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for android-armeabi-v7a
      id: check-cache-android-armeabi-v7a
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-android-armeabi-v7a-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-android-armeabi-v7a
      if: matrix.os == 'ubuntu' && steps.check-cache-android-armeabi-v7a.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-android-armeabi-v7a
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for android-arm64-v8a
      id: check-cache-android-arm64-v8a
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-android-arm64-v8a-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-android-arm64-v8a
      if: matrix.os == 'ubuntu' && steps.check-cache-android-arm64-v8a.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-android-arm64-v8a
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for android-x86
      id: check-cache-android-x86
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-android-x86-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-android-x86
      if: matrix.os == 'ubuntu' && steps.check-cache-android-x86.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-android-x86
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for android-x86_64
      id: check-cache-android-x86_64
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-android-x86_64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-android-x86_64
      if: matrix.os == 'ubuntu' && steps.check-cache-android-x86_64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-android-x86_64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for windows-Win32
      id: check-cache-windows-Win32
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-Win32-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-Win32
      if: matrix.os == 'windows' && steps.check-cache-windows-Win32.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-Win32
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-x64
      id: check-cache-windows-x64
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-x64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-x64
      if: matrix.os == 'windows' && steps.check-cache-windows-x64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-x64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-ARM64
      id: check-cache-windows-ARM64
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-ARM64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-ARM64
      if: matrix.os == 'windows' && steps.check-cache-windows-ARM64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-ARM64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-uwp-Win32
      id: check-cache-windows-uwp-Win32
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-Win32-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-uwp-Win32
      if: matrix.os == 'windows' && steps.check-cache-windows-uwp-Win32.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-uwp-Win32
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-uwp-x64
      id: check-cache-windows-uwp-x64
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-x64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-uwp-x64
      if: matrix.os == 'windows' && steps.check-cache-windows-uwp-x64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-uwp-x64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-uwp-ARM
      id: check-cache-windows-uwp-ARM
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-ARM-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-uwp-ARM
      if: matrix.os == 'windows' && steps.check-cache-windows-uwp-ARM.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for windows-uwp-ARM64
      id: check-cache-windows-uwp-ARM64
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-ARM64-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-windows-uwp-ARM64
      if: matrix.os == 'windows' && steps.check-cache-windows-uwp-ARM64.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-uwp-ARM64
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'windows'
      run: git clean -fdx
    - name: Check Cache for iOS-Device
      id: check-cache-iOS-Device
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-iOS-Device-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-iOS-Device
      if: matrix.os == 'ubuntu' && steps.check-cache-iOS-Device.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-iOS-Device
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for iOS-Simulator
      id: check-cache-iOS-Simulator
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-iOS-Simulator-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-iOS-Simulator
      if: matrix.os == 'ubuntu' && steps.check-cache-iOS-Simulator.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-iOS-Simulator
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for tvOS-Device
      id: check-cache-tvOS-Device
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-tvOS-Device-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-tvOS-Device
      if: matrix.os == 'ubuntu' && steps.check-cache-tvOS-Device.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-tvOS-Device
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
    - name: Check Cache for tvOS-Simulator
      id: check-cache-tvOS-Simulator
      if: matrix.os == 'ubuntu'
      uses: actions/cache/restore@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-tvOS-Simulator-Release-${{hashFiles('./wrappers/**')}}
    - name: Store artifacts for wrappers-tvOS-Simulator
      if: matrix.os == 'ubuntu' && steps.check-cache-tvOS-Simulator.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-tvOS-Simulator
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
    - if: matrix.os == 'ubuntu'
      run: git clean -fdx
  macos:
    name: MacOS
    if: needs.check-cache.outputs.wrappers-macos != 'true'
    needs:
    - check-cache
    runs-on: macos-12
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for macos
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-macos-Release-${{hashFiles('./wrappers/**')}}
    - name: Setup Cmake
      if: steps.check-cache.outputs.cache-hit != 'true'
      uses: jwlawson/actions-setup-cmake@802fa1a2c4e212495c05bf94dba2704a92a472be
      with:
        cmake-version: 3.29.0
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: ./wrappers/build-macos.sh --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION='ON'
    - name: Store artifacts for wrappers-macos
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-macos
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  catalyst:
    name: Catalyst
    if: needs.check-cache.outputs.wrappers-catalyst != 'true'
    needs:
    - check-cache
    runs-on: macos-12
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for catalyst
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-catalyst-Release-${{hashFiles('./wrappers/**')}}
    - name: Setup Cmake
      if: steps.check-cache.outputs.cache-hit != 'true'
      uses: jwlawson/actions-setup-cmake@802fa1a2c4e212495c05bf94dba2704a92a472be
      with:
        cmake-version: 3.29.0
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: pwsh ./wrappers/build-apple-platform.ps1 Catalyst -Configuration Release -EnableLTO
    - name: Store artifacts for wrappers-catalyst
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-catalyst
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  apple-platform:
    name: Apple Platform
    if: needs.check-cache.outputs.wrappers-iOS-Device != 'true' || needs.check-cache.outputs.wrappers-iOS-Simulator != 'true' || needs.check-cache.outputs.wrappers-tvOS-Device != 'true' || needs.check-cache.outputs.wrappers-tvOS-Simulator != 'true'
    needs:
    - check-cache
    strategy:
      matrix:
        platform:
        - iOS
        - tvOS
        target:
        - Device
        - Simulator
      fail-fast: false
    runs-on: macos-12
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for ${{ matrix.platform }}-${{ matrix.target }}
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-${{ matrix.platform }}-${{ matrix.target }}-Release-${{hashFiles('./wrappers/**')}}
    - name: Setup Xcode
      if: steps.check-cache.outputs.cache-hit != 'true'
      uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
      with:
        xcode-version: '14'
    - name: Setup Cmake
      if: steps.check-cache.outputs.cache-hit != 'true'
      uses: jwlawson/actions-setup-cmake@802fa1a2c4e212495c05bf94dba2704a92a472be
      with:
        cmake-version: 3.29.0
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: 'pwsh ./wrappers/build-apple-platform.ps1 ${{ matrix.platform }} -Targets ${{ matrix.target }} -Configuration Release '
    - name: Store artifacts for wrappers-${{ matrix.platform }}-${{ matrix.target }}
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-${{ matrix.platform }}-${{ matrix.target }}
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  linux:
    name: Linux
    if: needs.check-cache.outputs.wrappers-linux-x86_64 != 'true' || needs.check-cache.outputs.wrappers-linux-armhf != 'true' || needs.check-cache.outputs.wrappers-linux-aarch64 != 'true'
    needs:
    - check-cache
    strategy:
      matrix:
        arch:
        - x86_64
        - armhf
        - aarch64
      fail-fast: false
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for linux-${{ matrix.arch }}
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-linux-${{ matrix.arch }}-Release-${{hashFiles('./wrappers/**')}}
    - name: Install Ninja
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: sudo apt install ninja-build
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: ./wrappers/build-linux.sh -a=${{ matrix.arch }} --configuration=Release -DCMAKE_INTERPROCEDURAL_OPTIMIZATION='ON'
    - name: Store artifacts for wrappers-linux-${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-linux-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  android:
    name: Android
    if: needs.check-cache.outputs.wrappers-android-armeabi-v7a != 'true' || needs.check-cache.outputs.wrappers-android-arm64-v8a != 'true' || needs.check-cache.outputs.wrappers-android-x86 != 'true' || needs.check-cache.outputs.wrappers-android-x86_64 != 'true'
    needs:
    - check-cache
    strategy:
      matrix:
        arch:
        - armeabi-v7a
        - arm64-v8a
        - x86
        - x86_64
      fail-fast: false
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for android-${{ matrix.arch }}
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-android-${{ matrix.arch }}-Release-${{hashFiles('./wrappers/**')}}
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: './wrappers/build-android.sh --ARCH=${{ matrix.arch }} --configuration=Release '
    - name: Store artifacts for wrappers-android-${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-android-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  windows:
    name: Windows
    if: needs.check-cache.outputs.wrappers-windows-Win32 != 'true' || needs.check-cache.outputs.wrappers-windows-x64 != 'true' || needs.check-cache.outputs.wrappers-windows-ARM64 != 'true'
    needs:
    - check-cache
    strategy:
      matrix:
        arch:
        - Win32
        - x64
        - ARM64
      fail-fast: false
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for windows-${{ matrix.arch }}
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-${{ matrix.arch }}-Release-${{hashFiles('./wrappers/**')}}
    - name: Setup MSVC
      if: steps.check-cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: Start-Process "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" -ArgumentList 'modify --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" --quiet --add Microsoft.VisualStudio.Component.VC.14.35.17.5.${{ startswith(matrix.arch, 'ARM') && matrix.arch || 'x86.x64' }}' -Wait -PassThru
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: pwsh ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -ExtraCMakeArgs "-T v143,version=14.35" -Configuration Release -EnableLTO
    - name: Store artifacts for wrappers-windows-${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
  uwp:
    name: UWP
    if: needs.check-cache.outputs.wrappers-windows-uwp-Win32 != 'true' || needs.check-cache.outputs.wrappers-windows-uwp-x64 != 'true' || needs.check-cache.outputs.wrappers-windows-uwp-ARM != 'true' || needs.check-cache.outputs.wrappers-windows-uwp-ARM64 != 'true'
    needs:
    - check-cache
    strategy:
      matrix:
        arch:
        - Win32
        - x64
        - ARM
        - ARM64
      fail-fast: false
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Check Cache for windows-uwp-${{ matrix.arch }}
      id: check-cache
      uses: actions/cache@v4
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-uwp-${{ matrix.arch }}-Release-${{hashFiles('./wrappers/**')}}
    - name: Setup MSVC
      if: steps.check-cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: Start-Process "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" -ArgumentList 'modify --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" --quiet --add Microsoft.VisualStudio.Component.VC.14.35.17.5.${{ startswith(matrix.arch, 'ARM') && matrix.arch || 'x86.x64' }}' -Wait -PassThru
    - name: Build Wrappers
      if: steps.check-cache.outputs.cache-hit != 'true'
      run: pwsh ./wrappers/build.ps1 WindowsStore -Platforms ${{ matrix.arch }} -ExtraCMakeArgs "-T v143,version=14.35" -Configuration Release -EnableLTO
    - name: Store artifacts for wrappers-windows-uwp-${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-windows-uwp-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
        if-no-files-found: error
