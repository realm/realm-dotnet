<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="4239" failures="2" errors="0" time="165.872">
  <testsuite name="packages/jest-config/src/__tests__/normalize.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:45" time="0.798" tests="118">
    <testcase classname="" name="picks a name based on the rootDir" time="0.006">
    </testcase>
    <testcase classname="" name="keeps custom project name based on the projects rootDir" time="0.001">
    </testcase>
    <testcase classname="" name="keeps custom names based on the rootDir" time="0.001">
    </testcase>
    <testcase classname="" name="minimal config is stable across runs" time="0.003">
    </testcase>
    <testcase classname="" name="sets coverageReporters correctly when argv.json is set" time="0.001">
    </testcase>
    <testcase classname="rootDir" name="throws if the options is missing a rootDir property" time="0.002">
    </testcase>
    <testcase classname="automock" name="falsy automock is not overwritten" time="0.001">
    </testcase>
    <testcase classname="collectCoverageOnlyFrom" name="normalizes all paths relative to rootDir" time="0.001">
    </testcase>
    <testcase classname="collectCoverageOnlyFrom" name="does not change absolute paths" time="0.001">
    </testcase>
    <testcase classname="collectCoverageOnlyFrom" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="collectCoverageFrom" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="findRelatedTests" name="it generates --coverageCoverageFrom patterns when needed" time="0.001">
    </testcase>
    <testcase classname="roots" name="normalizes all paths relative to rootDir" time="0.001">
    </testcase>
    <testcase classname="roots" name="does not change absolute paths" time="0.001">
    </testcase>
    <testcase classname="roots" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="transform" name="normalizes the path" time="0.001">
    </testcase>
    <testcase classname="transform" name="pulls in config if it&apos;s passed as an array, and defaults to empty object" time="0.001">
    </testcase>
    <testcase classname="haste" name="normalizes the path for hasteImplModulePath" time="0.001">
    </testcase>
    <testcase classname="setupFilesAfterEnv" name="normalizes the path according to rootDir" time="0.001">
    </testcase>
    <testcase classname="setupFilesAfterEnv" name="does not change absolute paths" time="0.001">
    </testcase>
    <testcase classname="setupFilesAfterEnv" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="setupTestFrameworkScriptFile" name="logs a deprecation warning when `setupTestFrameworkScriptFile` is used" time="0.001">
    </testcase>
    <testcase classname="setupTestFrameworkScriptFile" name="logs an error when `setupTestFrameworkScriptFile` and `setupFilesAfterEnv` are used" time="0.001">
    </testcase>
    <testcase classname="coveragePathIgnorePatterns" name="does not normalize paths relative to rootDir" time="0.001">
    </testcase>
    <testcase classname="coveragePathIgnorePatterns" name="does not normalize trailing slashes" time="0.001">
    </testcase>
    <testcase classname="coveragePathIgnorePatterns" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="watchPathIgnorePatterns" name="does not normalize paths relative to rootDir" time="0.005">
    </testcase>
    <testcase classname="watchPathIgnorePatterns" name="does not normalize trailing slashes" time="0.001">
    </testcase>
    <testcase classname="watchPathIgnorePatterns" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="testPathIgnorePatterns" name="does not normalize paths relative to rootDir" time="0.001">
    </testcase>
    <testcase classname="testPathIgnorePatterns" name="does not normalize trailing slashes" time="0.001">
    </testcase>
    <testcase classname="testPathIgnorePatterns" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="modulePathIgnorePatterns" name="does not normalize paths relative to rootDir" time="0.001">
    </testcase>
    <testcase classname="modulePathIgnorePatterns" name="does not normalize trailing slashes" time="0.001">
    </testcase>
    <testcase classname="modulePathIgnorePatterns" name="substitutes &lt;rootDir&gt; tokens" time="0.001">
    </testcase>
    <testcase classname="testRunner" name="defaults to Circus" time="0.001">
    </testcase>
    <testcase classname="testRunner" name="resolves jasmine" time="0.001">
    </testcase>
    <testcase classname="testRunner" name="is overwritten by argv" time="0">
    </testcase>
    <testcase classname="coverageDirectory" name="defaults to &lt;rootDir&gt;/coverage" time="0">
    </testcase>
    <testcase classname="testEnvironment" name="resolves to an environment and prefers jest-environment-`name`" time="0">
    </testcase>
    <testcase classname="testEnvironment" name="throws on invalid environment names" time="0.001">
    </testcase>
    <testcase classname="testEnvironment" name="works with rootDir" time="0.001">
    </testcase>
    <testcase classname="babel-jest" name="correctly identifies and uses babel-jest" time="0.001">
    </testcase>
    <testcase classname="babel-jest" name="uses babel-jest if babel-jest is explicitly specified in a custom transform options" time="0.001">
    </testcase>
    <testcase classname="Upgrade help" name="logs a warning when `scriptPreprocessor` and/or `preprocessorIgnorePatterns` are used" time="0.002">
    </testcase>
    <testcase classname="testRegex" name="testRegex empty string is mapped to empty array" time="0.003">
    </testcase>
    <testcase classname="testRegex" name="testRegex string is mapped to an array" time="0">
    </testcase>
    <testcase classname="testRegex" name="testRegex array is preserved" time="0">
    </testcase>
    <testcase classname="testMatch" name="testMatch default not applied if testRegex is set" time="0.001">
    </testcase>
    <testcase classname="testMatch" name="testRegex default not applied if testMatch is set" time="0.001">
    </testcase>
    <testcase classname="testMatch" name="throws if testRegex and testMatch are both specified" time="0.001">
    </testcase>
    <testcase classname="testMatch" name="normalizes testMatch" time="0">
    </testcase>
    <testcase classname="moduleDirectories" name="defaults to node_modules" time="0.008">
    </testcase>
    <testcase classname="moduleDirectories" name="normalizes moduleDirectories" time="0.001">
    </testcase>
    <testcase classname="preset" name="throws when preset not found" time="0.001">
    </testcase>
    <testcase classname="preset" name="throws when module was found but no &quot;jest-preset.js&quot; or &quot;jest-preset.json&quot; files" time="0.001">
    </testcase>
    <testcase classname="preset" name="throws when a dependency is missing in the preset" time="0.044">
    </testcase>
    <testcase classname="preset" name="throws when preset is invalid" time="0.059">
    </testcase>
    <testcase classname="preset" name="throws when preset evaluation throws type error" time="0.001">
    </testcase>
    <testcase classname="preset" name="works with &quot;react-native&quot;" time="0.003">
    </testcase>
    <testcase classname="preset" name="searches for .json and .js preset files" time="0">
    </testcase>
    <testcase classname="preset" name="merges with options" time="0.001">
    </testcase>
    <testcase classname="preset" name="merges with options and moduleNameMapper preset is overridden by options" time="0.001">
    </testcase>
    <testcase classname="preset" name="merges with options and transform preset is overridden by options" time="0.001">
    </testcase>
    <testcase classname="preset" name="extracts setupFilesAfterEnv from preset" time="0.001">
    </testcase>
    <testcase classname="preset with globals" name="should merge the globals preset correctly" time="0.001">
    </testcase>
    <testcase classname="preset without setupFiles" name="should normalize setupFiles correctly" time="0.001">
    </testcase>
    <testcase classname="preset without setupFilesAfterEnv" name="should normalize setupFilesAfterEnv correctly" time="0.001">
    </testcase>
    <testcase classname="runner" name="defaults to `jest-runner`" time="0.001">
    </testcase>
    <testcase classname="runner" name="resolves to runners that do not have the prefix" time="0.001">
    </testcase>
    <testcase classname="runner" name="resolves to runners and prefers jest-runner-`name`" time="0.001">
    </testcase>
    <testcase classname="runner" name="throw error when a runner is not found" time="0.007">
    </testcase>
    <testcase classname="watchPlugins" name="defaults to undefined" time="0">
    </testcase>
    <testcase classname="watchPlugins" name="resolves to watch plugins and prefers jest-watch-`name`" time="0">
    </testcase>
    <testcase classname="watchPlugins" name="resolves watch plugins that do not have the prefix" time="0.001">
    </testcase>
    <testcase classname="watchPlugins" name="normalizes multiple watchPlugins" time="0.004">
    </testcase>
    <testcase classname="watchPlugins" name="throw error when a watch plugin is not found" time="0.001">
    </testcase>
    <testcase classname="testPathPattern" name="defaults to empty" time="0">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern" name="uses --testPathPattern if set" time="0">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern" name="ignores invalid regular expressions and logs a warning" time="0.001">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern" name="joins multiple --testPathPattern if set" time="0.001">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern posix" name="should not escape the pattern" time="0.001">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern win32" name="preserves any use of &quot;\&quot;" time="0.001">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern win32" name="replaces POSIX path separators" time="0.009">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern win32" name="replaces POSIX paths in multiple args" time="0.008">
    </testcase>
    <testcase classname="testPathPattern --testPathPattern win32" name="coerces all patterns to strings" time="0.002">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt;" name="uses &lt;regexForTestFiles&gt; if set" time="0.003">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt;" name="ignores invalid regular expressions and logs a warning" time="0.001">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt;" name="joins multiple &lt;regexForTestFiles&gt; if set" time="0.001">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt; posix" name="should not escape the pattern" time="0.001">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt; win32" name="preserves any use of &quot;\&quot;" time="0.015">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt; win32" name="replaces POSIX path separators" time="0.014">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt; win32" name="replaces POSIX paths in multiple args" time="0.011">
    </testcase>
    <testcase classname="testPathPattern &lt;regexForTestFiles&gt; win32" name="coerces all patterns to strings" time="0.004">
    </testcase>
    <testcase classname="testPathPattern" name="joins multiple --testPathPatterns and &lt;regexForTestFiles&gt;" time="0.003">
    </testcase>
    <testcase classname="testPathPattern" name="gives precedence to --all" time="0.001">
    </testcase>
    <testcase classname="moduleFileExtensions" name="defaults to something useful" time="0">
    </testcase>
    <testcase classname="moduleFileExtensions" name="throws if missing `js` but using jest-runner" time="0.001">
    </testcase>
    <testcase classname="moduleFileExtensions" name="does not throw if missing `js` with a custom runner" time="0.002">
    </testcase>
    <testcase classname="cwd" name="is set to process.cwd" time="0.001">
    </testcase>
    <testcase classname="cwd" name="is not lost if the config has its own cwd property" time="0.006">
    </testcase>
    <testcase classname="Defaults" name="should be accepted by normalize" time="0.003">
    </testcase>
    <testcase classname="displayName" name="should throw an error when displayName is is an empty object" time="0.001">
    </testcase>
    <testcase classname="displayName" name="should throw an error when displayName is missing color" time="0.001">
    </testcase>
    <testcase classname="displayName" name="should throw an error when displayName is missing name" time="0.001">
    </testcase>
    <testcase classname="displayName" name="should throw an error when displayName is using invalid values" time="0">
    </testcase>
    <testcase classname="displayName" name="generates a default color for the runner undefined" time="0.001">
    </testcase>
    <testcase classname="displayName" name="generates a default color for the runner jest-runner" time="0.002">
    </testcase>
    <testcase classname="displayName" name="generates a default color for the runner jest-runner-eslint" time="0.001">
    </testcase>
    <testcase classname="displayName" name="generates a default color for the runner jest-runner-tslint" time="0.001">
    </testcase>
    <testcase classname="displayName" name="generates a default color for the runner jest-runner-tsc" time="0.007">
    </testcase>
    <testcase classname="testTimeout" name="should return timeout value if defined" time="0.001">
    </testcase>
    <testcase classname="testTimeout" name="should throw an error if timeout is a negative number" time="0">
    </testcase>
    <testcase classname="extensionsToTreatAsEsm" name="should pass valid config through" time="0.002">
    </testcase>
    <testcase classname="extensionsToTreatAsEsm" name="should enforce leading dots" time="0.001">
    </testcase>
    <testcase classname="extensionsToTreatAsEsm" name="throws on .js" time="0.004">
    </testcase>
    <testcase classname="extensionsToTreatAsEsm" name="throws on .mjs" time="0">
    </testcase>
    <testcase classname="extensionsToTreatAsEsm" name="throws on .cjs" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-repl/src/__tests__/jest_repl.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:45" time="1.172" tests="1">
    <testcase classname="Repl cli" name="runs without errors" time="1.028">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/printSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:45" time="1.188" tests="71">
    <testcase classname="chalk" name="level 0" time="0.002">
    </testcase>
    <testcase classname="chalk" name="level 1" time="0.001">
    </testcase>
    <testcase classname="chalk" name="level 2" time="0.001">
    </testcase>
    <testcase classname="chalk" name="level 3" time="0">
    </testcase>
    <testcase classname="matcher error toMatchInlineSnapshot" name="Expected properties must be an object (non-null) without snapshot" time="0.001">
    </testcase>
    <testcase classname="matcher error toMatchInlineSnapshot" name="Expected properties must be an object (null) with snapshot" time="0.001">
    </testcase>
    <testcase classname="matcher error toMatchInlineSnapshot" name="Inline snapshot must be a string" time="0">
    </testcase>
    <testcase classname="matcher error toMatchInlineSnapshot" name="Snapshot matchers cannot be used with not" time="0">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot" name="Expected properties must be an object (non-null)" time="0.001">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot" name="Expected properties must be an object (null) with hint" time="0">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot" name="Expected properties must be an object (null) without hint" time="0.001">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot received value must be an object" name="(non-null)" time="0">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot received value must be an object" name="(null)" time="0.001">
    </testcase>
    <testcase classname="matcher error toMatchSnapshot" name="Snapshot state must be initialized" time="0">
    </testcase>
    <testcase classname="matcher error toThrowErrorMatchingInlineSnapshot" name="Inline snapshot must be a string" time="0.004">
    </testcase>
    <testcase classname="matcher error toThrowErrorMatchingInlineSnapshot" name="Snapshot state must be initialized" time="0.001">
    </testcase>
    <testcase classname="matcher error toThrowErrorMatchingSnapshot" name="Received value must be a function" time="0">
    </testcase>
    <testcase classname="matcher error toThrowErrorMatchingSnapshot" name="Snapshot matchers cannot be used with not" time="0.001">
    </testcase>
    <testcase classname="other error toThrowErrorMatchingSnapshot" name="Received function did not throw" time="0">
    </testcase>
    <testcase classname="pass false toMatchInlineSnapshot with properties equals false" name="with snapshot" time="0.008">
    </testcase>
    <testcase classname="pass false toMatchInlineSnapshot with properties equals false" name="without snapshot" time="0">
    </testcase>
    <testcase classname="pass false toMatchInlineSnapshot with properties" name="equals true" time="0.001">
    </testcase>
    <testcase classname="pass false toMatchSnapshot" name="New snapshot was not written (multi line)" time="0">
    </testcase>
    <testcase classname="pass false toMatchSnapshot" name="New snapshot was not written (single line)" time="0">
    </testcase>
    <testcase classname="pass false toMatchSnapshot with properties equals false" name="isLineDiffable false" time="0">
    </testcase>
    <testcase classname="pass false toMatchSnapshot with properties equals false" name="isLineDiffable true" time="0.001">
    </testcase>
    <testcase classname="pass false toMatchSnapshot with properties" name="equals true" time="0">
    </testcase>
    <testcase classname="pass false toThrowErrorMatchingInlineSnapshot" name="with snapshot" time="0.001">
    </testcase>
    <testcase classname="pass true toMatchSnapshot" name="without properties" time="0">
    </testcase>
    <testcase classname="printPropertiesAndReceived" name="omit missing properties" time="0.004">
    </testcase>
    <testcase classname="printSnapshotAndReceived backtick" name="single line expected and received" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived empty string" name="expected and received single line" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived empty string" name="received and expected multi line" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived escape" name="double quote marks in string" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived escape" name="backslash in multi line string" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived escape" name="backslash in single line string" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived escape" name="regexp" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived expand" name="false" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived expand" name="true" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived" name="fallback to line diff" time="0.021">
    </testcase>
    <testcase classname="printSnapshotAndReceived has no common after clean up chaff" name="array" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived has no common after clean up chaff" name="string single line" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH unquoted" name="both are less" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH unquoted" name="expected is more" time="0.003">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH unquoted" name="received is more" time="0.004">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH quoted" name="both are less" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH quoted" name="expected is more" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived MAX_DIFF_STRING_LENGTH quoted" name="received is more" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="asymmetric matcher" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="boolean" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="date" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="error" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="function" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable false" name="number" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable true" name="array" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable true" name="object" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable true" name="single line expected and received" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived isLineDiffable true" name="single line expected and multi line received" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived" name="multi line small change in one line and other is unchanged" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived" name="multi line small changes" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived" name="single line large changes" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived ignore indentation" name="markup delete" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived ignore indentation" name="markup fall back" time="0.002">
    </testcase>
    <testcase classname="printSnapshotAndReceived ignore indentation" name="markup insert" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived ignore indentation object" name="delete" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived ignore indentation object" name="insert" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived without serialize" name="backtick single line expected and received" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived without serialize" name="backtick single line expected and multi line received" time="0.001">
    </testcase>
    <testcase classname="printSnapshotAndReceived without serialize" name="has no common after clean up chaff multi line" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived without serialize" name="has no common after clean up chaff single line" time="0">
    </testcase>
    <testcase classname="printSnapshotAndReceived without serialize" name="prettier/pull/5590" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/Defaults.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:46" time="0.672" tests="1">
    <testcase classname="" name="get configuration defaults" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-resolve/src/__tests__/resolve.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:46" time="1.308" tests="16">
    <testcase classname="isCoreModule" name="returns false if `hasCoreModules` is false." time="0">
    </testcase>
    <testcase classname="isCoreModule" name="returns true if `hasCoreModules` is true and `moduleName` is a core module." time="0">
    </testcase>
    <testcase classname="isCoreModule" name="returns false if `hasCoreModules` is true and `moduleName` is not a core module." time="0">
    </testcase>
    <testcase classname="isCoreModule" name="returns false if `hasCoreModules` is true and `moduleNameMapper` alias a module same name with core module" time="0.001">
    </testcase>
    <testcase classname="findNodeModule" name="is possible to override the default resolver" time="0.001">
    </testcase>
    <testcase classname="findNodeModule" name="passes packageFilter to the resolve module when using the default resolver" time="0.001">
    </testcase>
    <testcase classname="resolveModule" name="is possible to resolve node modules" time="0.002">
    </testcase>
    <testcase classname="resolveModule" name="is possible to resolve node modules with custom extensions" time="0.002">
    </testcase>
    <testcase classname="resolveModule" name="is possible to resolve node modules with custom extensions and platforms" time="0">
    </testcase>
    <testcase classname="resolveModule" name="is possible to resolve node modules by resolving their realpath" time="0">
    </testcase>
    <testcase classname="resolveModule" name="is possible to specify custom resolve paths" time="0.001">
    </testcase>
    <testcase classname="resolveModule" name="does not confuse directories with files" time="0.001">
    </testcase>
    <testcase classname="getMockModule" name="is possible to use custom resolver to resolve deps inside mock modules with moduleNameMapper" time="0.001">
    </testcase>
    <testcase classname="nodeModulesPaths" name="provides custom module paths after node_modules" time="0">
    </testcase>
    <testcase classname="Resolver.getModulePaths() -&gt; nodeModulesPaths()" name="can resolve node modules relative to absolute paths in &quot;moduleDirectories&quot; on Windows platforms" time="0.021">
    </testcase>
    <testcase classname="Resolver.getModulePaths() -&gt; nodeModulesPaths()" name="can resolve node modules relative to absolute paths in &quot;moduleDirectories&quot; on Posix platforms" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/matchers-toEqual.property.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:46" time="1.062" tests="2">
    <testcase classname="toEqual" name="should be reflexive" time="0.058">
    </testcase>
    <testcase classname="toEqual" name="should be symmetric" time="0.204">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/SummaryReporter.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:47" time="0.366" tests="4">
    <testcase classname="" name="snapshots needs update with npm test" time="0.25">
    </testcase>
    <testcase classname="" name="snapshots needs update with yarn test" time="0.004">
    </testcase>
    <testcase classname="" name="snapshots all have results (no update)" time="0.004">
    </testcase>
    <testcase classname="" name="snapshots all have results (after update)" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/readConfigs.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:47" time="0.135" tests="3">
    <testcase classname="" name="readConfigs() throws when called without project paths" time="0.016">
    </testcase>
    <testcase classname="" name="readConfigs() loads async config file" time="0.01">
    </testcase>
    <testcase classname="" name="readConfigs() reject if async was rejected" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/generateEmptyCoverage.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:47" time="1.129" tests="3">
    <testcase classname="generateEmptyCoverage" name="generates an empty coverage object for a file without running it" time="0.37">
    </testcase>
    <testcase classname="generateEmptyCoverage" name="generates a null coverage result when using /* istanbul ignore file */" time="0.015">
    </testcase>
    <testcase classname="generateEmptyCoverage" name="generates a null coverage result when collectCoverage global config is false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/asymmetricMatchers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.207" tests="38">
    <testcase classname="" name="Any.asymmetricMatch()" time="0.001">
    </testcase>
    <testcase classname="" name="Any.toAsymmetricMatcher()" time="0.001">
    </testcase>
    <testcase classname="" name="Any.toAsymmetricMatcher() with function name" time="0.001">
    </testcase>
    <testcase classname="" name="Any throws when called with empty constructor" time="0.047">
    </testcase>
    <testcase classname="" name="Anything matches any type" time="0.001">
    </testcase>
    <testcase classname="" name="Anything does not match null and undefined" time="0">
    </testcase>
    <testcase classname="" name="Anything.toAsymmetricMatcher()" time="0">
    </testcase>
    <testcase classname="" name="ArrayContaining matches" time="0.004">
    </testcase>
    <testcase classname="" name="ArrayContaining does not match" time="0">
    </testcase>
    <testcase classname="" name="ArrayContaining throws for non-arrays" time="0.001">
    </testcase>
    <testcase classname="" name="ArrayNotContaining matches" time="0">
    </testcase>
    <testcase classname="" name="ArrayNotContaining does not match" time="0.001">
    </testcase>
    <testcase classname="" name="ArrayNotContaining throws for non-arrays" time="0">
    </testcase>
    <testcase classname="" name="ObjectContaining matches" time="0.001">
    </testcase>
    <testcase classname="" name="ObjectContaining does not match" time="0">
    </testcase>
    <testcase classname="" name="ObjectContaining matches defined properties" time="0">
    </testcase>
    <testcase classname="" name="ObjectContaining matches prototype properties" time="0">
    </testcase>
    <testcase classname="" name="ObjectContaining throws for non-objects" time="0.001">
    </testcase>
    <testcase classname="" name="ObjectContaining does not mutate the sample" time="0">
    </testcase>
    <testcase classname="" name="ObjectNotContaining matches" time="0">
    </testcase>
    <testcase classname="" name="ObjectNotContaining does not match" time="0.001">
    </testcase>
    <testcase classname="" name="ObjectNotContaining inverts ObjectContaining" time="0">
    </testcase>
    <testcase classname="" name="ObjectNotContaining throws for non-objects" time="0">
    </testcase>
    <testcase classname="" name="StringContaining matches string against string" time="0">
    </testcase>
    <testcase classname="" name="StringContaining throws if expected value is not string" time="0">
    </testcase>
    <testcase classname="" name="StringContaining returns false if received value is not string" time="0">
    </testcase>
    <testcase classname="" name="StringNotContaining matches string against string" time="0">
    </testcase>
    <testcase classname="" name="StringNotContaining throws if expected value is not string" time="0">
    </testcase>
    <testcase classname="" name="StringNotContaining returns true if received value is not string" time="0">
    </testcase>
    <testcase classname="" name="StringMatching matches string against regexp" time="0.001">
    </testcase>
    <testcase classname="" name="StringMatching matches string against string" time="0">
    </testcase>
    <testcase classname="" name="StringMatching throws if expected value is neither string nor regexp" time="0">
    </testcase>
    <testcase classname="" name="StringMatching returns false if received value is not string" time="0.001">
    </testcase>
    <testcase classname="" name="StringMatching returns false even if coerced non-string received value matches pattern" time="0">
    </testcase>
    <testcase classname="" name="StringNotMatching matches string against regexp" time="0">
    </testcase>
    <testcase classname="" name="StringNotMatching matches string against string" time="0">
    </testcase>
    <testcase classname="" name="StringNotMatching throws if expected value is neither string nor regexp" time="0">
    </testcase>
    <testcase classname="" name="StringNotMatching returns true if received value is not string" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/CoverageReporter.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.397" tests="12">
    <testcase classname="onRunComplete" name="getLastError() returns an error when threshold is not met for global" time="0.299">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns an error when threshold is not met for file" time="0.003">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns `undefined` when threshold is met" time="0.002">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns an error when threshold is not met for non-covered file" time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns an error when threshold is not met for directory" time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns `undefined` when threshold is met for directory" time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns an error when there is no coverage data for a threshold" time="0">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns &apos;undefined&apos; when global threshold group
   is empty because PATH and GLOB threshold groups have matched all the
    files in the coverage data." time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="getLastError() returns &apos;undefined&apos; when file and directory path
  threshold groups overlap" time="0.002">
    </testcase>
    <testcase classname="onRunComplete" name="that if globs or paths are specified alongside global, coverage
  data for matching paths will be subtracted from overall coverage
  and thresholds will be applied independently" time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="that files are matched by all matching threshold groups" time="0.001">
    </testcase>
    <testcase classname="onRunComplete" name="that it passes custom options when creating reporters" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/InlineSnapshots.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:47" time="1.149" tests="22">
    <testcase classname="" name="saveInlineSnapshots() replaces empty function call with a template literal" time="0.063">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() without prettier leaves formatting outside of snapshots alone" time="0.007">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() can handle typescript without prettier" time="0.008">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() can handle tsx without prettier" time="0.006">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() can handle flow and jsx without prettier" time="0.035">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() can use prettier to fix formatting for whole file" time="0.017">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() replaces existing template literal - babel parser" time="0.005">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() replaces existing template literal - flow parser" time="0.169">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() replaces existing template literal - typescript parser" time="0.155">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() replaces existing template literal with property matchers" time="0.017">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() creates template literal with property matchers" time="0.005">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() creates template literal with property matchers" time="0.002">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() throws if frame does not match" time="0.022">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() throws if multiple calls to to the same location" time="0.003">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() uses escaped backticks" time="0.006">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() works with non-literals in expect call" time="0.008">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() indents multi-line snapshots with spaces" time="0.013">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() does not re-indent error snapshots" time="0.022">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() does not re-indent already indented snapshots" time="0.011">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() indents multi-line snapshots with tabs" time="0.012">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() indents snapshots after prettier reformats" time="0.016">
    </testcase>
    <testcase classname="" name="saveInlineSnapshots() does not indent empty lines" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/readConfig.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.076" tests="1">
    <testcase classname="" name="readConfig() throws when an object is passed without a file path" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-watcher/src/lib/__tests__/scroll.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.057" tests="5">
    <testcase classname="" name="When offset is -1" time="0">
    </testcase>
    <testcase classname="" name="When offset is in the first set of items" time="0">
    </testcase>
    <testcase classname="" name="When offset is in the middle of the list" time="0">
    </testcase>
    <testcase classname="" name="When offset is at the end of the list" time="0.001">
    </testcase>
    <testcase classname="" name="When offset is at the end and size is smaller than max" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/toThrowMatchers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.257" tests="98">
    <testcase classname="toThrowError" name="to throw or not to throw" time="0.001">
    </testcase>
    <testcase classname="toThrowError substring" name="passes" time="0">
    </testcase>
    <testcase classname="toThrowError substring" name="did not throw at all" time="0.002">
    </testcase>
    <testcase classname="toThrowError substring" name="threw, but message did not match (error)" time="0.004">
    </testcase>
    <testcase classname="toThrowError substring" name="threw, but message did not match (non-error falsey)" time="0.001">
    </testcase>
    <testcase classname="toThrowError substring" name="properly escapes strings when matching against errors" time="0.037">
    </testcase>
    <testcase classname="toThrowError substring" name="threw, but message should not match (error)" time="0.001">
    </testcase>
    <testcase classname="toThrowError substring" name="threw, but message should not match (non-error truthy)" time="0">
    </testcase>
    <testcase classname="toThrowError regexp" name="passes" time="0.001">
    </testcase>
    <testcase classname="toThrowError regexp" name="did not throw at all" time="0">
    </testcase>
    <testcase classname="toThrowError regexp" name="threw, but message did not match (error)" time="0.001">
    </testcase>
    <testcase classname="toThrowError regexp" name="threw, but message did not match (non-error falsey)" time="0.008">
    </testcase>
    <testcase classname="toThrowError regexp" name="threw, but message should not match (error)" time="0.001">
    </testcase>
    <testcase classname="toThrowError regexp" name="threw, but message should not match (non-error truthy)" time="0">
    </testcase>
    <testcase classname="toThrowError error class" name="passes" time="0.001">
    </testcase>
    <testcase classname="toThrowError error class" name="did not throw at all" time="0">
    </testcase>
    <testcase classname="toThrowError error class" name="threw, but class did not match (error)" time="0">
    </testcase>
    <testcase classname="toThrowError error class" name="threw, but class did not match (non-error falsey)" time="0.001">
    </testcase>
    <testcase classname="toThrowError error class" name="threw, but class should not match (error)" time="0">
    </testcase>
    <testcase classname="toThrowError error class" name="threw, but class should not match (error subclass)" time="0.001">
    </testcase>
    <testcase classname="toThrowError error class" name="threw, but class should not match (error subsubclass)" time="0.004">
    </testcase>
    <testcase classname="toThrowError error-message pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError error-message pass" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrowError error-message fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError error-message fail" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrowError error-message fail" name="multiline diff highlight incorrect expected space" time="0.001">
    </testcase>
    <testcase classname="toThrowError asymmetric any-Class pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric any-Class pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric any-Class fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric any-Class fail" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrowError asymmetric anything pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric anything pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric anything fail" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toThrowError asymmetric anything fail" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric no-symbol pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric no-symbol pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric no-symbol fail" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toThrowError asymmetric no-symbol fail" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrowError asymmetric objectContaining pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric objectContaining pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric objectContaining fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrowError asymmetric objectContaining fail" name="isNot true" time="0.004">
    </testcase>
    <testcase classname="toThrowError promise/async throws if Error-like object is returned" name="passes" time="0.003">
    </testcase>
    <testcase classname="toThrowError promise/async throws if Error-like object is returned" name="did not throw at all" time="0">
    </testcase>
    <testcase classname="toThrowError promise/async throws if Error-like object is returned" name="threw, but class did not match" time="0.001">
    </testcase>
    <testcase classname="toThrowError promise/async throws if Error-like object is returned" name="threw, but should not have" time="0">
    </testcase>
    <testcase classname="toThrowError expected is undefined" name="threw, but should not have (non-error falsey)" time="0">
    </testcase>
    <testcase classname="toThrowError" name="invalid arguments" time="0">
    </testcase>
    <testcase classname="toThrowError" name="invalid actual" time="0.001">
    </testcase>
    <testcase classname="toThrow" name="to throw or not to throw" time="0">
    </testcase>
    <testcase classname="toThrow substring" name="passes" time="0">
    </testcase>
    <testcase classname="toThrow substring" name="did not throw at all" time="0.001">
    </testcase>
    <testcase classname="toThrow substring" name="threw, but message did not match (error)" time="0">
    </testcase>
    <testcase classname="toThrow substring" name="threw, but message did not match (non-error falsey)" time="0.001">
    </testcase>
    <testcase classname="toThrow substring" name="properly escapes strings when matching against errors" time="0">
    </testcase>
    <testcase classname="toThrow substring" name="threw, but message should not match (error)" time="0.001">
    </testcase>
    <testcase classname="toThrow substring" name="threw, but message should not match (non-error truthy)" time="0">
    </testcase>
    <testcase classname="toThrow regexp" name="passes" time="0">
    </testcase>
    <testcase classname="toThrow regexp" name="did not throw at all" time="0.001">
    </testcase>
    <testcase classname="toThrow regexp" name="threw, but message did not match (error)" time="0">
    </testcase>
    <testcase classname="toThrow regexp" name="threw, but message did not match (non-error falsey)" time="0">
    </testcase>
    <testcase classname="toThrow regexp" name="threw, but message should not match (error)" time="0">
    </testcase>
    <testcase classname="toThrow regexp" name="threw, but message should not match (non-error truthy)" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="passes" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="did not throw at all" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="threw, but class did not match (error)" time="0.001">
    </testcase>
    <testcase classname="toThrow error class" name="threw, but class did not match (non-error falsey)" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="threw, but class should not match (error)" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="threw, but class should not match (error subclass)" time="0">
    </testcase>
    <testcase classname="toThrow error class" name="threw, but class should not match (error subsubclass)" time="0">
    </testcase>
    <testcase classname="toThrow error-message pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow error-message pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow error-message fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow error-message fail" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrow error-message fail" name="multiline diff highlight incorrect expected space" time="0.004">
    </testcase>
    <testcase classname="toThrow asymmetric any-Class pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric any-Class pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric any-Class fail" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toThrow asymmetric any-Class fail" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric anything pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric anything pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric anything fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric anything fail" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric no-symbol pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric no-symbol pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric no-symbol fail" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric no-symbol fail" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toThrow asymmetric objectContaining pass" name="isNot false" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric objectContaining pass" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow asymmetric objectContaining fail" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toThrow asymmetric objectContaining fail" name="isNot true" time="0">
    </testcase>
    <testcase classname="toThrow promise/async throws if Error-like object is returned" name="passes" time="0.001">
    </testcase>
    <testcase classname="toThrow promise/async throws if Error-like object is returned" name="did not throw at all" time="0.001">
    </testcase>
    <testcase classname="toThrow promise/async throws if Error-like object is returned" name="threw, but class did not match" time="0">
    </testcase>
    <testcase classname="toThrow promise/async throws if Error-like object is returned" name="threw, but should not have" time="0.001">
    </testcase>
    <testcase classname="toThrow expected is undefined" name="threw, but should not have (non-error falsey)" time="0">
    </testcase>
    <testcase classname="toThrow" name="invalid arguments" time="0.001">
    </testcase>
    <testcase classname="toThrow" name="invalid actual" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-validate/src/__tests__/validate.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.283" tests="23">
    <testcase classname="" name="recursively validates default Jest config" time="0">
    </testcase>
    <testcase classname="" name="recursively validates default jest-validate config" time="0.001">
    </testcase>
    <testcase classname="" name="pretty prints valid config for Boolean" time="0.001">
    </testcase>
    <testcase classname="" name="pretty prints valid config for Array" time="0">
    </testcase>
    <testcase classname="" name="pretty prints valid config for String" time="0.001">
    </testcase>
    <testcase classname="" name="pretty prints valid config for Object" time="0">
    </testcase>
    <testcase classname="" name="pretty prints valid config for Function" time="0">
    </testcase>
    <testcase classname="" name="omits null and undefined config values" time="0">
    </testcase>
    <testcase classname="" name="recursively omits null and undefined config values" time="0">
    </testcase>
    <testcase classname="" name="treat async and non-async functions as equivalent" time="0">
    </testcase>
    <testcase classname="" name="treat async and non-async functions as equivalent" time="0">
    </testcase>
    <testcase classname="" name="treat async and non-async functions as equivalent" time="0">
    </testcase>
    <testcase classname="" name="treat async and non-async functions as equivalent" time="0">
    </testcase>
    <testcase classname="" name="respects recursiveDenylist" time="0.001">
    </testcase>
    <testcase classname="" name="displays warning for unknown config options" time="0.001">
    </testcase>
    <testcase classname="" name="displays warning for deprecated config options" time="0">
    </testcase>
    <testcase classname="" name="works with custom warnings" time="0.001">
    </testcase>
    <testcase classname="" name="works with custom errors" time="0">
    </testcase>
    <testcase classname="" name="works with custom deprecations" time="0.001">
    </testcase>
    <testcase classname="" name="works with multiple valid types" time="0">
    </testcase>
    <testcase classname="" name="reports errors nicely when failing with multiple valid options" time="0">
    </testcase>
    <testcase classname="" name="Repeated types within multiple valid examples are coalesced in error report" time="0.001">
    </testcase>
    <testcase classname="" name="Comments in config JSON using &quot;//&quot; key are not warned" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/SnapshotResolver.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.098" tests="10">
    <testcase classname="defaults" name="returns cached object if called multiple times" time="0">
    </testcase>
    <testcase classname="defaults" name="resolveSnapshotPath()" time="0.001">
    </testcase>
    <testcase classname="defaults" name="resolveTestPath()" time="0">
    </testcase>
    <testcase classname="custom resolver in project config" name="returns cached object if called multiple times" time="0.004">
    </testcase>
    <testcase classname="custom resolver in project config" name="resolveSnapshotPath()" time="0">
    </testcase>
    <testcase classname="custom resolver in project config" name="resolveTestPath()" time="0">
    </testcase>
    <testcase classname="malformed custom resolver in project config" name="missing resolveSnapshotPath throws " time="0.008">
    </testcase>
    <testcase classname="malformed custom resolver in project config" name="missing resolveTestPath throws " time="0.01">
    </testcase>
    <testcase classname="malformed custom resolver in project config" name="missing testPathForConsistencyCheck throws " time="0.004">
    </testcase>
    <testcase classname="malformed custom resolver in project config" name="inconsistent functions throws " time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/CoverageWorker.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.199" tests="2">
    <testcase classname="" name="resolves to the result of generateEmptyCoverage upon success" time="0.127">
    </testcase>
    <testcase classname="" name="throws errors on invalid JavaScript" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="packages/babel-jest/src/__tests__/index.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.371" tests="6">
    <testcase classname="" name="Returns source string with inline maps when no transformOptions is passed" time="0.177">
    </testcase>
    <testcase classname="caller option correctly merges from defaults and options" name="{&quot;supportsDynamicImport&quot;:true,&quot;supportsStaticESM&quot;:true} -&gt; {&quot;supportsDynamicImport&quot;:true,&quot;supportsStaticESM&quot;:true}" time="0.006">
    </testcase>
    <testcase classname="caller option correctly merges from defaults and options" name="{&quot;supportsDynamicImport&quot;:false,&quot;supportsStaticESM&quot;:false} -&gt; {&quot;supportsDynamicImport&quot;:false,&quot;supportsStaticESM&quot;:false}" time="0.011">
    </testcase>
    <testcase classname="caller option correctly merges from defaults and options" name="{&quot;supportsStaticESM&quot;:false} -&gt; {&quot;supportsDynamicImport&quot;:false,&quot;supportsStaticESM&quot;:false}" time="0.013">
    </testcase>
    <testcase classname="caller option correctly merges from defaults and options" name="{&quot;supportsDynamicImport&quot;:true} -&gt; {&quot;supportsDynamicImport&quot;:true,&quot;supportsStaticESM&quot;:false}" time="0.011">
    </testcase>
    <testcase classname="" name="can pass null to createTransformer" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/resolveConfigPath.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.183" tests="10">
    <testcase classname="Resolve config path .js" name="file path with &quot;.js&quot;" time="0.009">
    </testcase>
    <testcase classname="Resolve config path .js" name="directory path with &quot;.js&quot;" time="0.011">
    </testcase>
    <testcase classname="Resolve config path .ts" name="file path with &quot;.ts&quot;" time="0.002">
    </testcase>
    <testcase classname="Resolve config path .ts" name="directory path with &quot;.ts&quot;" time="0.003">
    </testcase>
    <testcase classname="Resolve config path .mjs" name="file path with &quot;.mjs&quot;" time="0.001">
    </testcase>
    <testcase classname="Resolve config path .mjs" name="directory path with &quot;.mjs&quot;" time="0.007">
    </testcase>
    <testcase classname="Resolve config path .cjs" name="file path with &quot;.cjs&quot;" time="0.002">
    </testcase>
    <testcase classname="Resolve config path .cjs" name="directory path with &quot;.cjs&quot;" time="0.002">
    </testcase>
    <testcase classname="Resolve config path .json" name="file path with &quot;.json&quot;" time="0.001">
    </testcase>
    <testcase classname="Resolve config path .json" name="directory path with &quot;.json&quot;" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/VerboseReporter.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:48" time="0.425" tests="11">
    <testcase classname="groupTestsBySuites" name="should handle empty results" time="0.293">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group A1 in A" time="0.001">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group A1 in A; B1 in B" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group A1, A2 in A" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group A1, A2 in A; B1, B2 in B" time="0.001">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group AB1 in AB" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group AB1, AB2 in AB" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group A1 in A; AB1 in AB" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group AB1 in AB; A1 in A" time="0">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group AB1 in AB; CD1 in CD" time="0.001">
    </testcase>
    <testcase classname="groupTestsBySuites" name="should group ABC1 in ABC; BC1 in BC; D1 in D; A1 in A" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/utils.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.214" tests="26">
    <testcase classname="" name="keyToTestName()" time="0.018">
    </testcase>
    <testcase classname="" name="testNameToKey" time="0">
    </testcase>
    <testcase classname="" name="saveSnapshotFile() works with 
" time="0.007">
    </testcase>
    <testcase classname="" name="saveSnapshotFile() works with " time="0">
    </testcase>
    <testcase classname="" name="getSnapshotData() throws when no snapshot version" time="0.001">
    </testcase>
    <testcase classname="" name="getSnapshotData() throws for older snapshot version" time="0.001">
    </testcase>
    <testcase classname="" name="getSnapshotData() throws for newer snapshot version" time="0.001">
    </testcase>
    <testcase classname="" name="getSnapshotData() does not throw for when updating" time="0">
    </testcase>
    <testcase classname="" name="getSnapshotData() marks invalid snapshot dirty when updating" time="0">
    </testcase>
    <testcase classname="" name="getSnapshotData() marks valid snapshot not dirty when updating" time="0">
    </testcase>
    <testcase classname="" name="escaping" time="0">
    </testcase>
    <testcase classname="" name="serialize handles \r\n" time="0.001">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="0 empty string" time="0">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="1 line has double quote marks at edges" time="0">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="1 line has spaces at edges" time="0.001">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="2 lines both are blank" time="0">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="2 lines have double quote marks at edges" time="0">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="2 lines first is blank" time="0.004">
    </testcase>
    <testcase classname="ExtraLineBreaks" name="2 lines last is blank" time="0.001">
    </testcase>
    <testcase classname="removeLinesBeforeExternalMatcherTrap" name="contains external matcher trap" time="0">
    </testcase>
    <testcase classname="removeLinesBeforeExternalMatcherTrap" name="doesn&apos;t contain external matcher trap" time="0">
    </testcase>
    <testcase classname="DeepMerge with property matchers" name="Correctly merges a nested object" time="0.001">
    </testcase>
    <testcase classname="DeepMerge with property matchers" name="Correctly merges an object with an array of objects" time="0.001">
    </testcase>
    <testcase classname="DeepMerge with property matchers" name="Correctly merges an object with an array of strings" time="0">
    </testcase>
    <testcase classname="DeepMerge with property matchers" name="Correctly merges an array of objects" time="0.001">
    </testcase>
    <testcase classname="DeepMerge with property matchers" name="Correctly merges an array of arrays" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/NotifyReporter.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.166" tests="18">
    <testcase classname="" name="test always" time="0.002">
    </testcase>
    <testcase classname="" name="test success" time="0.008">
    </testcase>
    <testcase classname="" name="test change" time="0.001">
    </testcase>
    <testcase classname="" name="test success-change" time="0">
    </testcase>
    <testcase classname="" name="test failure-change" time="0">
    </testcase>
    <testcase classname="" name="test always with rootDir" time="0.001">
    </testcase>
    <testcase classname="" name="test success with rootDir" time="0">
    </testcase>
    <testcase classname="" name="test change with rootDir" time="0">
    </testcase>
    <testcase classname="" name="test success-change with rootDir" time="0.001">
    </testcase>
    <testcase classname="" name="test failure-change with rootDir" time="0.001">
    </testcase>
    <testcase classname="" name="test always with moduleName" time="0">
    </testcase>
    <testcase classname="" name="test success with moduleName" time="0">
    </testcase>
    <testcase classname="" name="test change with moduleName" time="0.001">
    </testcase>
    <testcase classname="" name="test success-change with moduleName" time="0.004">
    </testcase>
    <testcase classname="" name="test failure-change with moduleName" time="0.001">
    </testcase>
    <testcase classname="node-notifier is an optional dependency" name="without node-notifier uses mock function that throws an error" time="0.023">
    </testcase>
    <testcase classname="node-notifier is an optional dependency" name="throws the error when require throws an unexpected error" time="0">
    </testcase>
    <testcase classname="node-notifier is an optional dependency" name="uses node-notifier when it is available" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-repl/src/__tests__/runtime_cli.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:45" time="4.094" tests="4">
    <testcase classname="Runtime CLI" name="fails with no path" time="0.08">
    </testcase>
    <testcase classname="Runtime CLI" name="displays script output" time="1.197">
    </testcase>
    <testcase classname="Runtime CLI" name="always disables automocking" time="1.424">
    </testcase>
    <testcase classname="Runtime CLI" name="throws script errors" time="1.209">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/extend.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.099" tests="10">
    <testcase classname="" name="is available globally when matcher is unary" time="0.001">
    </testcase>
    <testcase classname="" name="is available globally when matcher is variadic" time="0.001">
    </testcase>
    <testcase classname="" name="exposes matcherUtils in context" time="0">
    </testcase>
    <testcase classname="" name="is ok if there is no message specified" time="0.002">
    </testcase>
    <testcase classname="" name="exposes an equality function to custom matchers" time="0">
    </testcase>
    <testcase classname="" name="defines asymmetric unary matchers" time="0.003">
    </testcase>
    <testcase classname="" name="defines asymmetric unary matchers that can be prefixed by not" time="0.002">
    </testcase>
    <testcase classname="" name="defines asymmetric variadic matchers" time="0">
    </testcase>
    <testcase classname="" name="defines asymmetric variadic matchers that can be prefixed by not" time="0">
    </testcase>
    <testcase classname="" name="prints the Symbol into the error message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-source-map/src/__tests__/getCallsite.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.086" tests="3">
    <testcase classname="getCallsite" name="without source map" time="0.001">
    </testcase>
    <testcase classname="getCallsite" name="ignores errors when fs throws" time="0.001">
    </testcase>
    <testcase classname="getCallsite" name="reads source map file to determine line and column" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/setFromArgv.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.053" tests="4">
    <testcase classname="" name="maps special values to valid options" time="0">
    </testcase>
    <testcase classname="" name="maps regular values to themselves" time="0">
    </testcase>
    <testcase classname="" name="works with string objects" time="0">
    </testcase>
    <testcase classname="" name="explicit flags override those from --config" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-watcher/src/lib/__tests__/prompt.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.091" tests="3">
    <testcase classname="" name="calls handler on change value" time="0.002">
    </testcase>
    <testcase classname="" name="calls handler on success prompt" time="0">
    </testcase>
    <testcase classname="" name="calls handler on cancel prompt" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-docblock/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.177" tests="36">
    <testcase classname="docblock" name="extracts valid docblock with line comment" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts valid docblock" time="0.001">
    </testcase>
    <testcase classname="docblock" name="extracts valid docblock with more comments" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts from invalid docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="returns extract and parsedocblock" time="0.001">
    </testcase>
    <testcase classname="docblock" name="parses directives out of a docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="parses multiple of the same directives out of a docblock" time="0.001">
    </testcase>
    <testcase classname="docblock" name="parses &gt;=3 of the same directives out of a docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="parses directives out of a docblock with comments" time="0">
    </testcase>
    <testcase classname="docblock" name="parses directives out of a docblock with line comments" time="0">
    </testcase>
    <testcase classname="docblock" name="parses multiline directives" time="0">
    </testcase>
    <testcase classname="docblock" name="parses multiline directives even if there are linecomments within the docblock" time="0.001">
    </testcase>
    <testcase classname="docblock" name="supports slashes in @team directive" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts comments from docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts multiline comments from docblock" time="0.01">
    </testcase>
    <testcase classname="docblock" name="preserves leading whitespace in multiline comments from docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="removes leading newlines in multiline comments from docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts comments from beginning and end of docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="preserve urls within a pragma&apos;s values" time="0">
    </testcase>
    <testcase classname="docblock" name="strip linecomments from pragmas but preserve for comments" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts docblock comments as CRLF when docblock contains CRLF" time="0">
    </testcase>
    <testcase classname="docblock" name="extracts docblock comments as LF when docblock contains LF" time="0">
    </testcase>
    <testcase classname="docblock" name="strips the docblock out of a file that contains a top docblock" time="0">
    </testcase>
    <testcase classname="docblock" name="returns a file unchanged if there is no top docblock to strip" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with no pragmas as empty string" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with one pragma on one line" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with multiple pragmas on multiple lines" time="0.001">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with multiple of the same pragma" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with pragmas" time="0.001">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with comments" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with comments and no keys" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks with multiline comments" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks that are parseable" time="0">
    </testcase>
    <testcase classname="docblock" name="can augment existing docblocks with comments" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks using CRLF if comments contains CRLF" time="0">
    </testcase>
    <testcase classname="docblock" name="prints docblocks using LF if comments contains LF" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/dedentLines.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.094" tests="17">
    <testcase classname="dedentLines non-null" name="no lines" time="0.003">
    </testcase>
    <testcase classname="dedentLines non-null" name="one line empty string" time="0.001">
    </testcase>
    <testcase classname="dedentLines non-null" name="one line empty object" time="0">
    </testcase>
    <testcase classname="dedentLines non-null" name="one line self-closing element" time="0">
    </testcase>
    <testcase classname="dedentLines non-null" name="object value empty string" time="0">
    </testcase>
    <testcase classname="dedentLines non-null" name="object value string includes double-quote marks" time="0">
    </testcase>
    <testcase classname="dedentLines non-null" name="markup with props and text" time="0">
    </testcase>
    <testcase classname="dedentLines non-null" name="markup with components as props" time="0.001">
    </testcase>
    <testcase classname="dedentLines null" name="object key multi-line" time="0">
    </testcase>
    <testcase classname="dedentLines null" name="object value multi-line" time="0.001">
    </testcase>
    <testcase classname="dedentLines null" name="object key and value multi-line" time="0">
    </testcase>
    <testcase classname="dedentLines null" name="markup prop multi-line" time="0">
    </testcase>
    <testcase classname="dedentLines null" name="markup prop component with multi-line text" time="0.001">
    </testcase>
    <testcase classname="dedentLines null" name="markup text multi-line" time="0">
    </testcase>
    <testcase classname="dedentLines null" name="markup text multiple lines" time="0">
    </testcase>
    <testcase classname="dedentLines null" name="markup unclosed self-closing start tag" time="0.001">
    </testcase>
    <testcase classname="dedentLines null" name="markup unclosed because no end tag" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/getMaxWorkers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.067" tests="7">
    <testcase classname="getMaxWorkers" name="Returns 1 when runInBand" time="0">
    </testcase>
    <testcase classname="getMaxWorkers" name="Returns 1 when the OS CPUs are not available" time="0">
    </testcase>
    <testcase classname="getMaxWorkers" name="Returns the `maxWorkers` when specified" time="0">
    </testcase>
    <testcase classname="getMaxWorkers" name="Returns based on the number of cpus" time="0.001">
    </testcase>
    <testcase classname="getMaxWorkers % based" name="50% = 2 workers" time="0">
    </testcase>
    <testcase classname="getMaxWorkers % based" name="&lt; 0 workers should become 1" time="0.001">
    </testcase>
    <testcase classname="getMaxWorkers % based" name="0% shouldn&apos;t break" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/utils.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.085" tests="10">
    <testcase classname="wrapAnsiString()" name="wraps a long string containing ansi chars" time="0.003">
    </testcase>
    <testcase classname="wrapAnsiString()" name="returns the string unaltered if given a terminal width of zero" time="0">
    </testcase>
    <testcase classname="trimAndFormatPath()" name="trims dirname" time="0.001">
    </testcase>
    <testcase classname="trimAndFormatPath()" name="trims dirname (longer line width)" time="0.001">
    </testcase>
    <testcase classname="trimAndFormatPath()" name="trims dirname and basename" time="0">
    </testcase>
    <testcase classname="trimAndFormatPath()" name="does not trim anything" time="0">
    </testcase>
    <testcase classname="trimAndFormatPath()" name="split at the path.sep index" time="0.001">
    </testcase>
    <testcase classname="printDisplayName" name="should default displayName color to white when displayName is a string" time="0">
    </testcase>
    <testcase classname="printDisplayName" name="should default displayName color to white when color is not a valid value" time="0.001">
    </testcase>
    <testcase classname="printDisplayName" name="should correctly print the displayName when color and name are valid values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/throwMatcher.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.481" tests="3">
    <testcase classname="" name="throw matcher can take func" time="0.002">
    </testcase>
    <testcase classname="throw matcher from promise" name="can take error" time="0">
    </testcase>
    <testcase classname="throw matcher from promise" name="can take custom error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/matcher.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.131" tests="1">
    <testcase classname="" name="matcher returns matcher name, expected and actual values" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-config/src/__tests__/validatePattern.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.052" tests="4">
    <testcase classname="validate pattern function" name="without passed args returns true" time="0.001">
    </testcase>
    <testcase classname="validate pattern function" name="returns true for empty pattern" time="0">
    </testcase>
    <testcase classname="validate pattern function" name="returns true for valid pattern" time="0">
    </testcase>
    <testcase classname="validate pattern function" name="returns false for invalid pattern" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-resolve/src/__tests__/isBuiltinModule.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.036" tests="4">
    <testcase classname="isBuiltinModule" name="should return true for the `path` module" time="0">
    </testcase>
    <testcase classname="isBuiltinModule" name="should return false for the `chalk` module" time="0">
    </testcase>
    <testcase classname="isBuiltinModule" name="should return true for the `_http_common` module" time="0">
    </testcase>
    <testcase classname="isBuiltinModule" name="should return false for any internal node builtins" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-globals/src/__tests__/index.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.533" tests="1">
    <testcase classname="" name="throw when directly imported" time="0.505">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-regex-util/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.056" tests="8">
    <testcase classname="replacePathSepForRegex() posix" name="should return the path" time="0.001">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should replace POSIX path separators" time="0.001">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should escape Windows path separators" time="0">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should not escape an escaped dot" time="0.001">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should not escape an escaped regexp symbol" time="0">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should escape Windows path separators inside groups" time="0">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should escape Windows path separator at the beginning" time="0.001">
    </testcase>
    <testcase classname="replacePathSepForRegex() win32" name="should not escape several already escaped path separators" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-snapshot/src/__tests__/mockSerializer.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.045" tests="10">
    <testcase classname="" name="mock with 0 calls and default name" time="0.001">
    </testcase>
    <testcase classname="" name="mock with 2 calls, 1 return, 1 throw" time="0.001">
    </testcase>
    <testcase classname="" name="mock with 0 calls and default name in React element" time="0">
    </testcase>
    <testcase classname="" name="mock with 0 calls and non-default name" time="0">
    </testcase>
    <testcase classname="" name="mock with 1 calls and non-default name via new in object" time="0.001">
    </testcase>
    <testcase classname="" name="mock with 1 calls in React element" time="0">
    </testcase>
    <testcase classname="" name="mock with 2 calls" time="0.001">
    </testcase>
    <testcase classname="" name="indent option" time="0">
    </testcase>
    <testcase classname="" name="min option" time="0.001">
    </testcase>
    <testcase classname="" name="maxDepth option" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/getWatermarks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.037" tests="2">
    <testcase classname="getWatermarks" name="that watermarks use thresholds as upper target" time="0.001">
    </testcase>
    <testcase classname="getWatermarks" name="that watermarks are created always created" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/DefaultReporter.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:49" time="0.148" tests="2">
    <testcase classname="" name="normal output, everything goes to stdout" time="0.003">
    </testcase>
    <testcase classname="" name="when using stderr as output, no stdout call is made" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/getResultHeader.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.03" tests="4">
    <testcase classname="" name="should call `terminal-link` correctly" time="0">
    </testcase>
    <testcase classname="" name="should render the terminal link" time="0">
    </testcase>
    <testcase classname="" name="should display test time for slow test" time="0">
    </testcase>
    <testcase classname="" name="should not display test time for fast test " time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/toEqual-dom.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.099" tests="12">
    <testcase classname="toEqual duck type Text" name="isNot false" time="0">
    </testcase>
    <testcase classname="toEqual duck type Text" name="isNot true" time="0">
    </testcase>
    <testcase classname="toEqual duck type Element" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toEqual duck type Element" name="isNot true" time="0">
    </testcase>
    <testcase classname="toEqual duck type Fragment" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toEqual duck type Fragment" name="isNot true" time="0">
    </testcase>
    <testcase classname="toEqual document createTextNode" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toEqual document createTextNode" name="isNot true" time="0.001">
    </testcase>
    <testcase classname="toEqual document createElement" name="isNot false" time="0.001">
    </testcase>
    <testcase classname="toEqual document createElement" name="isNot true" time="0">
    </testcase>
    <testcase classname="toEqual document createDocumentFragment" name="isNot false" time="0.002">
    </testcase>
    <testcase classname="toEqual document createDocumentFragment" name="isNot true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-environment-node/src/__tests__/node_environment.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.184" tests="6">
    <testcase classname="NodeEnvironment" name="uses a copy of the process object" time="0.011">
    </testcase>
    <testcase classname="NodeEnvironment" name="exposes process.on" time="0.001">
    </testcase>
    <testcase classname="NodeEnvironment" name="exposes global.global" time="0.001">
    </testcase>
    <testcase classname="NodeEnvironment" name="should configure setTimeout/setInterval to use the node api" time="0.003">
    </testcase>
    <testcase classname="NodeEnvironment" name="has modern fake timers implementation" time="0.001">
    </testcase>
    <testcase classname="NodeEnvironment" name="TextEncoder references the same global Uint8Array constructor" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/getSnapshotStatus.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.028" tests="3">
    <testcase classname="" name="Retrieves the snapshot status" time="0">
    </testcase>
    <testcase classname="" name="Shows no snapshot updates if all snapshots matched" time="0.001">
    </testcase>
    <testcase classname="" name="Retrieves the snapshot status after a snapshot update" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-validate/src/__tests__/validateCLIOptions.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.083" tests="6">
    <testcase classname="" name="validates yargs special options" time="0.001">
    </testcase>
    <testcase classname="" name="validates testURL" time="0.001">
    </testcase>
    <testcase classname="" name="fails for unknown option" time="0.004">
    </testcase>
    <testcase classname="" name="fails for multiple unknown options" time="0">
    </testcase>
    <testcase classname="" name="does not show suggestion when unrecognized cli param length &lt;= 1" time="0.001">
    </testcase>
    <testcase classname="" name="shows suggestion when unrecognized cli param length &gt; 1" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-reporters/src/__tests__/getSnapshotSummary.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.049" tests="4">
    <testcase classname="" name="creates a snapshot summary" time="0">
    </testcase>
    <testcase classname="" name="creates a snapshot summary after an update" time="0">
    </testcase>
    <testcase classname="" name="creates a snapshot summary with multiple snapshot being written/updated" time="0">
    </testcase>
    <testcase classname="" name="returns nothing if there are no updates" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-watcher/src/lib/__tests__/formatTestNameByPattern.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.129" tests="11">
    <testcase classname="for multiline test name returns" name="test name with highlighted pattern and replaced line breaks" time="0.002">
    </testcase>
    <testcase classname="for one line test name with pattern in the head returns" name="test name with highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name with pattern in the head returns" name="test name with cutted tail and highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name with pattern in the head returns" name="test name with cutted tail and cutted highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name pattern in the middle" name="test name with highlighted pattern returns" time="0.001">
    </testcase>
    <testcase classname="for one line test name pattern in the middle" name="test name with cutted tail and highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name pattern in the middle" name="test name with cutted tail and cutted highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name pattern in the middle" name="test name with highlighted cutted" time="0">
    </testcase>
    <testcase classname="for one line test name pattern in the tail returns" name="test name with highlighted pattern" time="0.001">
    </testcase>
    <testcase classname="for one line test name pattern in the tail returns" name="test name with cutted tail and cutted highlighted pattern" time="0">
    </testcase>
    <testcase classname="for one line test name pattern in the tail returns" name="test name with highlighted cutted" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-transform/src/__tests__/shouldInstrument.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="0.155" tests="25">
    <testcase classname="shouldInstrument should return true" name="when testRegex is provided and file is not a test file" time="0.005">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when more than one testRegex is provided and filename is not a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when testMatch is provided and file is not a test file" time="0.003">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when testPathIgnorePatterns is provided and file is not a test file" time="0.001">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when more than one testPathIgnorePatterns is provided and filename is not a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when testRegex and testPathIgnorePatterns are provided and file is not a test file" time="0.001">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="when testMatch and testPathIgnorePatterns are provided and file is not a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="should return true when file is in collectCoverageOnlyFrom when provided" time="0.032">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="should return true when filename matches collectCoverageFrom" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="should return true if the file is not in coveragePathIgnorePatterns" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return true" name="should return true if file is a testfile but forceCoverageMatch is set" time="0.001">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if collectCoverage is falsy" time="0.011">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when testRegex is provided and filename is a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when more than one testRegex is provided and filename matches one of the patterns" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when testMatch is provided and file is a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when testRegex and testPathIgnorePatterns are provided and filename is a test file" time="0.001">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when testMatch and testPathIgnorePatterns are provided and file is a test file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when file is not in collectCoverageOnlyFrom when provided" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="when filename does not match collectCoverageFrom" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if the file is in coveragePathIgnorePatterns" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if file is in mock patterns" time="0.001">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if file is a globalSetup file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if file is globalTeardown file" time="0">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if file is in setupFiles" time="0.011">
    </testcase>
    <testcase classname="shouldInstrument should return false" name="if file is in setupFilesAfterEnv" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-transform/src/__tests__/ScriptTransformer.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="1.66" tests="22">
    <testcase classname="ScriptTransformer" name="transforms a file properly" time="0.204">
    </testcase>
    <testcase classname="ScriptTransformer" name="does not transform Node core modules" time="0.051">
    </testcase>
    <testcase classname="ScriptTransformer" name="throws an error if `process` doesn&apos;t return a string or an objectcontaining `code` key with processed string" time="0.079">
    </testcase>
    <testcase classname="ScriptTransformer" name="throws an error if `process` doesn&apos;t defined" time="0.042">
    </testcase>
    <testcase classname="ScriptTransformer" name="throws an error if createTransformer returns object without `process` method" time="0.098">
    </testcase>
    <testcase classname="ScriptTransformer" name="shouldn&apos;t throw error without process method. But with corrent createTransformer method" time="0.066">
    </testcase>
    <testcase classname="ScriptTransformer" name="uses the supplied preprocessor" time="0.045">
    </testcase>
    <testcase classname="ScriptTransformer" name="uses multiple preprocessors" time="0.035">
    </testcase>
    <testcase classname="ScriptTransformer" name="writes source map if preprocessor supplies it" time="0.026">
    </testcase>
    <testcase classname="ScriptTransformer" name="writes source map if preprocessor inlines it" time="0.038">
    </testcase>
    <testcase classname="ScriptTransformer" name="warns of unparseable inlined source maps from the preprocessor" time="0.067">
    </testcase>
    <testcase classname="ScriptTransformer" name="writes source maps if given by the transformer" time="0.032">
    </testcase>
    <testcase classname="ScriptTransformer" name="does not write source map if not given by the transformer" time="0.075">
    </testcase>
    <testcase classname="ScriptTransformer" name="should write a source map for the instrumented file when transformed" time="0.066">
    </testcase>
    <testcase classname="ScriptTransformer" name="should write a source map for the instrumented file when not transformed" time="0.066">
    </testcase>
    <testcase classname="ScriptTransformer" name="passes expected transform options to getCacheKey" time="0.073">
    </testcase>
    <testcase classname="ScriptTransformer" name="creates transformer with config" time="0.035">
    </testcase>
    <testcase classname="ScriptTransformer" name="reads values from the cache" time="0.093">
    </testcase>
    <testcase classname="ScriptTransformer" name="reads values from the cache when the file contains colons" time="0.084">
    </testcase>
    <testcase classname="ScriptTransformer" name="should reuse the value from in-memory cache which is set by custom transformer" time="0.025">
    </testcase>
    <testcase classname="ScriptTransformer" name="does not reuse the in-memory cache between different projects" time="0.037">
    </testcase>
    <testcase classname="ScriptTransformer" name="preload transformer when using `preloadTransformer`" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/baseTest.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="2.902" tests="2">
    <testcase classname="" name="simple test" time="2.145">
    </testcase>
    <testcase classname="" name="failures" time="0.707">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-mock/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:53" time="0.509" tests="84">
    <testcase classname="moduleMocker getMetadata" name="returns the function `name` property" time="0.002">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="mocks constant values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="does not retrieve metadata for arrays" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="does not retrieve metadata for undefined" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="does not retrieve metadata for null" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="retrieves metadata for ES6 classes" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="retrieves synchronous function metadata" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="retrieves asynchronous function metadata" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="retrieves metadata for object literals and it&apos;s members" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMetadata" name="retrieves Date object metadata" time="0.005">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="forwards the function name property" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="fixes illegal function name properties" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="special cases the mockConstructor name" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="wont interfere with previous mocks on a shared prototype" time="0.002">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock non-enumerable getters" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks getters of ES modules" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks ES2015 non-enumerable methods" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks ES2015 non-enumerable static properties and methods" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks methods in all the prototype chain (null prototype)" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from Object.prototype" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from Object.prototype (in mock context)" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from Function.prototype" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from Function.prototype (in mock context)" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from RegExp.prototype" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="does not mock methods from RegExp.prototype (in mock context)" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks methods that are bound multiple times" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks methods that are bound after mocking" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks regexp instances" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks functions with numeric names" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="tracks calls to mocks" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="tracks instances made by mocks" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports clearing mock calls" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports clearing mocks" time="0.007">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports clearing all mocks" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports resetting mock return values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports resetting single use mock return values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports resetting mock implementations" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports resetting single use mock implementations" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="supports resetting all mocks" time="0.002">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata mocked functions" name="maintains function arity" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mocks the method in the passed object itself" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="should delete previously inexistent methods when restoring" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mock value returning undefined" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mock value once returning undefined" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="mockReturnValueOnce mocks value just once" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mocking resolvable async functions" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mocking resolvable async functions only once" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mocking rejectable async functions" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="supports mocking rejectable async functions only once" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata return values" name="tracks return values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata return values" name="tracks mocked return values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata return values" name="supports resetting return values" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="tracks thrown errors without interfering with other tracking" time="0.033">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="a call that throws undefined is tracked properly" time="0">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="results of recursive calls are tracked properly" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="test results of recursive calls from within the recursive call" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata" name="call mockClear inside recursive mock" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata invocationCallOrder" name="tracks invocationCallOrder made by mocks" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata invocationCallOrder" name="supports clearing mock invocationCallOrder" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata invocationCallOrder" name="supports clearing all mocks invocationCallOrder" time="0.001">
    </testcase>
    <testcase classname="moduleMocker generateFromMetadata invocationCallOrder" name="handles a property called `prototype`" time="0.001">
    </testcase>
    <testcase classname="moduleMocker getMockImplementation" name="should mock calls to a mock function" time="0.001">
    </testcase>
    <testcase classname="moduleMocker mockImplementationOnce" name="should mock constructor" time="0.001">
    </testcase>
    <testcase classname="moduleMocker mockImplementationOnce" name="should mock single call to a mock function" time="0.001">
    </testcase>
    <testcase classname="moduleMocker mockImplementationOnce" name="should fallback to default mock function when no specific mock is available" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="mockReturnValue does not override mockImplementationOnce" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="mockImplementation resets the mock" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="should recognize a mocked function" time="0">
    </testcase>
    <testcase classname="moduleMocker" name="default mockName is jest.fn()" time="0">
    </testcase>
    <testcase classname="moduleMocker" name="mockName sets the mock name" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="mockName gets reset by mockReset" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="mockName gets reset by mockRestore" time="0.001">
    </testcase>
    <testcase classname="moduleMocker" name="mockName is not reset by mockClear" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOn" name="should work" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOn" name="should throw on invalid input" time="0.028">
    </testcase>
    <testcase classname="moduleMocker spyOn" name="supports restoring all spies" time="0.002">
    </testcase>
    <testcase classname="moduleMocker spyOn" name="should work with getters" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="should work - getter" time="0.002">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="should work - setter" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="should throw on invalid input" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="supports restoring all spies" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="should work with getters on the prototype chain" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="should work with setters on the prototype chain" time="0.001">
    </testcase>
    <testcase classname="moduleMocker spyOnProperty" name="supports restoring all spies on the prototype chain" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/hooks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="3.762" tests="3">
    <testcase classname="" name="beforeEach is executed before each test in current/child describe blocks" time="2.304">
    </testcase>
    <testcase classname="" name="multiple before each hooks in one describe are executed in the right order" time="0.678">
    </testcase>
    <testcase classname="" name="beforeAll is exectued correctly" time="0.625">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_module.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:51" time="2.439" tests="27">
    <testcase classname="Runtime requireModule" name="finds haste modules" time="1.124">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `module` to modules" time="0.026">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `module.parent` to modules" time="0.08">
    </testcase>
    <testcase classname="Runtime requireModule" name="`module.parent` should be undefined for entrypoints" time="0.025">
    </testcase>
    <testcase classname="Runtime requireModule" name="resolve module.parent.require correctly" time="0.049">
    </testcase>
    <testcase classname="Runtime requireModule" name="resolve module.parent.filename correctly" time="0.023">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `module.loaded` to modules" time="0.027">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `module.filename` to modules" time="0.036">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `module.paths` to modules" time="0.049">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides `require.main` to modules" time="0.052">
    </testcase>
    <testcase classname="Runtime requireModule" name="throws on non-existent haste modules" time="0.068">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds relative-path modules without file extension" time="0.046">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds relative-path modules with file extension" time="0.021">
    </testcase>
    <testcase classname="Runtime requireModule" name="throws on non-existent relative-path modules" time="0.022">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds node core built-in modules" time="0.048">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds and loads JSON files without file extension" time="0.027">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds and loads JSON files with file extension" time="0.029">
    </testcase>
    <testcase classname="Runtime requireModule" name="requires a JSON file twice successfully" time="0.034">
    </testcase>
    <testcase classname="Runtime requireModule" name="provides manual mock when real module doesnt exist" time="0.027">
    </testcase>
    <testcase classname="Runtime requireModule" name="doesn&apos;t override real modules with manual mocks when explicitly unmocked" time="0.166">
    </testcase>
    <testcase classname="Runtime requireModule" name="resolves haste packages properly" time="0.03">
    </testcase>
    <testcase classname="Runtime requireModule" name="resolves platform extensions based on the default platform" time="0.204">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds modules encoded in UTF-8 *with BOM*" time="0.025">
    </testcase>
    <testcase classname="Runtime requireModule" name="finds and loads JSON files encoded in UTF-8 *with BOM*" time="0.021">
    </testcase>
    <testcase classname="Runtime requireModule" name="should export a constructable Module class" time="0.021">
    </testcase>
    <testcase classname="Runtime requireModule" name="caches Module correctly" time="0.023">
    </testcase>
    <testcase classname="Runtime requireModule on node &gt;=12.12.0" name="overrides module.createRequire" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_mock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:53" time="0.743" tests="4">
    <testcase classname="Runtime jest.mock" name="uses explicitly set mocks instead of automocking" time="0.635">
    </testcase>
    <testcase classname="Runtime jest.mock" name="sets virtual mock for non-existing module required from same directory" time="0.029">
    </testcase>
    <testcase classname="Runtime jest.mock" name="sets virtual mock for non-existing module required from different directory" time="0.018">
    </testcase>
    <testcase classname="Runtime jest.setMock" name="uses explicitly set mocks instead of automocking" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/circusItTestError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:54" time="0.3" tests="8">
    <testcase classname="test/it error throwing" name="it doesn&apos;t throw an error with valid arguments" time="0.001">
    </testcase>
    <testcase classname="test/it error throwing" name="it throws error with missing callback function" time="0.028">
    </testcase>
    <testcase classname="test/it error throwing" name="it throws an error when first argument isn&apos;t a string" time="0.001">
    </testcase>
    <testcase classname="test/it error throwing" name="it throws an error when callback function is not a function" time="0">
    </testcase>
    <testcase classname="test/it error throwing" name="test doesn&apos;t throw an error with valid arguments" time="0">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws error with missing callback function" time="0.001">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws an error when first argument isn&apos;t a string" time="0">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws an error when callback function is not a function" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/base/__tests__/BaseWorkerPool.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:54" time="0.653" tests="11">
    <testcase classname="BaseWorkerPool" name="throws error when createWorker is not defined" time="0.015">
    </testcase>
    <testcase classname="BaseWorkerPool" name="creates and exposes n workers" time="0.009">
    </testcase>
    <testcase classname="BaseWorkerPool" name="creates and expoeses n workers" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool" name="creates workers with the right options" time="0.002">
    </testcase>
    <testcase classname="BaseWorkerPool" name="makes a non-existing relative worker throw" time="0.003">
    </testcase>
    <testcase classname="BaseWorkerPool" name="create multiple workers with unique worker ids" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool" name="aggregates all stdouts and stderrs from all workers" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool" name="works when stdout and stderr are not piped to the parent" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool end" name="ends all workers" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool end" name="resolves with forceExited=false if workers exited gracefully" time="0.001">
    </testcase>
    <testcase classname="BaseWorkerPool end" name="force exits workers that do not exit gracefully and resolves with forceExited=true" time="0.501">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/Immutable.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:54" time="0.443" tests="111">
    <testcase classname="" name="does not incorrectly match identity-obj-proxy as Immutable object" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports an empty collection {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports an empty collection {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports a single string element" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports a single integer element" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports multiple string elements {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports multiple string elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports multiple integer elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports multiple integer elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports object elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports React elements {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedSet" name="supports React elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.List" name="supports an empty collection {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports an empty collection {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports a single string element" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports a single integer element" time="0.001">
    </testcase>
    <testcase classname="Immutable.List" name="supports multiple string elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports multiple string elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports multiple integer elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports multiple integer elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.List" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports object elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports React elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.List" name="supports React elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports an empty collection {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports an empty collection {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports a single string element" time="0.001">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports a single integer element" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports multiple string elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports multiple string elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports multiple integer elements {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports multiple integer elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports object elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports React elements {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Stack" name="supports React elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports an empty collection {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports an empty collection {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Set" name="supports a single string element" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports a single integer element" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports multiple string elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports multiple string elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Set" name="supports multiple integer elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports multiple integer elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Set" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports object elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports React elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Set" name="supports React elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Map" name="supports an empty collection {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports an empty collection {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports an object with single key" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports an object with multiple keys {min: true}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Map" name="supports an object with multiple keys {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports object elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports React elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Map" name="supports React elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports an empty collection {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports an empty collection {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports an object with single key" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports an object with multiple keys {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports an object with multiple keys {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports object elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports object elements {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports React elements {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports React elements {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.OrderedMap" name="supports non-string keys" time="0.002">
    </testcase>
    <testcase classname="Immutable.Record" name="supports an empty record {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports an empty record {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record with descriptive name" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record without descriptive name" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record with values {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record with values {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record with Map value {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports a record with Map value {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports imbricated Record {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Record" name="supports imbricated Record {min: false}" time="0">
    </testcase>
    <testcase classname="indentation of heterogeneous collections" name="empty Immutable.List as child of Object" time="0">
    </testcase>
    <testcase classname="indentation of heterogeneous collections" name="empty Immutable.Map as child of Array" time="0">
    </testcase>
    <testcase classname="indentation of heterogeneous collections" name="non-empty Array as child of Immutable.Map" time="0">
    </testcase>
    <testcase classname="indentation of heterogeneous collections" name="non-empty Object as child of Immutable.List" time="0">
    </testcase>
    <testcase classname="indent option" name="default implicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="default explicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="non-default: 0 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="non-default: 4 spaces" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="Immutable.List as child of Object" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="Immutable.Map as child of Array" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="Immutable.Seq as child of Immutable.Map" time="0.001">
    </testcase>
    <testcase classname="maxDepth option" name="Immutable.Map as descendants in immutable collection" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports an empty sequence from array {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports an empty sequence from array {min: false}" time="0.001">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a non-empty sequence from array {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a non-empty sequence from array {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a non-empty sequence from arguments" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports an empty sequence from object {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports an empty sequence from object {min: false}" time="0.014">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a non-empty sequence from object {min: true}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a non-empty sequence from object {min: false}" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a sequence of entries from Immutable.Map" time="0.001">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a sequence of values from ECMAScript Set" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a sequence of values from Immutable.List" time="0">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a sequence of values from Immutable.Set" time="0.001">
    </testcase>
    <testcase classname="Immutable.Seq" name="supports a sequence of values from Immutable.Stack" time="0">
    </testcase>
    <testcase classname="Immutable.Seq lazy entries" name="from object properties" time="0">
    </testcase>
    <testcase classname="Immutable.Seq lazy entries" name="from Immutable.Map entries" time="0.001">
    </testcase>
    <testcase classname="Immutable.Seq lazy values" name="from Immutable.Range" time="0">
    </testcase>
    <testcase classname="Immutable.Seq lazy values" name="from iterator" time="0.002">
    </testcase>
    <testcase classname="Immutable.Seq lazy values" name="from array items" time="0">
    </testcase>
    <testcase classname="Immutable.Seq lazy values" name="from Immutable.List values" time="0.001">
    </testcase>
    <testcase classname="Immutable.Seq lazy values" name="from ECMAScript Set values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/Runtime-sourceMaps.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:54" time="0.584" tests="1">
    <testcase classname="Runtime requireModule" name="installs source maps if available" time="0.56">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-environment-jsdom/src/__tests__/jsdom_environment.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:54" time="0.783" tests="2">
    <testcase classname="JSDomEnvironment" name="should configure setTimeout/setInterval to use the browser api" time="0.047">
    </testcase>
    <testcase classname="JSDomEnvironment" name="has modern fake timers implementation" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="packages/babel-plugin-jest-hoist/src/__tests__/hoistPlugin.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.347" tests="4">
    <testcase classname="babel-plugin-jest-hoist" name="automatic react runtime" time="0.102">
    </testcase>
    <testcase classname="babel-plugin-jest-hoist" name="top level mocking" time="0.018">
    </testcase>
    <testcase classname="babel-plugin-jest-hoist" name="within a block" time="0.01">
    </testcase>
    <testcase classname="babel-plugin-jest-hoist" name="within a block with no siblings" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/workers/__tests__/ChildProcessWorker.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.184" tests="17">
    <testcase classname="" name="passes fork options down to child_process.fork, adding the defaults" time="0.026">
    </testcase>
    <testcase classname="" name="passes workerId to the child process and assign it to 1-indexed env.JEST_WORKER_ID" time="0.002">
    </testcase>
    <testcase classname="" name="initializes the child process with the given workerPath" time="0.002">
    </testcase>
    <testcase classname="" name="stops initializing the worker after the amount of retries is exceeded" time="0.025">
    </testcase>
    <testcase classname="" name="provides stdout and stderr from the child processes" time="0.005">
    </testcase>
    <testcase classname="" name="sends the task to the child process" time="0.01">
    </testcase>
    <testcase classname="" name="resends the task to the child process after a retry" time="0.002">
    </testcase>
    <testcase classname="" name="calls the onProcessStart method synchronously if the queue is empty" time="0.002">
    </testcase>
    <testcase classname="" name="can send multiple messages to parent" time="0.003">
    </testcase>
    <testcase classname="" name="creates error instances for known errors" time="0.003">
    </testcase>
    <testcase classname="" name="throws when the child process returns a strange message" time="0.002">
    </testcase>
    <testcase classname="" name="does not restart the child if it cleanly exited" time="0.002">
    </testcase>
    <testcase classname="" name="resolves waitForExit() after the child process cleanly exited" time="0.001">
    </testcase>
    <testcase classname="" name="restarts the child when the child process dies" time="0.013">
    </testcase>
    <testcase classname="" name="sends SIGTERM when forceExit() is called" time="0.001">
    </testcase>
    <testcase classname="" name="sends SIGKILL some time after SIGTERM" time="0.001">
    </testcase>
    <testcase classname="" name="does not send SIGKILL if SIGTERM exited the process" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-each/src/__tests__/array.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.192" tests="159">
    <testcase classname="jest-each .test" name="throws an error when not called with an array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="throws an error when called with an empty array" time="0.009">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given timeout" time="0.004">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws an error when not called with an array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws an error when not called with an array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="does not call global test with title containing more param values than sprintf placeholders" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global test title with %p placeholder injected at the correct positions" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="does not call global test with title containing more param values than sprintf placeholders" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global test title with %p placeholder injected at the correct positions" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with cb function containing all parameters of each test case 2d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws an error when called with an empty array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given title" time="0.006">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with title containing param values when using printf format" time="0.004">
    </testcase>
    <testcase classname="jest-each .test.only" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws an error when not called with an array" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws an error when not called with an array" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with cb function containing all parameters of each test case 2d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws an error when called with an empty array" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with cb function containing all parameters of each test case 2d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="throws an error when called with an empty array" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given title" time="0.003">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="does not call global test with title containing more param values than sprintf placeholders" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global test title with %p placeholder injected at the correct positions" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="does not call global test with title containing more param values than sprintf placeholders" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global test title with %p placeholder injected at the correct positions" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws an error when not called with an array" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws an error when called with an empty array" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with title containing param values when using printf format" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="does not call global test with title containing more param values than sprintf placeholders" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global test title with %p placeholder injected at the correct positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="does not calls global test title with %p placeholder when no data is supplied at given position" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with cb function containing all parameters of each test case when given 1d array" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with cb function containing all parameters of each test case 2d array" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos; ] with done when cb function has more args than params of given test row" time="0.001">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos;, &apos;concurrent&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos;, &apos;concurrent&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;it&apos; ] with done when cb function has more args than params of given test row" time="0.001">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;fit&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;it&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;describe&apos; ] with done when test function has more args than params of given test row" time="0.001">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;fdescribe&apos; ] with done when test function has more args than params of given test row" time="0.002">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;describe&apos;, &apos;only&apos; ] with done when test function has more args than params of given test row" time="0.001">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with title with placeholder values correctly interpolated" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with given title" time="0.006">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with title with placeholder values correctly interpolated" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing param values when using sprintf format" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title with placeholder values correctly interpolated" time="0">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with title with placeholder values correctly interpolated" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with title with placeholder values correctly interpolated" time="0">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with title with placeholder values correctly interpolated" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with title containing param values when using sprintf format" time="0">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with title with placeholder values correctly interpolated" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-each/src/__tests__/template.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.483" tests="242">
    <testcase classname="jest-each .test" name="throws error when there are additional words in first column heading" time="0.002">
    </testcase>
    <testcase classname="jest-each .test" name="throws error when there are additional words in second column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="does not throw error when there is only one column with additional words in template after heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="throws error when there are fewer arguments than headings over multiple rows" time="0.002">
    </testcase>
    <testcase classname="jest-each .test" name="throws an error when called with an empty string" time="0.002">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given title when multiple tests cases exist" time="0.005">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with title containing $key in multiple positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with title containing last seen object when $key.path is invalid" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with cb function with object built from table headings and values" time="0.001">
    </testcase>
    <testcase classname="jest-each .test" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .test" name="formats primitive values using .toString()" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are additional words in second column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are additional words in last column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="does not throw error when there is only one column with additional words in template after heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are no arguments for given headings" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws error when there are fewer arguments than headings over multiple rows" time="0.033">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing $key in multiple positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="formats primitive values using .toString()" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are additional words in second column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are no arguments for given headings" time="0.012">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are fewer arguments than headings when given one row" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.only" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are additional words in second column heading" time="0.006">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="does not throw error when there is additional words in template after heading row" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="does not throw error when there is only one column" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are no arguments for given headings" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="throws an error when called with an empty string" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing $key.path" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing last seen object when $key.path is invalid" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are additional words in second column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws error when there are fewer arguments than headings over multiple rows" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with title containing $key in multiple positions" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with title containing last seen object when $key.path is invalid" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with cb function with object built from table headings and values" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.only" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .test.only" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are additional words in second column heading" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are additional words in last column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="does not throw error when there is additional words in template after heading row" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="does not throw error when there is only one column with additional words in template after heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are no arguments for given headings" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with title containing $key in multiple positions" time="0.005">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .it" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .it" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are additional words in first column heading" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are additional words in second column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="throws an error when called with an empty string" time="0.003">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .fit" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .fit" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are additional words in first column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are additional words in second column heading" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are additional words in last column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="does not throw error when there is additional words in template after heading row" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="does not throw error when there is only one column with additional words in template after heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are no arguments for given headings" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are fewer arguments than headings when given one row" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .it.only" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.only" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are additional words in first column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are additional words in second column heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="does not throw error when there is additional words in template after heading row" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are fewer arguments than headings when given one row" time="0.028">
    </testcase>
    <testcase classname="jest-each .describe" name="throws error when there are fewer arguments than headings over multiple rows" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="throws an error when called with an empty string" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given title when multiple tests cases exist" time="0.004">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with title containing $key.path" time="0">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with title containing last seen object when $key.path is invalid" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with cb function with object built from table headings and values" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe" name="calls global with given timeout" time="0.017">
    </testcase>
    <testcase classname="jest-each .describe" name="formats primitive values using .toString()" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are additional words in first column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are additional words in second column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="does not throw error when there is only one column" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="does not throw error when there is only one column with additional words in template after heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are fewer arguments than headings when given one row" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws error when there are fewer arguments than headings over multiple rows" time="0.051">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="throws an error when called with an empty string" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with title containing $key.path" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with title containing last seen object when $key.path is invalid" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with cb function with object built from table headings and values" time="0.001">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="calls global with given timeout" time="0">
    </testcase>
    <testcase classname="jest-each .fdescribe" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are additional words in first column heading" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are additional words in second column heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are additional words in last column heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="does not throw error when there is additional words in template after heading row" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="does not throw error when there is only one column" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="does not throw error when there is only one column with additional words in template after heading" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are no arguments for given headings" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are fewer arguments than headings when given one row" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws error when there are fewer arguments than headings over multiple rows" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="throws an error when called with an empty string" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with title containing $key in multiple positions" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with title containing $key.path" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with title containing last seen object when $key.path is invalid" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with cb function with object built from table headings and values" time="0">
    </testcase>
    <testcase classname="jest-each .describe.only" name="calls global with given timeout" time="0.001">
    </testcase>
    <testcase classname="jest-each .describe.only" name="formats primitive values using .toString()" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;test&apos;, &apos;concurrent&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;it&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;fit&apos; ] with done when cb function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each done callback" name="calls [ &apos;it&apos;, &apos;only&apos; ] with done when cb function has more args than params of given test row" time="0.001">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;describe&apos; ] with done when test function has more args than params of given test row" time="0.007">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;fdescribe&apos; ] with done when test function has more args than params of given test row" time="0.002">
    </testcase>
    <testcase classname="jest-each done callback" name="does not call [ &apos;describe&apos;, &apos;only&apos; ] with done when test function has more args than params of given test row" time="0">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with given title" time="0.002">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .xtest" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.skip" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .test.concurrent.skip" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .xit" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with given title when multiple tests cases exist" time="0.001">
    </testcase>
    <testcase classname="jest-each .it.skip" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with given title" time="0.001">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .xdescribe" name="calls global with title containing param values when using $variable format" time="0">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with given title" time="0">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with given title when multiple tests cases exist" time="0">
    </testcase>
    <testcase classname="jest-each .describe.skip" name="calls global with title containing param values when using $variable format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/react.test.tsx" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.325" tests="55">
    <testcase classname="" name="supports a single element with no props or children" time="0.005">
    </testcase>
    <testcase classname="" name="supports a single element with non-empty string child" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with empty string child" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with non-zero number child" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with zero number child" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with mixed children" time="0.001">
    </testcase>
    <testcase classname="" name="supports props with strings" time="0.001">
    </testcase>
    <testcase classname="" name="supports props with multiline strings" time="0">
    </testcase>
    <testcase classname="" name="supports props with numbers" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with a function prop" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with a object prop" time="0.001">
    </testcase>
    <testcase classname="" name="supports an element with and object prop and children" time="0.001">
    </testcase>
    <testcase classname="" name="supports an element with complex props and mixed children" time="0">
    </testcase>
    <testcase classname="" name="escapes children properly" time="0.001">
    </testcase>
    <testcase classname="" name="supports everything all together" time="0.001">
    </testcase>
    <testcase classname="" name="sorts props in nested components" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with React elements as props" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with React elements with props" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with custom React elements with props" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with custom React elements with props (using displayName)" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with custom React elements with props (using anonymous function)" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with custom React elements with a child" time="0.001">
    </testcase>
    <testcase classname="" name="supports undefined element type" time="0">
    </testcase>
    <testcase classname="" name="supports a fragment with no children" time="0">
    </testcase>
    <testcase classname="" name="supports a fragment with string child" time="0">
    </testcase>
    <testcase classname="" name="supports a fragment with element child" time="0">
    </testcase>
    <testcase classname="" name="supports suspense" time="0.001">
    </testcase>
    <testcase classname="" name="supports a single element with React elements with a child" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with React elements with children" time="0">
    </testcase>
    <testcase classname="" name="supports a single element with React elements with array children" time="0">
    </testcase>
    <testcase classname="" name="supports array of elements" time="0.001">
    </testcase>
    <testcase classname="test object for subset match" name="undefined props" time="0">
    </testcase>
    <testcase classname="test object for subset match" name="undefined children" time="0">
    </testcase>
    <testcase classname="indent option" name="default implicit: 2 spaces" time="0.001">
    </testcase>
    <testcase classname="indent option" name="default explicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="non-default: 0 spaces" time="0.001">
    </testcase>
    <testcase classname="indent option" name="non-default: 4 spaces" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="elements" time="0.001">
    </testcase>
    <testcase classname="maxDepth option" name="array of elements" time="0">
    </testcase>
    <testcase classname="" name="min option" time="0">
    </testcase>
    <testcase classname="" name="ReactElement plugin highlights syntax" time="0.001">
    </testcase>
    <testcase classname="" name="ReactTestComponent plugin highlights syntax" time="0">
    </testcase>
    <testcase classname="" name="throws if theme option is null" time="0.05">
    </testcase>
    <testcase classname="" name="throws if theme option is not of type &quot;object&quot;" time="0">
    </testcase>
    <testcase classname="" name="throws if theme option has value that is undefined in ansi-styles" time="0.001">
    </testcase>
    <testcase classname="" name="ReactElement plugin highlights syntax with color from theme option" time="0">
    </testcase>
    <testcase classname="" name="ReactTestComponent plugin highlights syntax with color from theme option" time="0">
    </testcase>
    <testcase classname="" name="supports forwardRef with a child" time="0">
    </testcase>
    <testcase classname="React.memo without displayName" name="renders the component name" time="0">
    </testcase>
    <testcase classname="React.memo with displayName" name="renders the displayName of component before memoizing" time="0">
    </testcase>
    <testcase classname="React.memo with displayName" name="renders the displayName of memoized component" time="0">
    </testcase>
    <testcase classname="" name="supports context Provider with a child" time="0.001">
    </testcase>
    <testcase classname="" name="supports context Consumer with a child" time="0">
    </testcase>
    <testcase classname="" name="ReactElement removes undefined props" time="0">
    </testcase>
    <testcase classname="" name="ReactTestComponent removes undefined props" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/afterAll.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:50" time="5.755" tests="6">
    <testcase classname="" name="tests are not marked done until their parent afterAll runs" time="2.231">
    </testcase>
    <testcase classname="" name="describe block cannot have hooks and no tests" time="0.697">
    </testcase>
    <testcase classname="" name="describe block _can_ have hooks if a child describe block has tests" time="0.65">
    </testcase>
    <testcase classname="" name="describe block hooks must not run if describe block is skipped" time="0.599">
    </testcase>
    <testcase classname="" name="child tests marked with todo should not run if describe block is skipped" time="0.677">
    </testcase>
    <testcase classname="" name="child tests marked with only should not run if describe block is skipped" time="0.724">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/prettyFormat.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.219" tests="86">
    <testcase classname="prettyFormat()" name="prints empty arguments" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints arguments" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an empty array" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an array with items" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a empty typed array" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a typed array with items" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an array buffer" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a nested array" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints true" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints false" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an error" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a typed error with a message" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a function constructor" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an anonymous callback function" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an anonymous assigned function" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a named function" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a named generator function" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="can customize function names" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints Infinity" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints -Infinity" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an empty map" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a map with values" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a map with non-string keys" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints NaN" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints null" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a positive number" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a negative number" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints zero" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints negative zero" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a positive bigint" time="0.007">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a negative bigint" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints zero bigint" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints negative zero bigint" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a date" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an invalid date" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an empty object" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an object with properties" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an object with properties and symbols" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an object without non-enumerable properties which have string key" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an object without non-enumerable properties which have symbol key" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an object with sorted properties" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints regular expressions from constructors" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints regular expressions from literals" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints regular expressions {escapeRegex: false}" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints regular expressions {escapeRegex: true}" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="escapes regular expressions nested inside object" time="0.004">
    </testcase>
    <testcase classname="prettyFormat()" name="prints an empty set" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a set with values" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a string" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints and escape a string" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="doesn&apos;t escape string with {excapeString: false}" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a string with escapes" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a multiline string" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a multiline string as value of object property" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a symbol" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints undefined" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a WeakMap" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints a WeakSet" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints deeply nested objects" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints circular references" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints parallel references" time="0">
    </testcase>
    <testcase classname="prettyFormat() indent option" name="default implicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="prettyFormat() indent option" name="default explicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="prettyFormat() indent option" name="non-default: 0 spaces" time="0.001">
    </testcase>
    <testcase classname="prettyFormat() indent option" name="non-default: 4 spaces" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="can customize the max depth" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="throws on invalid options" time="0.032">
    </testcase>
    <testcase classname="prettyFormat()" name="supports plugins" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="supports plugins that return empty string" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="throws if plugin does not return a string" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="throws PrettyFormatPluginError if test throws an error" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="throws PrettyFormatPluginError if print throws an error" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="throws PrettyFormatPluginError if serialize throws an error" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="supports plugins with deeply nested arrays (#24)" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="should call plugins on nested basic values" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="prints objects with no constructor" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="prints identity-obj-proxy with string constructor" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="calls toJSON and prints its return value" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="calls toJSON and prints an internal representation." time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="calls toJSON only on functions" time="0.001">
    </testcase>
    <testcase classname="prettyFormat()" name="does not call toJSON recursively" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="calls toJSON on Sets" time="0">
    </testcase>
    <testcase classname="prettyFormat()" name="disables toJSON calls through options" time="0">
    </testcase>
    <testcase classname="prettyFormat() min" name="prints some basic values in min mode" time="0">
    </testcase>
    <testcase classname="prettyFormat() min" name="prints some complex values in min mode" time="0">
    </testcase>
    <testcase classname="prettyFormat() min" name="does not allow indent !== 0 in min mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/Farm.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.158" tests="10">
    <testcase classname="Farm" name="sends a request to one worker" time="0.001">
    </testcase>
    <testcase classname="Farm" name="sends four requests to four unique workers" time="0.001">
    </testcase>
    <testcase classname="Farm" name="handles null computeWorkerKey, sending to first worker" time="0.001">
    </testcase>
    <testcase classname="Farm" name="sends the same worker key to the same worker" time="0.009">
    </testcase>
    <testcase classname="Farm" name="returns the result if the call worked" time="0.001">
    </testcase>
    <testcase classname="Farm" name="throws if the call failed" time="0">
    </testcase>
    <testcase classname="Farm" name="checks that once a sticked task finishes, next time is sent to that worker" time="0">
    </testcase>
    <testcase classname="Farm" name="checks that even before a sticked task finishes, next time is sent to that worker" time="0.008">
    </testcase>
    <testcase classname="Farm" name="checks that locking works, and jobs are never lost" time="0.001">
    </testcase>
    <testcase classname="Farm" name="can receive custom messages from workers" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/workers/__tests__/threadChild.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.12" tests="10">
    <testcase classname="" name="lazily requires the file" time="0.026">
    </testcase>
    <testcase classname="" name="calls initialize with the correct arguments" time="0.001">
    </testcase>
    <testcase classname="" name="returns results immediately when function is synchronous" time="0.015">
    </testcase>
    <testcase classname="" name="returns results when it gets resolved if function is asynchronous" time="0.022">
    </testcase>
    <testcase classname="" name="calls the main module if the method call is &quot;default&quot;" time="0.001">
    </testcase>
    <testcase classname="" name="calls the main export if the method call is &quot;default&quot; and it is a Babel transpiled one" time="0.001">
    </testcase>
    <testcase classname="" name="removes the message listener on END message" time="0">
    </testcase>
    <testcase classname="" name="calls the teardown method " time="0.001">
    </testcase>
    <testcase classname="" name="throws if an invalid message is detected" time="0.001">
    </testcase>
    <testcase classname="" name="throws if child is not forked" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/queueRunner.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.093" tests="6">
    <testcase classname="queueRunner" name="runs every function in the queue." time="0.001">
    </testcase>
    <testcase classname="queueRunner" name="exposes `fail` to `next`." time="0.001">
    </testcase>
    <testcase classname="queueRunner" name="passes errors to `onException`." time="0">
    </testcase>
    <testcase classname="queueRunner" name="passes an error to `onException` on timeout." time="0.004">
    </testcase>
    <testcase classname="queueRunner" name="calls `fail` with arguments" time="0.001">
    </testcase>
    <testcase classname="queueRunner" name="calls `fail` when done(error) is invoked" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/workers/__tests__/NodeThreadsWorker.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.258" tests="15">
    <testcase classname="" name="passes fork options down to child_process.fork, adding the defaults" time="0.067">
    </testcase>
    <testcase classname="" name="passes workerId to the thread and assign it to env.JEST_WORKER_ID" time="0.001">
    </testcase>
    <testcase classname="" name="initializes the thread with the given workerPath" time="0.001">
    </testcase>
    <testcase classname="" name="stops initializing the worker after the amount of retries is exceeded" time="0.026">
    </testcase>
    <testcase classname="" name="provides stdout and stderr from the threads" time="0.005">
    </testcase>
    <testcase classname="" name="sends the task to the thread" time="0.001">
    </testcase>
    <testcase classname="" name="resends the task to the thread after a retry" time="0.002">
    </testcase>
    <testcase classname="" name="calls the onProcessStart method synchronously if the queue is empty" time="0.004">
    </testcase>
    <testcase classname="" name="can send multiple messages to parent" time="0.002">
    </testcase>
    <testcase classname="" name="creates error instances for known errors" time="0.005">
    </testcase>
    <testcase classname="" name="throws when the thread returns a strange message" time="0.001">
    </testcase>
    <testcase classname="" name="does not restart the thread if it cleanly exited" time="0">
    </testcase>
    <testcase classname="" name="resolves waitForExit() after the thread cleanly exited" time="0">
    </testcase>
    <testcase classname="" name="restarts the thread when the thread dies" time="0">
    </testcase>
    <testcase classname="" name="terminates the thread when forceExit() is called" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/workers/__tests__/processChild.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.135" tests="10">
    <testcase classname="" name="lazily requires the file" time="0.028">
    </testcase>
    <testcase classname="" name="calls initialize with the correct arguments" time="0.001">
    </testcase>
    <testcase classname="" name="returns results immediately when function is synchronous" time="0.013">
    </testcase>
    <testcase classname="" name="returns results when it gets resolved if function is asynchronous" time="0.023">
    </testcase>
    <testcase classname="" name="calls the main module if the method call is &quot;default&quot;" time="0">
    </testcase>
    <testcase classname="" name="calls the main export if the method call is &quot;default&quot; and it is a Babel transpiled one" time="0.001">
    </testcase>
    <testcase classname="" name="removes the message listener on END message" time="0.001">
    </testcase>
    <testcase classname="" name="calls the teardown method " time="0">
    </testcase>
    <testcase classname="" name="throws if an invalid message is detected" time="0.001">
    </testcase>
    <testcase classname="" name="throws if child is not forked" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runner/src/__tests__/testRunner.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:55" time="0.905" tests="2">
    <testcase classname="" name="injects the serializable module map into each worker in watch mode" time="0.002">
    </testcase>
    <testcase classname="" name="assign process.env.JEST_WORKER_ID = 1 when in runInBand mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/hooksError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.127" tests="32">
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when &quot;String&quot; is provided as a first argument to it" time="0.019">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when 1 is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when [] is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when {} is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when Symbol(hello) is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when true is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when null is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when undefined is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when &quot;String&quot; is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when 1 is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when [] is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when {} is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when Symbol(hello) is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when true is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when null is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when &quot;String&quot; is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when 1 is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when [] is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when {} is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when Symbol(hello) is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when true is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when null is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when &quot;String&quot; is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when 1 is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when [] is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when {} is provided as a first argument to it" time="0.003">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when Symbol(hello) is provided as a first argument to it" time="0.005">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when true is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when null is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-serializer/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.158" tests="17">
    <testcase classname="Using V8 implementation" name="throws the error with an invalid serialization" time="0.006">
    </testcase>
    <testcase classname="Using V8 implementation Object 0" name="serializes/deserializes in memory" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 0" name="serializes/deserializes in disk" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 1" name="serializes/deserializes in memory" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 1" name="serializes/deserializes in disk" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 2" name="serializes/deserializes in memory" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 2" name="serializes/deserializes in disk" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 3" name="serializes/deserializes in memory" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 3" name="serializes/deserializes in disk" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 4" name="serializes/deserializes in memory" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 4" name="serializes/deserializes in disk" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 5" name="serializes/deserializes in memory" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 5" name="serializes/deserializes in disk" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 6" name="serializes/deserializes in memory" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 6" name="serializes/deserializes in disk" time="0">
    </testcase>
    <testcase classname="Using V8 implementation Object 7" name="serializes/deserializes in memory" time="0.001">
    </testcase>
    <testcase classname="Using V8 implementation Object 7" name="serializes/deserializes in disk" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-console/src/__tests__/bufferedConsole.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.171" tests="20">
    <testcase classname="CustomConsole assert" name="do not log when the assertion is truthy" time="0.001">
    </testcase>
    <testcase classname="CustomConsole assert" name="do not log when the assertion is truthy and there is a message" time="0">
    </testcase>
    <testcase classname="CustomConsole assert" name="log the assertion error when the assertion is falsy" time="0.033">
    </testcase>
    <testcase classname="CustomConsole assert" name="log the assertion error when the assertion is falsy with another message argument" time="0">
    </testcase>
    <testcase classname="CustomConsole count" name="count using the default counter" time="0">
    </testcase>
    <testcase classname="CustomConsole count" name="count using the a labeled counter" time="0">
    </testcase>
    <testcase classname="CustomConsole count" name="countReset restarts default counter" time="0.001">
    </testcase>
    <testcase classname="CustomConsole count" name="countReset restarts custom counter" time="0.001">
    </testcase>
    <testcase classname="CustomConsole group" name="group without label" time="0.001">
    </testcase>
    <testcase classname="CustomConsole group" name="group with label" time="0.001">
    </testcase>
    <testcase classname="CustomConsole group" name="groupEnd remove the indentation of the current group" time="0.001">
    </testcase>
    <testcase classname="CustomConsole group" name="groupEnd can not remove the indentation below the starting point" time="0.001">
    </testcase>
    <testcase classname="CustomConsole time" name="should return the time between time() and timeEnd() on default timer" time="0">
    </testcase>
    <testcase classname="CustomConsole time" name="should return the time between time() and timeEnd() on custom timer" time="0.001">
    </testcase>
    <testcase classname="CustomConsole dir" name="should print the deepest value" time="0.002">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="should return the time between time() and timeEnd() on default timer" time="0">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="should return the time between time() and timeEnd() on custom timer" time="0.001">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="default timer with data" time="0.001">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="custom timer with data" time="0.001">
    </testcase>
    <testcase classname="CustomConsole console" name="should be able to initialize console instance" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-console/src/__tests__/CustomConsole.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.115" tests="23">
    <testcase classname="CustomConsole log" name="should print to stdout" time="0.001">
    </testcase>
    <testcase classname="CustomConsole error" name="should print to stderr" time="0.001">
    </testcase>
    <testcase classname="CustomConsole warn" name="should print to stderr" time="0.001">
    </testcase>
    <testcase classname="CustomConsole assert" name="do not log when the assertion is truthy" time="0.001">
    </testcase>
    <testcase classname="CustomConsole assert" name="do not log when the assertion is truthy and there is a message" time="0">
    </testcase>
    <testcase classname="CustomConsole assert" name="log the assertion error when the assertion is falsy" time="0.018">
    </testcase>
    <testcase classname="CustomConsole assert" name="log the assertion error when the assertion is falsy with another message argument" time="0">
    </testcase>
    <testcase classname="CustomConsole count" name="count using the default counter" time="0.001">
    </testcase>
    <testcase classname="CustomConsole count" name="count using the a labeled counter" time="0.003">
    </testcase>
    <testcase classname="CustomConsole count" name="countReset restarts default counter" time="0.001">
    </testcase>
    <testcase classname="CustomConsole count" name="countReset restarts custom counter" time="0">
    </testcase>
    <testcase classname="CustomConsole group" name="group without label" time="0">
    </testcase>
    <testcase classname="CustomConsole group" name="group with label" time="0">
    </testcase>
    <testcase classname="CustomConsole group" name="groupEnd remove the indentation of the current group" time="0">
    </testcase>
    <testcase classname="CustomConsole group" name="groupEnd can not remove the indentation below the starting point" time="0">
    </testcase>
    <testcase classname="CustomConsole time" name="should return the time between time() and timeEnd() on default timer" time="0">
    </testcase>
    <testcase classname="CustomConsole time" name="should return the time between time() and timeEnd() on custom timer" time="0">
    </testcase>
    <testcase classname="CustomConsole dir" name="should print the deepest value" time="0">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="should return the time between time() and timeEnd() on default timer" time="0.001">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="should return the time between time() and timeEnd() on custom timer" time="0">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="default timer with data" time="0.001">
    </testcase>
    <testcase classname="CustomConsole timeLog" name="custom timer with data" time="0">
    </testcase>
    <testcase classname="CustomConsole console" name="should be able to initialize console instance" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/DOMCollection.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.064" tests="10">
    <testcase classname="DOMCollection plugin for object properties" name="supports DOMStringMap" time="0.001">
    </testcase>
    <testcase classname="DOMCollection plugin for object properties" name="supports NamedNodeMap" time="0">
    </testcase>
    <testcase classname="DOMCollection plugin for object properties" name="supports config.min option" time="0.001">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports HTMLCollection for getElementsByTagName" time="0.002">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports HTMLCollection for children" time="0.001">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports config.maxDepth option" time="0">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports NodeList for querySelectorAll" time="0.004">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports NodeList for childNodes" time="0.001">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports HTMLOptionsCollection for select options" time="0">
    </testcase>
    <testcase classname="DOMCollection plugin for list items" name="supports HTMLCollection for form elements" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-circus/src/__tests__/circusItTodoTestError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.081" tests="3">
    <testcase classname="test/it.todo error throwing" name="todo throws error when given no arguments" time="0.035">
    </testcase>
    <testcase classname="test/it.todo error throwing" name="todo throws error when given more than one argument" time="0.001">
    </testcase>
    <testcase classname="test/it.todo error throwing" name="todo throws error when given none string description" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-test-sequencer/src/__tests__/test_sequencer.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.251" tests="8">
    <testcase classname="" name="sorts by file size if there is no timing information" time="0.001">
    </testcase>
    <testcase classname="" name="sorts based on timing information" time="0.001">
    </testcase>
    <testcase classname="" name="sorts based on failures and timing information" time="0">
    </testcase>
    <testcase classname="" name="sorts based on failures, timing information and file size" time="0.001">
    </testcase>
    <testcase classname="" name="writes the cache based on results without existing cache" time="0">
    </testcase>
    <testcase classname="" name="returns failed tests in sorted order" time="0.001">
    </testcase>
    <testcase classname="" name="writes the cache based on the results" time="0.013">
    </testcase>
    <testcase classname="" name="works with multiple contexts" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/Suite.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.084" tests="1">
    <testcase classname="Suite" name="doesn&apos;t throw on addExpectationResult when there are no children" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/AsymmetricMatcher.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.137" tests="38">
    <testcase classname="" name="supports any(String)" time="0.001">
    </testcase>
    <testcase classname="" name="supports nested any(String)" time="0">
    </testcase>
    <testcase classname="" name="supports any(Function)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(Function)" time="0">
    </testcase>
    <testcase classname="" name="supports any(Array)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(Array)" time="0.001">
    </testcase>
    <testcase classname="" name="supports any(Object)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(Object)" time="0">
    </testcase>
    <testcase classname="" name="supports any(RegExp)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(RegExp)" time="0">
    </testcase>
    <testcase classname="" name="supports any(Symbol)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(Symbol)" time="0">
    </testcase>
    <testcase classname="" name="supports any(Function)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(Function)" time="0">
    </testcase>
    <testcase classname="" name="supports any(&lt;anonymous&gt;)" time="0.001">
    </testcase>
    <testcase classname="" name="supports nested any(&lt;anonymous&gt;)" time="0">
    </testcase>
    <testcase classname="" name="supports any(namedFuntction)" time="0">
    </testcase>
    <testcase classname="" name="supports nested any(namedFuntction)" time="0">
    </testcase>
    <testcase classname="" name="anything()" time="0">
    </testcase>
    <testcase classname="" name="arrayContaining()" time="0">
    </testcase>
    <testcase classname="" name="arrayNotContaining()" time="0">
    </testcase>
    <testcase classname="" name="objectContaining()" time="0">
    </testcase>
    <testcase classname="" name="objectNotContaining()" time="0.001">
    </testcase>
    <testcase classname="" name="stringContaining(string)" time="0">
    </testcase>
    <testcase classname="" name="not.stringContaining(string)" time="0">
    </testcase>
    <testcase classname="" name="stringMatching(string)" time="0">
    </testcase>
    <testcase classname="" name="stringMatching(regexp)" time="0">
    </testcase>
    <testcase classname="" name="stringMatching(regexp) {escapeRegex: false}" time="0.003">
    </testcase>
    <testcase classname="" name="stringMatching(regexp) {escapeRegex: true}" time="0.013">
    </testcase>
    <testcase classname="" name="stringNotMatching(string)" time="0.001">
    </testcase>
    <testcase classname="" name="supports multiple nested asymmetric matchers" time="0">
    </testcase>
    <testcase classname="indent option" name="default implicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="default explicit: 2 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="non-default: 0 spaces" time="0">
    </testcase>
    <testcase classname="indent option" name="non-default: 4 spaces" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="matchers as leaf nodes" time="0">
    </testcase>
    <testcase classname="maxDepth option" name="matchers as internal nodes" time="0.001">
    </testcase>
    <testcase classname="" name="min option" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/ConvertAnsi.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.043" tests="6">
    <testcase classname="ConvertAnsi plugin" name="supports style.red" time="0.001">
    </testcase>
    <testcase classname="ConvertAnsi plugin" name="supports style.green" time="0">
    </testcase>
    <testcase classname="ConvertAnsi plugin" name="supports style.reset" time="0.001">
    </testcase>
    <testcase classname="ConvertAnsi plugin" name="supports style.bold" time="0">
    </testcase>
    <testcase classname="ConvertAnsi plugin" name="supports style.dim" time="0.001">
    </testcase>
    <testcase classname="ConvertAnsi plugin" name="does not support other colors" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-console/src/__tests__/getConsoleOutput.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.056" tests="12">
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for assert" time="0.002">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for count" time="0">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for debug" time="0.001">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for dir" time="0.001">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for dirxml" time="0">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for error" time="0">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for group" time="0.001">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for groupCollapsed" time="0">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for info" time="0">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for log" time="0.001">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for time" time="0.001">
    </testcase>
    <testcase classname="getConsoleOutput" name="takes noStackTrace and pass it on for warn" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/expectationResultFactory.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.07" tests="7">
    <testcase classname="expectationResultFactory" name="returns the result if passed." time="0.001">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the result if failed." time="0.005">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the result if failed (with `message`)." time="0.001">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the result if failed (with `error`)." time="0.001">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the error name if the error message is empty" time="0">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the result if failed (with `error` as a string)." time="0">
    </testcase>
    <testcase classname="expectationResultFactory" name="returns the result if failed (with `error.stack` not as a string)." time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-each/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.044" tests="10">
    <testcase classname="array .add" name="returns the result of adding 0 to 0" time="0">
    </testcase>
    <testcase classname="array .add" name="returns the result of adding 0 to 1" time="0">
    </testcase>
    <testcase classname="array .add" name="returns the result of adding 1 to 1" time="0.001">
    </testcase>
    <testcase classname="concurrent .add" name="returns the result of adding 0 to 0" time="0">
    </testcase>
    <testcase classname="concurrent .add" name="returns the result of adding 0 to 1" time="0">
    </testcase>
    <testcase classname="concurrent .add" name="returns the result of adding 1 to 1" time="0">
    </testcase>
    <testcase classname="template .add" name="returns 0 when given 0 and 0" time="0">
    </testcase>
    <testcase classname="template .add" name="returns 1 when given 0 and 1" time="0">
    </testcase>
    <testcase classname="template .add" name="returns 2 when given 1 and 1" time="0.001">
    </testcase>
    <testcase classname="" name="throws an error when not called with the right number of arguments" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/DOMElement.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.148" tests="28">
    <testcase classname="pretty-format" name="prints global window as constructor name alone" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports a single HTML element" time="0.002">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an HTML element with a class property" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an HTML element with a title property" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="escapes double quote in attribute value" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an HTML element with a single attribute" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an HTML element with multiple attributes" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an HTML element with attribute and text content" time="0.003">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports an element with text content" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports nested elements" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports nested elements with attributes" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports nested elements with attribute and text content" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports nested elements with text content" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports siblings" time="0.004">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports multiline text node in pre" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports multiline text node preceding span in pre" time="0.008">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports multiline text node in textarea" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports empty text node" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports non-empty text node" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports comment node" time="0.003">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports fragment node" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports custom elements" time="0.002">
    </testcase>
    <testcase classname="DOMElement Plugin matches constructor name of SVG elements" name="jsdom 9 and 10" time="0.001">
    </testcase>
    <testcase classname="DOMElement Plugin matches constructor name of SVG elements" name="jsdom 11" time="0">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports SVG elements" time="0.003">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports indentation for array of elements" time="0.002">
    </testcase>
    <testcase classname="DOMElement Plugin" name="supports maxDepth option" time="0.002">
    </testcase>
    <testcase classname="DOMElement Plugin" name="handles `tagName` not being a string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-test-result/src/__tests__/formatTestResults.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.053" tests="1">
    <testcase classname="formatTestResults" name="includes test full name" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/index.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.23" tests="8">
    <testcase classname="" name="exposes the right API using default working" time="0.085">
    </testcase>
    <testcase classname="" name="exposes the right API using passed worker" time="0.001">
    </testcase>
    <testcase classname="" name="breaks if any of the forbidden methods is tried to be exposed" time="0.027">
    </testcase>
    <testcase classname="" name="works with minimal options" time="0.003">
    </testcase>
    <testcase classname="" name="does not let make calls after the farm is ended" time="0.002">
    </testcase>
    <testcase classname="" name="does not let end the farm after it is ended" time="0.004">
    </testcase>
    <testcase classname="" name="calls doWork" time="0.009">
    </testcase>
    <testcase classname="" name="calls getStderr and getStdout from worker" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/hooksError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.051" tests="32">
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when &quot;String&quot; is provided as a first argument to it" time="0.002">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when 1 is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when [] is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when {} is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when Symbol(hello) is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when true is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when null is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeEach hooks error throwing" name="beforeEach throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when &quot;String&quot; is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when 1 is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when [] is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when {} is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when Symbol(hello) is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when true is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when null is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="beforeAll hooks error throwing" name="beforeAll throws an error when undefined is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when &quot;String&quot; is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when 1 is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when [] is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when {} is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when Symbol(hello) is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when true is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when null is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterEach hooks error throwing" name="afterEach throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when &quot;String&quot; is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when 1 is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when [] is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when {} is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when Symbol(hello) is provided as a first argument to it" time="0.007">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when true is provided as a first argument to it" time="0">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when null is provided as a first argument to it" time="0.001">
    </testcase>
    <testcase classname="afterAll hooks error throwing" name="afterAll throws an error when undefined is provided as a first argument to it" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/reporter.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.107" tests="1">
    <testcase classname="Jasmine2Reporter" name="reports nested suites" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/todoError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.027" tests="3">
    <testcase classname="test/it.todo error throwing" name="it throws error when given no arguments" time="0.002">
    </testcase>
    <testcase classname="test/it.todo error throwing" name="it throws error when given more than one argument" time="0">
    </testcase>
    <testcase classname="test/it.todo error throwing" name="it throws error when given none string description" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/itTestError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.032" tests="6">
    <testcase classname="test/it error throwing" name="it throws error with missing callback function" time="0.002">
    </testcase>
    <testcase classname="test/it error throwing" name="it throws an error when first argument isn&apos;t a string" time="0.001">
    </testcase>
    <testcase classname="test/it error throwing" name="it throws an error when callback function is not a function" time="0">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws error with missing callback function" time="0">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws an error when first argument isn&apos;t a string" time="0.001">
    </testcase>
    <testcase classname="test/it error throwing" name="test throws an error when callback function is not a function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/iterators.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.043" tests="4">
    <testcase classname="iterators" name="works for arrays" time="0.01">
    </testcase>
    <testcase classname="iterators" name="works for custom iterables" time="0.001">
    </testcase>
    <testcase classname="iterators" name="works for Sets" time="0">
    </testcase>
    <testcase classname="iterators" name="works for Maps" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/pTimeout.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.044" tests="3">
    <testcase classname="pTimeout" name="calls `clearTimeout` and resolves when `promise` resolves." time="0.001">
    </testcase>
    <testcase classname="pTimeout" name="calls `clearTimeout` and rejects when `promise` rejects." time="0.001">
    </testcase>
    <testcase classname="pTimeout" name="calls `onTimeout` on timeout." time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-create-cache-key-function/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:56" time="0.075" tests="1">
    <testcase classname="" name="creation of a cache key" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/concurrent.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="0.024" tests="3">
    <testcase classname="concurrent" name="should add 1 to number" time="0.001">
    </testcase>
    <testcase classname="concurrent" name="should add 1 to number" time="0">
    </testcase>
    <testcase classname="concurrent" name="should add 1 to number" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-jasmine2/src/__tests__/itToTestAlias.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="0.023" tests="1">
    <testcase classname="" name="global.test" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/pretty-format/src/__tests__/ReactElement.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="0.064" tests="3">
    <testcase classname="ReactElement Plugin" name="serializes forwardRef without displayName" time="0.001">
    </testcase>
    <testcase classname="ReactElement Plugin" name="serializes forwardRef with displayName" time="0">
    </testcase>
    <testcase classname="ReactElement Plugin" name="serializes forwardRef component with displayName" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/FifoQueue.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="0.048" tests="3">
    <testcase classname="" name="returns the shared tasks in FIFO ordering" time="0.001">
    </testcase>
    <testcase classname="" name="returns the worker specific tasks in FIFO ordering" time="0.001">
    </testcase>
    <testcase classname="" name="maintains global FIFO ordering between worker specific and shared tasks" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/PriorityQueue.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="0.063" tests="5">
    <testcase classname="" name="returns the tasks in order" time="0.003">
    </testcase>
    <testcase classname="" name="returns the task with the lowest priority value if inserted in reversed order" time="0">
    </testcase>
    <testcase classname="" name="returns the task with the lowest priority value if inserted in correct order" time="0.001">
    </testcase>
    <testcase classname="" name="uses different queues for each worker" time="0">
    </testcase>
    <testcase classname="" name="process task in the global and shared queue in order" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/SearchSource.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="2.596" tests="27">
    <testcase classname="SearchSource isTestFilePath" name="supports ../ paths and unix separators via testRegex" time="0.804">
    </testcase>
    <testcase classname="SearchSource isTestFilePath" name="supports unix separators" time="0.265">
    </testcase>
    <testcase classname="SearchSource isTestFilePath" name="supports win32 separators" time="0.277">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests matching a pattern via testRegex" time="0.023">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests matching a pattern via testMatch" time="0.014">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests matching a JS regex pattern" time="0.012">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests matching a JS glob pattern" time="0.013">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests matching a JS with overriding glob patterns" time="0.018">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with default file extensions using testRegex" time="0.016">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with default file extensions using testMatch" time="0.013">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with parentheses in their rootDir when using testMatch" time="0.016">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with similar but custom file extensions" time="0.013">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with totally custom foobar file extensions" time="0.038">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests with many kinds of file extensions" time="0.02">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests using a regex only" time="0.041">
    </testcase>
    <testcase classname="SearchSource testPathsMatching" name="finds tests using a glob only" time="0.024">
    </testcase>
    <testcase classname="SearchSource findRelatedTests" name="makes sure a file is related to itself" time="0.06">
    </testcase>
    <testcase classname="SearchSource findRelatedTests" name="finds tests that depend directly on the path" time="0.015">
    </testcase>
    <testcase classname="SearchSource findRelatedTests" name="excludes untested files from coverage" time="0.017">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="returns empty search result for empty input" time="0.018">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="returns empty search result for invalid input" time="0.014">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="returns empty search result if no related tests were found" time="0.015">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="finds tests for a single file" time="0.024">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="finds tests for multiple files" time="0.015">
    </testcase>
    <testcase classname="SearchSource findRelatedTestsFromPattern" name="does not mistake roots folders with prefix names" time="0.029">
    </testcase>
    <testcase classname="SearchSource findRelatedSourcesFromTestsInChangedFiles" name="return empty set if no SCM" time="0.022">
    </testcase>
    <testcase classname="SearchSource findRelatedSourcesFromTestsInChangedFiles" name="return sources required by tests" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/matchers.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:59" time="0.862" tests="592">
    <testcase classname="" name="should throw if passed two arguments" time="0.046">
    </testcase>
    <testcase classname=".rejects" name="should reject" time="0.002">
    </testcase>
    <testcase classname=".rejects" name="should reject with toThrow" time="0.001">
    </testcase>
    <testcase classname=".rejects" name="should reject async function to toThrow" time="0.001">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value &quot;a&quot; synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value &quot;a&quot;" time="0.002">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value [1] synchronously" time="0.001">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value [1]" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value [Function anonymous] synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value [Function anonymous]" time="0.007">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value {&quot;a&quot;: 1} synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value {&quot;a&quot;: 1}" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value 4 synchronously" time="0.001">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value 4" time="0.003">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value null synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value null" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value true synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value true" time="0.001">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value undefined synchronously" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails non-promise value undefined" time="0">
    </testcase>
    <testcase classname=".rejects" name="fails for promise that resolves" time="0.004">
    </testcase>
    <testcase classname=".resolves" name="should resolve" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value &quot;a&quot; synchronously" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value &quot;a&quot;" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value [1] synchronously" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value [1]" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value [Function anonymous] synchronously" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value [Function anonymous]" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value {&quot;a&quot;: 1} synchronously" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value {&quot;a&quot;: 1}" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value 4 synchronously" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value 4" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value null synchronously" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value null" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value true synchronously" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value true" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value undefined synchronously" time="0.001">
    </testcase>
    <testcase classname=".resolves" name="fails non-promise value undefined" time="0">
    </testcase>
    <testcase classname=".resolves" name="fails for promise that rejects" time="0">
    </testcase>
    <testcase classname=".toBe()" name="does not throw" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: 1 and 2" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: true and false" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: [Function anonymous] and [Function anonymous]" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {} and {}" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {&quot;a&quot;: 1} and {&quot;a&quot;: 1}" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {&quot;a&quot;: 1} and {&quot;a&quot;: 5}" time="0.002">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {&quot;a&quot;: [Function a], &quot;b&quot;: 2} and {&quot;a&quot;: Any&lt;Function&gt;, &quot;b&quot;: 2}" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {&quot;a&quot;: undefined, &quot;b&quot;: 2} and {&quot;b&quot;: 2}" time="0.008">
    </testcase>
    <testcase classname=".toBe()" name="fails for: 2020-02-20T00:00:00.000Z and 2020-02-20T00:00:00.000Z" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: 2020-02-21T00:00:00.000Z and 2020-02-20T00:00:00.000Z" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: /received/ and /expected/" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: Symbol(received) and Symbol(expected)" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: [Error: received] and [Error: expected]" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: &quot;abc&quot; and &quot;cde&quot;" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: &quot;painless JavaScript testing&quot; and &quot;delightful JavaScript testing&quot;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: &quot;&quot; and &quot;compare one-line string to empty string&quot;" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: &quot;with 
trailing space&quot; and &quot;without trailing space&quot;" time="0.008">
    </testcase>
    <testcase classname=".toBe()" name="fails for: &quot;four
4
line
string&quot; and &quot;3
line
string&quot;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: [] and []" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: null and undefined" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: -0 and 0" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for: 1n and 2n" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for: {&quot;a&quot;: 1n} and {&quot;a&quot;: 1n}" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;false&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;1&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;&quot;a&quot;&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;undefined&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;null&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;{}&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;[]&apos; with &apos;.not&apos;" time="0.001">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;1n&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="fails for &apos;1n&apos; with &apos;.not&apos;" time="0">
    </testcase>
    <testcase classname=".toBe()" name="does not crash on circular references" time="0">
    </testcase>
    <testcase classname=".toBe()" name="assertion error matcherResult property contains matcher name, expected and actual values" time="0.001">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not ignore keys with undefined values" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not ignore keys with undefined values inside an array" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not ignore keys with undefined values deep inside an object" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="passes when comparing same type" time="0.001">
    </testcase>
    <testcase classname=".toStrictEqual()" name="matches the expected snapshot when it fails" time="0.001">
    </testcase>
    <testcase classname=".toStrictEqual()" name="displays substring diff" time="0.003">
    </testcase>
    <testcase classname=".toStrictEqual()" name="displays substring diff for multiple lines" time="0.001">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not pass for different types" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not simply compare constructor names" time="0.001">
    </testcase>
    <testcase classname=".toStrictEqual()" name="passes for matching sparse arrays" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not pass when sparseness of arrays do not match" time="0">
    </testcase>
    <testcase classname=".toStrictEqual()" name="does not pass when equally sparse arrays have different values" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(true).toEqual(false)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(1).toEqual(2)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(0).toEqual(-0)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(0).toEqual(5e-324)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(5e-324).toEqual(0)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(0).toEqual({})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({}).toEqual(0)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({}).toEqual({})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;abc&quot;).toEqual({&quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot;}).toEqual(&quot;abc&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(/abc/gsy).toEqual(/abc/g)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;a&quot;: 1}).toEqual({&quot;a&quot;: 2})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;a&quot;: 5}).toEqual({&quot;b&quot;: 6})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;foo&quot;: {&quot;bar&quot;: 1}}).toEqual({&quot;foo&quot;: {}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;getterAndSetter&quot;: {}}).toEqual({&quot;getterAndSetter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;frozenGetterAndSetter&quot;: {}}).toEqual({&quot;frozenGetterAndSetter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;getter&quot;: {}}).toEqual({&quot;getter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;frozenGetter&quot;: {}}).toEqual({&quot;frozenGetter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;setter&quot;: undefined}).toEqual({&quot;setter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;frozenSetter&quot;: undefined}).toEqual({&quot;frozenSetter&quot;: {&quot;foo&quot;: &quot;bar&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;banana&quot;).toEqual(&quot;apple&quot;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;1 234,57 $&quot;).toEqual(&quot;1 234,57 $&quot;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;type TypeName&lt;T&gt; = T extends Function ? \&quot;function\&quot; : \&quot;object\&quot;;&quot;).toEqual(&quot;type TypeName&lt;T&gt; = T extends Function
? \&quot;function\&quot;
: \&quot;object\&quot;;&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(null).toEqual(undefined)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect([1]).toEqual([2])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect([1, 2]).toEqual([2, 1])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.List [1]).toEqual(Immutable.List [2])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.List [1, 2]).toEqual(Immutable.List [2, 1])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {}).toEqual(Set {})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Set {1, 2}).toEqual(Set {})" time="0.002">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Set {1, 2}).toEqual(Set {1, 2, 3})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [3]})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Set {[1], [2]}).toEqual(Set {[1], [2], [2]})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Set {Set {1}, Set {2}}).toEqual(Set {Set {1}, Set {3}})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.Set [1, 2]).toEqual(Immutable.Set [1, 2, 3])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.OrderedSet [1, 2]).toEqual(Immutable.OrderedSet [2, 1])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {1 =&gt; &quot;one&quot;, 2 =&gt; &quot;two&quot;}).toEqual(Map {1 =&gt; &quot;one&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {&quot;a&quot; =&gt; 0}).toEqual(Map {&quot;b&quot; =&gt; 0})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {&quot;v&quot; =&gt; 1}).toEqual(Map {&quot;v&quot; =&gt; 2})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {[&quot;v&quot;] =&gt; 1}).toEqual(Map {[&quot;v&quot;] =&gt; 2})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Map {[1] =&gt; Map {[1] =&gt; &quot;one&quot;}}).toEqual(Map {[1] =&gt; Map {[1] =&gt; &quot;two&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.Map {&quot;a&quot;: 0}).toEqual(Immutable.Map {&quot;b&quot;: 0})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.Map {&quot;v&quot;: 1}).toEqual(Immutable.Map {&quot;v&quot;: 2})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.OrderedMap {1: &quot;one&quot;, 2: &quot;two&quot;}).toEqual(Immutable.OrderedMap {2: &quot;two&quot;, 1: &quot;one&quot;})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(Immutable.Map {&quot;1&quot;: Immutable.Map {&quot;2&quot;: {&quot;a&quot;: 99}}}).toEqual(Immutable.Map {&quot;1&quot;: Immutable.Map {&quot;2&quot;: {&quot;a&quot;: 11}}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect([97, 98, 99]).toEqual([97, 98, 100])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;a&quot;: 1, &quot;b&quot;: 2}).toEqual(ObjectContaining {&quot;a&quot;: 2})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(false).toEqual(ObjectContaining {&quot;a&quot;: 2})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect([1, 3]).toEqual(ArrayContaining [1, 2])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(1).toEqual(ArrayContaining [1, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;abd&quot;).toEqual(StringContaining &quot;bc&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;abd&quot;).toEqual(StringMatching /bc/i)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(undefined).toEqual(Anything)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(undefined).toEqual(Any&lt;Function&gt;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(&quot;Eve&quot;).toEqual({&quot;asymmetricMatch&quot;: [Function asymmetricMatch]})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;target&quot;: {&quot;nodeType&quot;: 1, &quot;value&quot;: &quot;a&quot;}}).toEqual({&quot;target&quot;: {&quot;nodeType&quot;: 1, &quot;value&quot;: &quot;b&quot;}})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({&quot;nodeName&quot;: &quot;div&quot;, &quot;nodeType&quot;: 1}).toEqual({&quot;nodeName&quot;: &quot;p&quot;, &quot;nodeType&quot;: 1})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect({Symbol(foo): 1, Symbol(bar): 2}).toEqual({Symbol(foo): Any&lt;Number&gt;, Symbol(bar): 1})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(1n).toEqual(2n)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: false} expect(1n).toEqual(1)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(true).not.toEqual(true)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(1).not.toEqual(1)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(NaN).not.toEqual(NaN)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(0).not.toEqual(0)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(0).not.toEqual(0)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({}).not.toEqual({})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;abc&quot;).not.toEqual(&quot;abc&quot;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;abc&quot;).not.toEqual(&quot;abc&quot;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;abc&quot;).not.toEqual(&quot;abc&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([1]).not.toEqual([1])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([1, 2]).not.toEqual([1, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.List [1]).not.toEqual(Immutable.List [1])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.List [1, 2]).not.toEqual(Immutable.List [1, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({}).not.toEqual({})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({&quot;a&quot;: 99}).not.toEqual({&quot;a&quot;: 99})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {}).not.toEqual(Set {})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {1, 2}).not.toEqual(Set {1, 2})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {1, 2}).not.toEqual(Set {2, 1})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {[1], [2]}).not.toEqual(Set {[2], [1]})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {Set {[1]}, Set {[2]}}).not.toEqual(Set {Set {[2]}, Set {[1]}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {[1], [2], [3], [3]}).not.toEqual(Set {[3], [3], [2], [1]})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {{&quot;a&quot;: 1}, {&quot;b&quot;: 2}}).not.toEqual(Set {{&quot;b&quot;: 2}, {&quot;a&quot;: 1}})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Set []).not.toEqual(Immutable.Set [])" time="0.007">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [1, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Set [1, 2]).not.toEqual(Immutable.Set [2, 1])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.OrderedSet []).not.toEqual(Immutable.OrderedSet [])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.OrderedSet [1, 2]).not.toEqual(Immutable.OrderedSet [1, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {}).not.toEqual(Map {})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {1 =&gt; &quot;one&quot;, 2 =&gt; &quot;two&quot;}).not.toEqual(Map {1 =&gt; &quot;one&quot;, 2 =&gt; &quot;two&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {1 =&gt; &quot;one&quot;, 2 =&gt; &quot;two&quot;}).not.toEqual(Map {2 =&gt; &quot;two&quot;, 1 =&gt; &quot;one&quot;})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {[1] =&gt; &quot;one&quot;, [2] =&gt; &quot;two&quot;, [3] =&gt; &quot;three&quot;, [3] =&gt; &quot;four&quot;}).not.toEqual(Map {[3] =&gt; &quot;three&quot;, [3] =&gt; &quot;four&quot;, [2] =&gt; &quot;two&quot;, [1] =&gt; &quot;one&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {[1] =&gt; Map {[1] =&gt; &quot;one&quot;}, [2] =&gt; Map {[2] =&gt; &quot;two&quot;}}).not.toEqual(Map {[2] =&gt; Map {[2] =&gt; &quot;two&quot;}, [1] =&gt; Map {[1] =&gt; &quot;one&quot;}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {[1] =&gt; &quot;one&quot;, [2] =&gt; &quot;two&quot;}).not.toEqual(Map {[2] =&gt; &quot;two&quot;, [1] =&gt; &quot;one&quot;})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {{&quot;a&quot;: 1} =&gt; &quot;one&quot;, {&quot;b&quot;: 2} =&gt; &quot;two&quot;}).not.toEqual(Map {{&quot;b&quot;: 2} =&gt; &quot;two&quot;, {&quot;a&quot;: 1} =&gt; &quot;one&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Map {1 =&gt; [&quot;one&quot;], 2 =&gt; [&quot;two&quot;]}).not.toEqual(Map {2 =&gt; [&quot;two&quot;], 1 =&gt; [&quot;one&quot;]})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Map {}).not.toEqual(Immutable.Map {})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Map {1: &quot;one&quot;, 2: &quot;two&quot;}).not.toEqual(Immutable.Map {1: &quot;one&quot;, 2: &quot;two&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Map {1: &quot;one&quot;, 2: &quot;two&quot;}).not.toEqual(Immutable.Map {2: &quot;two&quot;, 1: &quot;one&quot;})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.OrderedMap {1: &quot;one&quot;, 2: &quot;two&quot;}).not.toEqual(Immutable.OrderedMap {1: &quot;one&quot;, 2: &quot;two&quot;})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.Map {&quot;1&quot;: Immutable.Map {&quot;2&quot;: {&quot;a&quot;: 99}}}).not.toEqual(Immutable.Map {&quot;1&quot;: Immutable.Map {&quot;2&quot;: {&quot;a&quot;: 99}}})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([97, 98, 99]).not.toEqual([97, 98, 99])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({&quot;a&quot;: 1, &quot;b&quot;: 2}).not.toEqual(ObjectContaining {&quot;a&quot;: 1})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([1, 2, 3]).not.toEqual(ArrayContaining [2, 3])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;abcd&quot;).not.toEqual(StringContaining &quot;bc&quot;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;abcd&quot;).not.toEqual(StringMatching /bc/)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(true).not.toEqual(Anything)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([Function anonymous]).not.toEqual(Any&lt;Function&gt;)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({&quot;a&quot;: 1, &quot;b&quot;: [Function b], &quot;c&quot;: true}).not.toEqual({&quot;a&quot;: 1, &quot;b&quot;: Any&lt;Function&gt;, &quot;c&quot;: Anything})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(&quot;Alice&quot;).not.toEqual({&quot;asymmetricMatch&quot;: [Function asymmetricMatch]})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({&quot;nodeName&quot;: &quot;div&quot;, &quot;nodeType&quot;: 1}).not.toEqual({&quot;nodeName&quot;: &quot;div&quot;, &quot;nodeType&quot;: 1})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({Symbol(foo): 1, Symbol(bar): 2}).not.toEqual({Symbol(foo): Any&lt;Number&gt;, Symbol(bar): 2})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(1n).not.toEqual(1n)" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(0n).not.toEqual(0n)" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([1n]).not.toEqual([1n])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect([1n, 2]).not.toEqual([1n, 2])" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Immutable.List [1n]).not.toEqual(Immutable.List [1n])" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect({&quot;a&quot;: 99n}).not.toEqual({&quot;a&quot;: 99n})" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="{pass: true} expect(Set {1n, 2n}).not.toEqual(Set {1n, 2n})" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="assertion error matcherResult property contains matcher name, expected and actual values" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="symbol based keys in arrays are processed correctly" time="0.001">
    </testcase>
    <testcase classname=".toEqual()" name="non-enumerable members should be skipped during equal" time="0">
    </testcase>
    <testcase classname=".toEqual()" name="non-enumerable symbolic members should be skipped during equal" time="0">
    </testcase>
    <testcase classname=".toEqual() cyclic object equality" name="properties with the same circularity are equal" time="0">
    </testcase>
    <testcase classname=".toEqual() cyclic object equality" name="properties with different circularity are not equal" time="0.001">
    </testcase>
    <testcase classname=".toEqual() cyclic object equality" name="are not equal if circularity is not on the same property" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing Map {} and [Function Map]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing [] and [Function Array]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function A]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function B]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function B]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function anonymous]" time="0.002">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function B]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="passing {} and [Function name() {}]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing &quot;a&quot; and [Function String]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing 1 and [Function Number]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing true and [Function Boolean]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing {} and [Function B]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing {} and [Function A]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing undefined and [Function String]" time="0.002">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing null and [Function String]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing /\w+/ and [Function anonymous]" time="0.001">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="failing {} and [Function RegExp]" time="0">
    </testcase>
    <testcase classname=".toBeInstanceOf()" name="throws if constructor is not a function" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="does not accept arguments" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;{}&apos; is truthy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;[]&apos; is truthy" time="0.003">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;true&apos; is truthy" time="0.004">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;1&apos; is truthy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;&quot;a&quot;&apos; is truthy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;0.5&apos; is truthy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;Map {}&apos; is truthy" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;[Function anonymous]&apos; is truthy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;Infinity&apos; is truthy" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;1n&apos; is truthy" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;false&apos; is falsy" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;null&apos; is falsy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;NaN&apos; is falsy" time="0.003">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;0&apos; is falsy" time="0">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;&quot;&quot;&apos; is falsy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;undefined&apos; is falsy" time="0.001">
    </testcase>
    <testcase classname=".toBeTruthy(), .toBeFalsy()" name="&apos;0n&apos; is falsy" time="0.002">
    </testcase>
    <testcase classname=".toBeNaN()" name="{pass: true} expect(NaN).toBeNaN()" time="0.001">
    </testcase>
    <testcase classname=".toBeNaN()" name="throws" time="0.002">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;{}&apos;" time="0.001">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;[]&apos;" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;true&apos;" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;1&apos;" time="0.001">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;&quot;a&quot;&apos;" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;0.5&apos;" time="0.002">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;Map {}&apos;" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;[Function anonymous]&apos;" time="0.001">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for &apos;Infinity&apos;" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="fails for null with .not" time="0">
    </testcase>
    <testcase classname=".toBeNull()" name="pass for null" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;{}&apos; is defined" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;[]&apos; is defined" time="0.001">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;true&apos; is defined" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;1&apos; is defined" time="0.001">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;&quot;a&quot;&apos; is defined" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;0.5&apos; is defined" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;Map {}&apos; is defined" time="0.001">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;[Function anonymous]&apos; is defined" time="0">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;Infinity&apos; is defined" time="0.001">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="&apos;1n&apos; is defined" time="0.001">
    </testcase>
    <testcase classname=".toBeDefined(), .toBeUndefined()" name="undefined is undefined" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1).toBeLessThan(2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2).toBeLessThan(1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2).toBeGreaterThan(1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1).toBeGreaterThan(2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1).toBeLessThanOrEqual(2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2).toBeLessThanOrEqual(1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2).toBeGreaterThanOrEqual(1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1).toBeGreaterThanOrEqual(2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [1, 2]" time="0.002">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(-Infinity).toBeLessThan(Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(Infinity).toBeLessThan(-Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(Infinity).toBeGreaterThan(-Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(-Infinity).toBeGreaterThan(Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(-Infinity).toBeLessThanOrEqual(Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(Infinity).toBeLessThanOrEqual(-Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(Infinity).toBeGreaterThanOrEqual(-Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(-Infinity).toBeGreaterThanOrEqual(Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [-Infinity, Infinity]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(5e-324).toBeLessThan(1.7976931348623157e+308)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1.7976931348623157e+308).toBeLessThan(5e-324)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1.7976931348623157e+308).toBeGreaterThan(5e-324)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(5e-324).toBeGreaterThan(1.7976931348623157e+308)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(5e-324).toBeLessThanOrEqual(1.7976931348623157e+308)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1.7976931348623157e+308).toBeLessThanOrEqual(5e-324)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1.7976931348623157e+308).toBeGreaterThanOrEqual(5e-324)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(5e-324).toBeGreaterThanOrEqual(1.7976931348623157e+308)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [5e-324, 1.7976931348623157e+308]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(17).toBeLessThan(34)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(34).toBeLessThan(17)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(34).toBeGreaterThan(17)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(17).toBeGreaterThan(34)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(17).toBeLessThanOrEqual(34)" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(34).toBeLessThanOrEqual(17)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(34).toBeGreaterThanOrEqual(17)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(17).toBeGreaterThanOrEqual(34)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [17, 34]" time="0.003">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(3).toBeLessThan(7)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(7).toBeLessThan(3)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(7).toBeGreaterThan(3)" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(3).toBeGreaterThan(7)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(3).toBeLessThanOrEqual(7)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(7).toBeLessThanOrEqual(3)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(7).toBeGreaterThanOrEqual(3)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(3).toBeGreaterThanOrEqual(7)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [3, 7]" time="0.002">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(9).toBeLessThan(18)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(18).toBeLessThan(9)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(18).toBeGreaterThan(9)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(9).toBeGreaterThan(18)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(9).toBeLessThanOrEqual(18)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(18).toBeLessThanOrEqual(9)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(18).toBeGreaterThanOrEqual(9)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(9).toBeGreaterThanOrEqual(18)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [9, 18]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(0.1).toBeLessThan(0.2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(0.2).toBeLessThan(0.1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(0.2).toBeGreaterThan(0.1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(0.1).toBeGreaterThan(0.2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(0.1).toBeLessThanOrEqual(0.2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(0.2).toBeLessThanOrEqual(0.1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(0.2).toBeGreaterThanOrEqual(0.1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(0.1).toBeGreaterThanOrEqual(0.2)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [0.1, 0.2]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="can compare BigInt to Numbers" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1n).toBeLessThan(2n)" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2n).toBeLessThan(1n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2n).toBeGreaterThan(1n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1n).toBeGreaterThan(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(1n).toBeLessThanOrEqual(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2n).toBeLessThanOrEqual(1n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2n).toBeGreaterThanOrEqual(1n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(1n).toBeGreaterThanOrEqual(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [1n, 2n]" time="0.002">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(17n).toBeLessThan(34n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(34n).toBeLessThan(17n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(34n).toBeGreaterThan(17n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(17n).toBeGreaterThan(34n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(17n).toBeLessThanOrEqual(34n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(34n).toBeLessThanOrEqual(17n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(34n).toBeGreaterThanOrEqual(17n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(17n).toBeGreaterThanOrEqual(34n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [17n, 34n]" time="0.003">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(-1).toBeLessThan(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2n).toBeLessThan(-1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2n).toBeGreaterThan(-1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(-1).toBeGreaterThan(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(-1).toBeLessThanOrEqual(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(2n).toBeLessThanOrEqual(-1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: true} expect(2n).toBeGreaterThanOrEqual(-1)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="{pass: false} expect(-1).toBeGreaterThanOrEqual(2n)" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="throws: [-1, 2n]" time="0.002">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [1, 1]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [5e-324, 5e-324]" time="0.008">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [1.7976931348623157e+308, 1.7976931348623157e+308]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [Infinity, Infinity]" time="0">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [-Infinity, -Infinity]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [1, 1]" time="0.001">
    </testcase>
    <testcase classname=".toBeGreaterThan(), .toBeLessThan(), .toBeGreaterThanOrEqual(), .toBeLessThanOrEqual()" name="equal numbers: [9007199254740991, 9007199254740991]" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="iterable" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1, 2, 3, 4]&apos; contains &apos;1&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]&apos; contains &apos;&quot;a&quot;&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[undefined, null]&apos; contains &apos;null&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[undefined, null]&apos; contains &apos;undefined&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[Symbol(a)]&apos; contains &apos;Symbol(a)&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;&quot;abcdef&quot;&apos; contains &apos;&quot;abc&quot;&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;&quot;11112111&quot;&apos; contains &apos;&quot;2&quot;&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;Set {&quot;abc&quot;, &quot;def&quot;}&apos; contains &apos;&quot;abc&quot;&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[0, 1]&apos; contains &apos;1&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1n, 2n, 3n, 4n]&apos; contains &apos;1n&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1, 2, 3, 3n, 4]&apos; contains &apos;3n&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1, 2, 3]&apos; does not contain &apos;4&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[null, undefined]&apos; does not contain &apos;1&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[{}, []]&apos; does not contain &apos;[]&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[{}, []]&apos; does not contain &apos;{}&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1n, 2n, 3n]&apos; does not contain &apos;3&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="error cases" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[1, 2, 3, 4]&apos; contains a value equal to &apos;1&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]&apos; contains a value equal to &apos;&quot;a&quot;&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[undefined, null]&apos; contains a value equal to &apos;null&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[undefined, null]&apos; contains a value equal to &apos;undefined&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[Symbol(a)]&apos; contains a value equal to &apos;Symbol(a)&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[{&quot;a&quot;: &quot;b&quot;}, {&quot;a&quot;: &quot;c&quot;}]&apos; contains a value equal to &apos;{&quot;a&quot;: &quot;b&quot;}&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;Set {1, 2, 3, 4}&apos; contains a value equal to &apos;1&apos;" time="0.001">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[0, 1]&apos; contains a value equal to &apos;1&apos;" time="0">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="&apos;[{&quot;a&quot;: &quot;b&quot;}, {&quot;a&quot;: &quot;c&quot;}]&apos; does not contain a value equal to&apos;{&quot;a&quot;: &quot;d&quot;}&apos;" time="0.002">
    </testcase>
    <testcase classname=".toContain(), .toContainEqual()" name="error cases for toContainEqual" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(0).toBeCloseTo(0)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(0).toBeCloseTo(0.001)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(1.23).toBeCloseTo(1.229)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(1.23).toBeCloseTo(1.226)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(1.23).toBeCloseTo(1.225)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(1.23).toBeCloseTo(1.234)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(Infinity).toBeCloseTo(Infinity)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(-Infinity).toBeCloseTo(-Infinity)" time="0.003">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(0).toBeCloseTo(0.01)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(1).toBeCloseTo(1.23)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(1.23).toBeCloseTo(1.2249999)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(Infinity).toBeCloseTo(-Infinity)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(Infinity).toBeCloseTo(1.23)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(-Infinity).toBeCloseTo(-1.23)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(3.141592e-7).toBeCloseTo(3e-7, 8)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: false} expect(56789).toBeCloseTo(51234, -4)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(0).toBeCloseTo(0.1, 0)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(0).toBeCloseTo(0.0001, 3)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(0).toBeCloseTo(0.000004, 5)" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo" name="{pass: true} expect(2.0000002).toBeCloseTo(2, 5)" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise empty isNot false received" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise empty isNot true expected" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise rejects isNot false expected" time="0.001">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise rejects isNot true received" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise resolves isNot false received" time="0">
    </testcase>
    <testcase classname=".toBeCloseTo throws: Matcher error" name="promise resolves isNot true expected" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="{pass: true} expect(foo).toMatch(foo)" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="{pass: true} expect(Foo bar).toMatch(/^foo/i)" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws: [bar, foo]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws: [bar, /foo/]" time="0.001">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [1, &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [{}, &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [[], &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [true, &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [/foo/i, &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [[Function anonymous], &quot;foo&quot;]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String actual value passed: [undefined, &quot;foo&quot;]" time="0.001">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, 1]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, {}]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, []]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, true]" time="0.001">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, [Function anonymous]]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="throws if non String/RegExp expected value passed: [&quot;foo&quot;, undefined]" time="0">
    </testcase>
    <testcase classname=".toMatch()" name="escapes strings properly" time="0.001">
    </testcase>
    <testcase classname=".toMatch()" name="does not maintain RegExp state between calls" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect([1, 2]).toHaveLength(2)" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect([]).toHaveLength(0)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect([&quot;a&quot;, &quot;b&quot;]).toHaveLength(2)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect(&quot;abc&quot;).toHaveLength(3)" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect(&quot;&quot;).toHaveLength(0)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: true} expect([Function anonymous]).toHaveLength(0)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: false} expect([1, 2]).toHaveLength(3)" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: false} expect([]).toHaveLength(1)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: false} expect([&quot;a&quot;, &quot;b&quot;]).toHaveLength(99)" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: false} expect(&quot;abc&quot;).toHaveLength(66)" time="0">
    </testcase>
    <testcase classname=".toHaveLength" name="{pass: false} expect(&quot;&quot;).toHaveLength(1)" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength" name="error cases" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength matcher error expected length" name="not number" time="0">
    </testcase>
    <testcase classname=".toHaveLength matcher error expected length" name="number Infinity" time="0.001">
    </testcase>
    <testcase classname=".toHaveLength matcher error expected length" name="number NaN" time="0">
    </testcase>
    <testcase classname=".toHaveLength matcher error expected length" name="number float" time="0">
    </testcase>
    <testcase classname=".toHaveLength matcher error expected length" name="number negative integer" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a.b.c.d&apos;, 1)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a,b,c,d&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a.b.c.d&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: [1, 2, 3]}}).toHaveProperty(&apos;a,b,1&apos;, 2)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: [1, 2, 3]}}).toHaveProperty(&apos;a,b,1&apos;, Any&lt;Number&gt;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: 0}).toHaveProperty(&apos;a&apos;, 0)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: undefined}}).toHaveProperty(&apos;a.b&apos;, undefined)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {}}).toHaveProperty(&apos;a.b&apos;, undefined)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: 5}}}).toHaveProperty(&apos;a.b&apos;, {&quot;c&quot;: 5})" time="0.002">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;property&quot;: 1}).toHaveProperty(&apos;property&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({}).toHaveProperty(&apos;a&apos;, undefined)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({}).toHaveProperty(&apos;b&apos;, &quot;b&quot;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({}).toHaveProperty(&apos;setter&apos;, undefined)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;val&quot;: true}).toHaveProperty(&apos;a&apos;, undefined)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;val&quot;: true}).toHaveProperty(&apos;c&apos;, &quot;c&quot;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;val&quot;: true}).toHaveProperty(&apos;val&apos;, true)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;nodeName&quot;: &quot;DIV&quot;}).toHaveProperty(&apos;nodeType&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect(&quot;&quot;).toHaveProperty(&apos;length&apos;, 0)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect([Function memoized]).toHaveProperty(&apos;memo&apos;, [])" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a.b.ttt.d&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a.b.c.d&apos;, 2)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a.b.c.d&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;, 2)" time="0.002">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a.b.c.d&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;, 2)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;children&quot;: [&quot;\&quot;That cartoon\&quot;&quot;], &quot;props&quot;: null, &quot;type&quot;: &quot;p&quot;}).toHaveProperty(&apos;children,0&apos;, &quot;\&quot;That cat cartoon\&quot;&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;children&quot;: [&quot;Roses are red.
Violets are blue.
Testing with Jest is good for you.&quot;], &quot;props&quot;: null, &quot;type&quot;: &quot;pre&quot;}).toHaveProperty(&apos;children,0&apos;, &quot;Roses are red, violets are blue.
Testing with Jest
Is good for you.&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a,b,c,d&apos;, 2)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {}}}}).toHaveProperty(&apos;a.b.c.d&apos;, 1)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;, 5)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({}).toHaveProperty(&apos;a&apos;, &quot;test&quot;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: 3}}).toHaveProperty(&apos;a.b&apos;, undefined)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(1).toHaveProperty(&apos;a.b.c&apos;, &quot;test&quot;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(&quot;abc&quot;).toHaveProperty(&apos;a.b.c&apos;, {&quot;a&quot;: 5})" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: 5}}}).toHaveProperty(&apos;a.b&apos;, {&quot;c&quot;: 4})" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({}).toHaveProperty(&apos;a&apos;, &quot;a&quot;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({}).toHaveProperty(&apos;b&apos;, undefined)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a.b.c.d&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;d&quot;: 1}}}}).toHaveProperty(&apos;a,b,c,d&apos;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a.b.c.d&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: [1, 2, 3]}}).toHaveProperty(&apos;a,b,1&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: 0}).toHaveProperty(&apos;a&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: true} expect({&quot;a&quot;: {&quot;b&quot;: undefined}}).toHaveProperty(&apos;a.b&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {}}}}).toHaveProperty(&apos;a.b.c.d&apos;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;a&quot;: 1}).toHaveProperty(&apos;a.b.c.d&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({}).toHaveProperty(&apos;a&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(1).toHaveProperty(&apos;a.b.c&apos;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(&quot;abc&quot;).toHaveProperty(&apos;a.b.c&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(false).toHaveProperty(&apos;key&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(0).toHaveProperty(&apos;key&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(&quot;&quot;).toHaveProperty(&apos;key&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect(Symbol()).toHaveProperty(&apos;key&apos;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{pass: false} expect({&quot;key&quot;: 1}).toHaveProperty(&apos;not&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect(null).toHaveProperty(&apos;a.b&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect(undefined).toHaveProperty(&apos;a&apos;)" time="0.001">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect({&quot;a&quot;: {&quot;b&quot;: {}}}).toHaveProperty(&apos;undefined&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect({&quot;a&quot;: {&quot;b&quot;: {}}}).toHaveProperty(&apos;null&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect({&quot;a&quot;: {&quot;b&quot;: {}}}).toHaveProperty(&apos;1&apos;)" time="0">
    </testcase>
    <testcase classname=".toHaveProperty()" name="{error} expect({}).toHaveProperty(&apos;&apos;)" time="0.001">
    </testcase>
    <testcase classname="toMatchObject() circular references simple circular references" name="{pass: true} expect({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]}).toMatchObject({})" time="0.003">
    </testcase>
    <testcase classname="toMatchObject() circular references simple circular references" name="{pass: true} expect({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]})" time="0">
    </testcase>
    <testcase classname="toMatchObject() circular references simple circular references" name="{pass: false} expect({}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject() circular references simple circular references" name="{pass: false} expect({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]}).toMatchObject({&quot;a&quot;: &quot;world&quot;, &quot;ref&quot;: [Circular]})" time="0">
    </testcase>
    <testcase classname="toMatchObject() circular references simple circular references" name="{pass: false} expect({&quot;ref&quot;: &quot;not a ref&quot;}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;ref&quot;: [Circular]})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject() circular references transitive circular references" name="{pass: true} expect({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}}).toMatchObject({})" time="0">
    </testcase>
    <testcase classname="toMatchObject() circular references transitive circular references" name="{pass: true} expect({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject() circular references transitive circular references" name="{pass: false} expect({}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}})" time="0">
    </testcase>
    <testcase classname="toMatchObject() circular references transitive circular references" name="{pass: false} expect({&quot;a&quot;: &quot;world&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}})" time="0">
    </testcase>
    <testcase classname="toMatchObject() circular references transitive circular references" name="{pass: false} expect({&quot;nestedObj&quot;: {&quot;parentObj&quot;: &quot;not the parent ref&quot;}}).toMatchObject({&quot;a&quot;: &quot;hello&quot;, &quot;nestedObj&quot;: {&quot;parentObj&quot;: [Circular]}})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}).toMatchObject({&quot;a&quot;: &quot;b&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}).toMatchObject({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;x&quot;: {&quot;r&quot;: &quot;r&quot;}, &quot;z&quot;: &quot;z&quot;}}).toMatchObject({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;z&quot;: &quot;z&quot;}})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;x&quot;: {&quot;r&quot;: &quot;r&quot;}, &quot;z&quot;: &quot;z&quot;}}).toMatchObject({&quot;t&quot;: {&quot;x&quot;: {&quot;r&quot;: &quot;r&quot;}}})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: [3, 4, 5], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: [3, 4, 5]})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: [3, 4, 5, &quot;v&quot;], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: [3, 4, 5, &quot;v&quot;]})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: 1, &quot;c&quot;: 2}).toMatchObject({&quot;a&quot;: Any&lt;Number&gt;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: {&quot;x&quot;: &quot;x&quot;, &quot;y&quot;: &quot;y&quot;}}).toMatchObject({&quot;a&quot;: {&quot;x&quot;: Any&lt;String&gt;}})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect(Set {1, 2}).toMatchObject(Set {1, 2})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect(Set {1, 2}).toMatchObject(Set {2, 1})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-11-30T00:00:00.000Z)" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: 2015-11-30T00:00:00.000Z, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: 2015-11-30T00:00:00.000Z})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: null, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: null})" time="0.002">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: undefined, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: undefined})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: [{&quot;a&quot;: &quot;a&quot;, &quot;b&quot;: &quot;b&quot;}]}).toMatchObject({&quot;a&quot;: [{&quot;a&quot;: &quot;a&quot;}]})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect([1, 2]).toMatchObject([1, 2])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: undefined}).toMatchObject({&quot;a&quot;: undefined})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect([]).toMatchObject([])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect([Error: foo]).toMatchObject([Error: foo])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect([Error: bar]).toMatchObject({&quot;message&quot;: &quot;bar&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({}).toMatchObject({&quot;a&quot;: undefined, &quot;b&quot;: &quot;b&quot;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: &quot;b&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;, Symbol(jest): &quot;jest&quot;}).toMatchObject({&quot;a&quot;: &quot;b&quot;, Symbol(jest): &quot;jest&quot;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;, Symbol(jest): &quot;jest&quot;}).toMatchObject({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;, Symbol(jest): &quot;jest&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({}).toMatchObject({&quot;a&quot;: undefined, &quot;b&quot;: &quot;b&quot;, &quot;c&quot;: &quot;c&quot;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({}).toMatchObject({&quot;d&quot;: 4})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: true} expect({&quot;a&quot;: &quot;b&quot;, &quot;toString&quot;: [Function toString]}).toMatchObject({&quot;toString&quot;: Any&lt;Function&gt;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}).toMatchObject({&quot;e&quot;: &quot;b&quot;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}).toMatchObject({&quot;a&quot;: &quot;b!&quot;, &quot;c&quot;: &quot;d&quot;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;a&quot;, &quot;c&quot;: &quot;d&quot;}).toMatchObject({&quot;a&quot;: Any&lt;Number&gt;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;x&quot;: {&quot;r&quot;: &quot;r&quot;}, &quot;z&quot;: &quot;z&quot;}}).toMatchObject({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;z&quot;: [3]}})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;, &quot;t&quot;: {&quot;x&quot;: {&quot;r&quot;: &quot;r&quot;}, &quot;z&quot;: &quot;z&quot;}}).toMatchObject({&quot;t&quot;: {&quot;l&quot;: {&quot;r&quot;: &quot;r&quot;}}})" time="0.002">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [3, 4, 5], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: [3, 4, 5, 6]})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [3, 4, 5], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: [3, 4]})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [3, 4, &quot;v&quot;], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: [&quot;v&quot;]})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [3, 4, 5], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: {&quot;b&quot;: 4}})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [3, 4, 5], &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: {&quot;b&quot;: Any&lt;String&gt;}})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect([1, 2]).toMatchObject([1, 3])" time="0.002">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect([0]).toMatchObject([-0])" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect(Set {1, 2}).toMatchObject(Set {2})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect(2015-11-30T00:00:00.000Z).toMatchObject(2015-10-10T00:00:00.000Z)" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: 2015-11-30T00:00:00.000Z, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: 2015-10-10T00:00:00.000Z})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: null, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: &quot;4&quot;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: null, &quot;b&quot;: &quot;b&quot;}).toMatchObject({&quot;a&quot;: undefined})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: undefined}).toMatchObject({&quot;a&quot;: null})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: [{&quot;a&quot;: &quot;a&quot;, &quot;b&quot;: &quot;b&quot;}]}).toMatchObject({&quot;a&quot;: [{&quot;a&quot;: &quot;c&quot;}]})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: 1, &quot;b&quot;: 1, &quot;c&quot;: 1, &quot;d&quot;: {&quot;e&quot;: {&quot;f&quot;: 555}}}).toMatchObject({&quot;d&quot;: {&quot;e&quot;: {&quot;f&quot;: 222}}})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({}).toMatchObject({&quot;a&quot;: undefined})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect([1, 2, 3]).toMatchObject([2, 3, 1])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect([1, 2, 3]).toMatchObject([1, 2, 2])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect([Error: foo]).toMatchObject([Error: bar])" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;}).toMatchObject({&quot;c&quot;: &quot;d&quot;})" time="0.004">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;, Symbol(jest): &quot;jest&quot;}).toMatchObject({&quot;a&quot;: &quot;c&quot;, Symbol(jest): Any&lt;String&gt;})" time="0.001">
    </testcase>
    <testcase classname="toMatchObject()" name="{pass: false} expect({&quot;a&quot;: &quot;b&quot;}).toMatchObject({&quot;toString&quot;: Any&lt;Function&gt;})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect(null).toMatchObject({})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect(4).toMatchObject({})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect(&quot;44&quot;).toMatchObject({})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect(true).toMatchObject({})" time="0.003">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect(undefined).toMatchObject({})" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect({}).toMatchObject(null)" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect({}).toMatchObject(4)" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect({}).toMatchObject(&quot;some string&quot;)" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect({}).toMatchObject(true)" time="0.007">
    </testcase>
    <testcase classname="toMatchObject()" name="throws expect({}).toMatchObject(undefined)" time="0">
    </testcase>
    <testcase classname="toMatchObject()" name="does not match properties up in the prototype chain" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jestRequireActual.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:00" time="1.665" tests="1">
    <testcase classname="" name="understands dependencies using jest.requireActual" time="1.614">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/watch.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="6.755" tests="80">
    <testcase classname="Watch mode flows" name="Correctly passing test path pattern" time="0.582">
    </testcase>
    <testcase classname="Watch mode flows" name="Correctly passing test name pattern" time="0.073">
    </testcase>
    <testcase classname="Watch mode flows" name="Runs Jest once by default and shows usage" time="0.06">
    </testcase>
    <testcase classname="Watch mode flows" name="Runs Jest in a non-interactive environment not showing usage" time="0.125">
    </testcase>
    <testcase classname="Watch mode flows" name="resolves relative to the package root" time="0.077">
    </testcase>
    <testcase classname="Watch mode flows" name="shows prompts for WatchPlugins in alphabetical order" time="0.072">
    </testcase>
    <testcase classname="Watch mode flows" name="shows update snapshot prompt (without interactive)" time="0.057">
    </testcase>
    <testcase classname="Watch mode flows" name="shows update snapshot prompt (with interactive)" time="0.06">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to hook into JestHook" time="0.069">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to override eligible internal plugins" time="0.061">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="forbids WatchPlugins overriding reserved internal plugins" time="0.07">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="forbids WatchPlugins overriding reserved internal plugins" time="0.058">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="forbids WatchPlugins overriding reserved internal plugins" time="0.062">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="allows WatchPlugins to override non-reserved internal plugins" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="allows WatchPlugins to override non-reserved internal plugins" time="0.062">
    </testcase>
    <testcase classname="Watch mode flows when dealing with potential watch plugin key conflicts" name="forbids third-party WatchPlugins overriding each other" time="0.078">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to be configured" time="0.07">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to hook into file system changes" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows" name="makes watch plugin initialization errors look nice" time="0.104">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.114">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.072">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.174">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.063">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.066">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.064">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.062">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.06">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.07">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.061">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.064">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.063">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.071">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.076">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.066">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.078">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.057">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.052">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.058">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.062">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.073">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.069">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.061">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.07">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.066">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.11">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.084">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.069">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.078">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.087">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.093">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.082">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.131">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.248">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.077">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.064">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.086">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.072">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.074">
    </testcase>
    <testcase classname="Watch mode flows" name="allows WatchPlugins to modify only white-listed global config keys" time="0.06">
    </testcase>
    <testcase classname="Watch mode flows" name="triggers enter on a WatchPlugin when its key is pressed" time="0.073">
    </testcase>
    <testcase classname="Watch mode flows" name="prevents Jest from handling keys when active and returns control when end is called" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;o&quot; runs test in &quot;only changed files&quot; mode" time="0.069">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;a&quot; runs test in &quot;watch all&quot; mode" time="0.062">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;ENTER&quot; reruns the tests" time="0.108">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;t&quot; reruns the tests in &quot;test name pattern&quot; mode" time="0.093">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;p&quot; reruns the tests in &quot;filename pattern&quot; mode" time="0.08">
    </testcase>
    <testcase classname="Watch mode flows" name="Can combine &quot;p&quot; and &quot;t&quot; filters" time="0.068">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;u&quot; reruns the tests in &quot;update snapshot&quot; mode" time="0.067">
    </testcase>
    <testcase classname="Watch mode flows" name="passWithNoTest should be set to true in watch mode" time="0.065">
    </testcase>
    <testcase classname="Watch mode flows" name="shows the correct usage for the f key in &quot;only failed tests&quot; mode" time="0.062">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_module_or_mock_transitive_deps.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:02" time="2.366" tests="6">
    <testcase classname="transitive dependencies" name="mocks a manually mocked and mapped module" time="0.618">
    </testcase>
    <testcase classname="transitive dependencies" name="unmocks transitive dependencies in node_modules by default" time="0.357">
    </testcase>
    <testcase classname="transitive dependencies" name="unmocks transitive dependencies in node_modules when using unmock" time="0.36">
    </testcase>
    <testcase classname="transitive dependencies" name="unmocks transitive dependencies in node_modules by default when using both patterns and unmock" time="0.415">
    </testcase>
    <testcase classname="transitive dependencies" name="mocks deep dependencies when using unmock" time="0.299">
    </testcase>
    <testcase classname="transitive dependencies" name="does not mock deep dependencies when using deepUnmock" time="0.258">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/watchFileChanges.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:03" time="1.514" tests="1">
    <testcase classname="Watch mode flows with changed files" name="should correct require new files without legacy cache" time="1.43">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/__tests__/index.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:05" time="1.145" tests="44">
    <testcase classname="HasteMap" name="exports constants" time="0.272">
    </testcase>
    <testcase classname="HasteMap" name="creates valid cache file paths" time="0.009">
    </testcase>
    <testcase classname="HasteMap" name="creates different cache file paths for different roots" time="0.009">
    </testcase>
    <testcase classname="HasteMap" name="creates different cache file paths for different dependency extractor cache keys" time="0.014">
    </testcase>
    <testcase classname="HasteMap" name="creates different cache file paths for different hasteImplModulePath cache keys" time="0.01">
    </testcase>
    <testcase classname="HasteMap" name="creates different cache file paths for different projects" time="0.022">
    </testcase>
    <testcase classname="HasteMap" name="matches files against a pattern" time="0.01">
    </testcase>
    <testcase classname="HasteMap" name="ignores files given a pattern" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="ignores vcs directories without ignore pattern" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="ignores vcs directories with ignore pattern regex" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="warn on ignore pattern except for regex" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="builds a haste map on a fresh cache" time="0.007">
    </testcase>
    <testcase classname="HasteMap builds a haste map on a fresh cache with SHA-1s" name="uses watchman: false" time="0.006">
    </testcase>
    <testcase classname="HasteMap builds a haste map on a fresh cache with SHA-1s" name="uses watchman: true" time="0.015">
    </testcase>
    <testcase classname="HasteMap" name="does not crawl native files even if requested to do so" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="retains all files if `retainAllFiles` is specified" time="0.009">
    </testcase>
    <testcase classname="HasteMap" name="warns on duplicate mock files" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="warns on duplicate module ids" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="warns on duplicate module ids only once" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="throws on duplicate module ids if &quot;throwOnModuleCollision&quot; is set to true" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="splits up modules by platform" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="does not access the file system on a warm cache with no changes" time="0.011">
    </testcase>
    <testcase classname="HasteMap" name="only does minimal file system access when files change" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="correctly handles file deletions" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="correctly handles platform-specific file additions" time="0.008">
    </testcase>
    <testcase classname="HasteMap" name="correctly handles platform-specific file deletions" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="correctly handles platform-specific file renames" time="0.005">
    </testcase>
    <testcase classname="HasteMap duplicate modules" name="recovers when a duplicate file is deleted" time="0.006">
    </testcase>
    <testcase classname="HasteMap duplicate modules" name="recovers with the correct type when a duplicate file is deleted" time="0.006">
    </testcase>
    <testcase classname="HasteMap duplicate modules" name="recovers when a duplicate module is renamed" time="0.012">
    </testcase>
    <testcase classname="HasteMap" name="discards the cache when configuration changes" time="0.006">
    </testcase>
    <testcase classname="HasteMap" name="ignores files that do not exist" time="0.053">
    </testcase>
    <testcase classname="HasteMap" name="distributes work across workers" time="0.005">
    </testcase>
    <testcase classname="HasteMap" name="tries to crawl using node as a fallback" time="0.007">
    </testcase>
    <testcase classname="HasteMap" name="tries to crawl using node as a fallback when promise fails once" time="0.01">
    </testcase>
    <testcase classname="HasteMap" name="stops crawling when both crawlers fail" time="0.005">
    </testcase>
    <testcase classname="HasteMap file system changes processing" name="provides a new set of hasteHS and moduleMap" time="0.041">
    </testcase>
    <testcase classname="HasteMap file system changes processing" name="handles several change events at once" time="0.035">
    </testcase>
    <testcase classname="HasteMap file system changes processing" name="does not emit duplicate change events" time="0.043">
    </testcase>
    <testcase classname="HasteMap file system changes processing" name="emits a change even if a file in node_modules has changed" time="0.036">
    </testcase>
    <testcase classname="HasteMap file system changes processing" name="correctly tracks changes to both platform-specific versions of a single module name" time="0.035">
    </testcase>
    <testcase classname="HasteMap file system changes processing recovery from duplicate module IDs" name="recovers when the oldest version of the duplicates is fixed" time="0.066">
    </testcase>
    <testcase classname="HasteMap file system changes processing recovery from duplicate module IDs" name="recovers when the most recent duplicate is fixed" time="0.09">
    </testcase>
    <testcase classname="HasteMap file system changes processing recovery from duplicate module IDs" name="ignore directories" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageHandlebars.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:04" time="1.873" tests="1">
    <testcase classname="" name="code coverage for Handlebars" time="1.83">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/compareDomNodes.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:06" time="1.407" tests="1">
    <testcase classname="" name="does not crash when expect involving a DOM node fails" time="1.355">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jestEnvironmentJsdom.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:06" time="1.744" tests="1">
    <testcase classname="" name="check is not leaking memory" time="1.702">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resolve.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:08" time="1.863" tests="1">
    <testcase classname="" name="resolve platform modules" time="1.764">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/snapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:21:57" time="13.899" tests="9">
    <testcase classname="Snapshot" name="stores new snapshots on the first run" time="0.959">
    </testcase>
    <testcase classname="Snapshot" name="works with escaped characters" time="2.154">
    </testcase>
    <testcase classname="Snapshot" name="works with escaped regex" time="1.375">
    </testcase>
    <testcase classname="Snapshot" name="works with template literal substitutions" time="1.52">
    </testcase>
    <testcase classname="Snapshot Validation" name="does not save snapshots in CI mode by default" time="0.89">
    </testcase>
    <testcase classname="Snapshot Validation" name="works on subsequent runs without `-u`" time="1.752">
    </testcase>
    <testcase classname="Snapshot Validation" name="deletes the snapshot if the test suite has been removed" time="1.549">
    </testcase>
    <testcase classname="Snapshot Validation" name="deletes a snapshot when a test does removes all the snapshots" time="1.766">
    </testcase>
    <testcase classname="Snapshot Validation" name="updates the snapshot when a test removes some snapshots" time="1.8">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_module_or_mock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:10" time="1.223" tests="17">
    <testcase classname="" name="mocks modules by default when using automocking" time="0.338">
    </testcase>
    <testcase classname="" name="doesn&apos;t mock modules when explicitly unmocked when using automocking" time="0.1">
    </testcase>
    <testcase classname="" name="doesn&apos;t mock modules when explicitly unmocked via a different name" time="0.045">
    </testcase>
    <testcase classname="" name="doesn&apos;t mock modules when disableAutomock() has been called" time="0.09">
    </testcase>
    <testcase classname="" name="uses manual mock when automocking on and mock is available" time="0.029">
    </testcase>
    <testcase classname="" name="does not use manual mock when automocking is off and a real module is available" time="0.02">
    </testcase>
    <testcase classname="" name="resolves mapped module names and unmocks them by default" time="0.088">
    </testcase>
    <testcase classname="" name="automocking is disabled by default" time="0.021">
    </testcase>
    <testcase classname="" name="unmocks modules in config.unmockedModulePathPatterns for tests with automock enabled when automock is false" time="0.096">
    </testcase>
    <testcase classname="" name="unmocks virtual mocks after they have been mocked previously" time="0.116">
    </testcase>
    <testcase classname="resetModules" name="resets all the modules" time="0.022">
    </testcase>
    <testcase classname="isolateModules" name="keeps it&apos;s registry isolated from global one" time="0.022">
    </testcase>
    <testcase classname="isolateModules" name="resets all modules after the block" time="0.026">
    </testcase>
    <testcase classname="isolateModules" name="resets module after failing" time="0.048">
    </testcase>
    <testcase classname="isolateModules" name="cannot nest isolateModules blocks" time="0.05">
    </testcase>
    <testcase classname="isolateModules" name="can call resetModules within a isolateModules block" time="0.025">
    </testcase>
    <testcase classname="isolateModules can use isolateModules from a beforeEach block" name="can use the required module from beforeEach and re-require it" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_mock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:10" time="0.962" tests="13">
    <testcase classname="Runtime requireMock" name="uses manual mocks before attempting to automock" time="0.281">
    </testcase>
    <testcase classname="Runtime requireMock" name="can resolve modules that are only referenced from mocks" time="0.038">
    </testcase>
    <testcase classname="Runtime requireMock" name="stores and re-uses manual mock exports" time="0.036">
    </testcase>
    <testcase classname="Runtime requireMock" name="automocks haste modules without a manual mock" time="0.077">
    </testcase>
    <testcase classname="Runtime requireMock" name="automocks relative-path modules without a file extension" time="0.043">
    </testcase>
    <testcase classname="Runtime requireMock" name="automocks relative-path modules with a file extension" time="0.036">
    </testcase>
    <testcase classname="Runtime requireMock" name="just falls back when loading a native module" time="0.031">
    </testcase>
    <testcase classname="Runtime requireMock" name="stores and re-uses automocked haste exports" time="0.031">
    </testcase>
    <testcase classname="Runtime requireMock" name="stores and re-uses automocked relative-path modules" time="0.102">
    </testcase>
    <testcase classname="Runtime requireMock" name="multiple node core modules returns correct module" time="0.074">
    </testcase>
    <testcase classname="Runtime requireMock" name="throws on non-existent haste modules" time="0.069">
    </testcase>
    <testcase classname="Runtime requireMock" name="uses manual mocks when using a custom resolver" time="0.049">
    </testcase>
    <testcase classname="Runtime requireMock" name="provides `require.main` in mock" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_node_path.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:11" time="1.088" tests="4">
    <testcase classname="Runtime" name="uses NODE_PATH to find modules" time="0.303">
    </testcase>
    <testcase classname="Runtime" name="uses modulePaths to find modules" time="0.231">
    </testcase>
    <testcase classname="Runtime" name="finds modules in NODE_PATH containing multiple paths" time="0.248">
    </testcase>
    <testcase classname="Runtime" name="does not find modules if NODE_PATH is relative" time="0.26">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_resolve.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:11" time="0.707" tests="5">
    <testcase classname="Runtime require.resolve" name="resolves a module path" time="0.292">
    </testcase>
    <testcase classname="Runtime require.resolve" name="resolves a module path with moduleNameMapper" time="0.074">
    </testcase>
    <testcase classname="Runtime require.resolve with the jest-resolve-outside-vm-option" name="forwards to the real Node require in an internal context" time="0.087">
    </testcase>
    <testcase classname="Runtime require.resolve with the jest-resolve-outside-vm-option" name="ignores the option in an external context" time="0.127">
    </testcase>
    <testcase classname="Runtime require.resolve with the jest-resolve-outside-vm-option" name="does not understand a self-constructed outsideJestVmPath in an external context" time="0.087">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-leak-detector/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:12" time="0.986" tests="6">
    <testcase classname="" name="complains if the value is a primitive" time="0.003">
    </testcase>
    <testcase classname="" name="does not show the GC if hidden" time="0.08">
    </testcase>
    <testcase classname="" name="does not hide the GC if visible" time="0.034">
    </testcase>
    <testcase classname="" name="correctly checks simple leaks" time="0.108">
    </testcase>
    <testcase classname="" name="tests different objects" time="0.445">
    </testcase>
    <testcase classname="" name="correctly checks more complex leaks" time="0.24">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jasmineAsyncWithPendingDuringTest.ts" errors="0" failures="0" skipped="1" timestamp="2021-01-24T19:22:13" time="0.072" tests="2">
    <testcase classname="async jasmine with pending during test" name="does not work on jest-circus" time="0.018">
    </testcase>
    <testcase classname="async jasmine with pending during test" name="should be reported as a pending test" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/TestScheduler.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:13" time="0.52" tests="8">
    <testcase classname="" name="config for reporters supports `default`" time="0.014">
    </testcase>
    <testcase classname="" name=".addReporter() .removeReporter()" time="0.001">
    </testcase>
    <testcase classname="" name="schedule tests run in parallel per default" time="0.004">
    </testcase>
    <testcase classname="" name="schedule tests run in serial if the runner flags them" time="0.001">
    </testcase>
    <testcase classname="" name="should bail after `n` failures" time="0.002">
    </testcase>
    <testcase classname="" name="should not bail if less than `n` failures" time="0">
    </testcase>
    <testcase classname="" name="should set runInBand to run in serial" time="0.002">
    </testcase>
    <testcase classname="" name="should set runInBand to not run in serial" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/expectInVm.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:12" time="1.527" tests="1">
    <testcase classname="" name="expect works correctly with RegExps created inside a VM" time="1.477">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_actual.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:14" time="0.478" tests="2">
    <testcase classname="Runtime requireActual" name="requires node module when manual mock exists" time="0.314">
    </testcase>
    <testcase classname="Runtime requireActual" name="requireActual with moduleNameMapper" time="0.051">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_cache.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:14" time="0.454" tests="2">
    <testcase classname="Runtime require.cache" name="require.cache returns loaded module list as native Nodejs require does" time="0.388">
    </testcase>
    <testcase classname="Runtime require.cache" name="require.cache is tolerant readonly" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_module_directories.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:14" time="0.525" tests="4">
    <testcase classname="Runtime" name="uses configured moduleDirectories" time="0.288">
    </testcase>
    <testcase classname="Runtime" name="resolves packages" time="0.047">
    </testcase>
    <testcase classname="Runtime" name="finds closest module from moduleDirectories" time="0.044">
    </testcase>
    <testcase classname="Runtime" name="only checks the configured directories" time="0.103">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_internal_module.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:14" time="0.727" tests="4">
    <testcase classname="Runtime internalModule" name="loads modules and applies transforms" time="0.17">
    </testcase>
    <testcase classname="Runtime internalModule" name="loads internal modules without applying transforms" time="0.162">
    </testcase>
    <testcase classname="Runtime internalModule" name="loads JSON modules and applies transforms" time="0.189">
    </testcase>
    <testcase classname="Runtime internalModule" name="loads internal JSON modules without applying transforms" time="0.123">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-cli/src/__tests__/cli/args.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:15" time="0.345" tests="17">
    <testcase classname="check" name="returns true if the arguments are valid" time="0.001">
    </testcase>
    <testcase classname="check" name="raises an exception if runInBand and maxWorkers are both specified" time="0.023">
    </testcase>
    <testcase classname="check" name="raises an exception if onlyChanged and watchAll are both specified" time="0.001">
    </testcase>
    <testcase classname="check" name="raises an exception if onlyFailures and watchAll are both specified" time="0.001">
    </testcase>
    <testcase classname="check" name="raises an exception when lastCommit and watchAll are both specified" time="0">
    </testcase>
    <testcase classname="check" name="raises an exception if findRelatedTests is specified with no file paths" time="0.001">
    </testcase>
    <testcase classname="check" name="raises an exception if maxWorkers is specified with no number" time="0">
    </testcase>
    <testcase classname="check" name="allows maxWorkers to be a %" time="0.001">
    </testcase>
    <testcase classname="check" name="allows using &quot;js&quot; file for --config option" time="0.01">
    </testcase>
    <testcase classname="check" name="allows using &quot;ts&quot; file for --config option" time="0">
    </testcase>
    <testcase classname="check" name="allows using &quot;mjs&quot; file for --config option" time="0">
    </testcase>
    <testcase classname="check" name="allows using &quot;cjs&quot; file for --config option" time="0.001">
    </testcase>
    <testcase classname="check" name="allows using &quot;json&quot; file for --config option" time="0">
    </testcase>
    <testcase classname="check" name="raises an exception if selectProjects is not provided any project names" time="0">
    </testcase>
    <testcase classname="check" name="raises an exception if config is not a valid JSON string" time="0.001">
    </testcase>
    <testcase classname="check" name="raises an exception if config is not a supported file type" time="0.001">
    </testcase>
    <testcase classname="buildArgv" name="should return only camelcased args " time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_jest_spy_on.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:15" time="0.521" tests="2">
    <testcase classname="Runtime jest.spyOn" name="calls the original function" time="0.395">
    </testcase>
    <testcase classname="Runtime jest.spyOnProperty" name="calls the original function" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-resolve-dependencies/src/__tests__/dependency_resolver.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:15" time="0.666" tests="11">
    <testcase classname="" name="resolves no dependencies for non-existent path" time="0.072">
    </testcase>
    <testcase classname="" name="resolves dependencies for existing path" time="0.03">
    </testcase>
    <testcase classname="" name="includes the mocks of dependencies as dependencies" time="0.067">
    </testcase>
    <testcase classname="" name="resolves dependencies for scoped packages" time="0.041">
    </testcase>
    <testcase classname="" name="resolves no inverse dependencies for empty paths set" time="0.051">
    </testcase>
    <testcase classname="" name="resolves no inverse dependencies for set of non-existent paths" time="0.041">
    </testcase>
    <testcase classname="" name="resolves inverse dependencies for existing path" time="0.027">
    </testcase>
    <testcase classname="" name="resolves inverse dependencies of mock" time="0.026">
    </testcase>
    <testcase classname="" name="resolves inverse dependencies from available snapshot" time="0.047">
    </testcase>
    <testcase classname="" name="resolves dependencies correctly when dependency resolution fails" time="0.041">
    </testcase>
    <testcase classname="" name="resolves dependencies correctly when mock dependency resolution fails" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-message-util/src/__tests__/messages.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.205" tests="11">
    <testcase classname="" name="should exclude jasmine from stack trace for Unix paths." time="0.004">
    </testcase>
    <testcase classname="" name=".formatExecError()" time="0">
    </testcase>
    <testcase classname="" name="formatStackTrace should strip node internals" time="0.001">
    </testcase>
    <testcase classname="" name="should not exclude vendor from stack trace" time="0.001">
    </testcase>
    <testcase classname="" name="retains message in babel code frame error" time="0.001">
    </testcase>
    <testcase classname="" name="codeframe" time="0.003">
    </testcase>
    <testcase classname="" name="no codeframe" time="0">
    </testcase>
    <testcase classname="" name="no stack" time="0.001">
    </testcase>
    <testcase classname="formatStackTrace" name="prints code frame and stacktrace" time="0.001">
    </testcase>
    <testcase classname="formatStackTrace" name="does not print code frame when noCodeFrame = true" time="0.001">
    </testcase>
    <testcase classname="formatStackTrace" name="does not print codeframe when noStackTrace = true" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-diff/src/__tests__/diff.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:15" time="0.625" tests="107">
    <testcase classname="different types" name="&apos;1&apos; and &apos;a&apos;" time="0">
    </testcase>
    <testcase classname="different types" name="&apos;[object Object]&apos; and &apos;a&apos;" time="0.001">
    </testcase>
    <testcase classname="different types" name="&apos;&apos; and &apos;2&apos;" time="0">
    </testcase>
    <testcase classname="different types" name="&apos;null&apos; and &apos;undefined&apos;" time="0">
    </testcase>
    <testcase classname="different types" name="&apos;() =&gt; {}&apos; and &apos;3&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;&quot;a&quot;&apos; and &apos;&quot;a&quot;&apos;" time="0.002">
    </testcase>
    <testcase classname="no visual difference" name="&apos;{}&apos; and &apos;{}&apos;" time="0.001">
    </testcase>
    <testcase classname="no visual difference" name="&apos;[]&apos; and &apos;[]&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;[1,2]&apos; and &apos;[1,2]&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;11&apos; and &apos;11&apos;" time="0.001">
    </testcase>
    <testcase classname="no visual difference" name="&apos;null&apos; and &apos;null&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;null&apos; and &apos;null&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;undefined&apos; and &apos;undefined&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;null&apos; and &apos;null&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;undefined&apos; and &apos;undefined&apos;" time="0.001">
    </testcase>
    <testcase classname="no visual difference" name="&apos;false&apos; and &apos;false&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;{&quot;a&quot;:1}&apos; and &apos;{&quot;a&quot;:1}&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="&apos;{&quot;a&quot;:{&quot;b&quot;:5}}&apos; and &apos;{&quot;a&quot;:{&quot;b&quot;:5}}&apos;" time="0">
    </testcase>
    <testcase classname="no visual difference" name="Map key order should be irrelevant" time="0.001">
    </testcase>
    <testcase classname="no visual difference" name="Set value order should be irrelevant" time="0.001">
    </testcase>
    <testcase classname="" name="oneline strings" time="0.001">
    </testcase>
    <testcase classname="falls back to not call toJSON if serialization has no differences" name="but then objects have differences" time="0.001">
    </testcase>
    <testcase classname="falls back to not call toJSON if serialization has no differences" name="and then objects have no differences" time="0">
    </testcase>
    <testcase classname="falls back to not call toJSON if it throws" name="and then objects have differences" time="0">
    </testcase>
    <testcase classname="falls back to not call toJSON if it throws" name="and then objects have no differences" time="0">
    </testcase>
    <testcase classname="multiline strings" name="(unexpanded)" time="0.001">
    </testcase>
    <testcase classname="multiline strings" name="(expanded)" time="0">
    </testcase>
    <testcase classname="objects" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="objects" name="(expanded)" time="0">
    </testcase>
    <testcase classname="" name="numbers" time="0">
    </testcase>
    <testcase classname="" name="-0 and 0" time="0">
    </testcase>
    <testcase classname="" name="booleans" time="0">
    </testcase>
    <testcase classname="multiline string non-snapshot" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="multiline string non-snapshot" name="(expanded)" time="0">
    </testcase>
    <testcase classname="multiline string snapshot" name="(unexpanded)" time="0.001">
    </testcase>
    <testcase classname="multiline string snapshot" name="(expanded)" time="0">
    </testcase>
    <testcase classname="React elements" name="(unexpanded)" time="0.001">
    </testcase>
    <testcase classname="React elements" name="(expanded)" time="0">
    </testcase>
    <testcase classname="multiline string as value of object property (non-snapshot)" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="multiline string as value of object property (non-snapshot)" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="multiline string as value of object property (snapshot)" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="multiline string as value of object property (snapshot)" name="(expanded)" time="0">
    </testcase>
    <testcase classname="indentation in JavaScript structures from less to more" name="(unexpanded)" time="0.007">
    </testcase>
    <testcase classname="indentation in JavaScript structures from less to more" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="indentation in JavaScript structures from more to less" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="indentation in JavaScript structures from more to less" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="color of text" name="(expanded)" time="0">
    </testcase>
    <testcase classname="color of text" name="(unexpanded)" time="0.001">
    </testcase>
    <testcase classname="indentation in React elements (non-snapshot) from less to more" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (non-snapshot) from less to more" name="(expanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (non-snapshot) from more to less" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (non-snapshot) from more to less" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="indentation in React elements (snapshot) from less to more" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (snapshot) from less to more" name="(expanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (snapshot) from more to less" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="indentation in React elements (snapshot) from more to less" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="outer React element (non-snapshot) from less to more" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="outer React element (non-snapshot) from less to more" name="(expanded)" time="0">
    </testcase>
    <testcase classname="outer React element (non-snapshot) from more to less" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="outer React element (non-snapshot) from more to less" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="trailing newline in multiline string not enclosed in quotes from less to more" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="trailing newline in multiline string not enclosed in quotes from less to more" name="(expanded)" time="0.001">
    </testcase>
    <testcase classname="trailing newline in multiline string not enclosed in quotes from more to less" name="(unexpanded)" time="0">
    </testcase>
    <testcase classname="trailing newline in multiline string not enclosed in quotes from more to less" name="(expanded)" time="0">
    </testcase>
    <testcase classname="" name="collapses big diffs to patch format" time="0.001">
    </testcase>
    <testcase classname="context" name="number of lines: -1 (5 default)" time="0">
    </testcase>
    <testcase classname="context" name="number of lines: 0 " time="0.001">
    </testcase>
    <testcase classname="context" name="number of lines: 1 " time="0">
    </testcase>
    <testcase classname="context" name="number of lines: 2 " time="0.001">
    </testcase>
    <testcase classname="context" name="number of lines: 3.1 (5 default)" time="0">
    </testcase>
    <testcase classname="context" name="number of lines: undefined (5 default)" time="0.001">
    </testcase>
    <testcase classname="diffLinesUnified edge cases" name="a empty string b empty string" time="0">
    </testcase>
    <testcase classname="diffLinesUnified edge cases" name="a empty string b one line" time="0">
    </testcase>
    <testcase classname="diffLinesUnified edge cases" name="a multiple lines b empty string" time="0">
    </testcase>
    <testcase classname="diffLinesUnified edge cases" name="a one line b multiple lines" time="0">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases" name="a empty string b empty string" time="0">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases" name="a empty string b one line" time="0">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases" name="a multiple lines b empty string" time="0">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases" name="a one line b multiple lines" time="0.001">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases lengths not equal" name="a" time="0">
    </testcase>
    <testcase classname="diffLinesUnified2 edge cases lengths not equal" name="b" time="0">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="empty both a and b" time="0">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="empty only a" time="0.001">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="empty only b" time="0">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="equal both non-empty" time="0.002">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="multiline has no common after clean up chaff" time="0.001">
    </testcase>
    <testcase classname="diffStringsUnified edge cases" name="one-line has no common after clean up chaff" time="0">
    </testcase>
    <testcase classname="options 7980" name="diff" time="0.001">
    </testcase>
    <testcase classname="options 7980" name="diffStringsUnified" time="0">
    </testcase>
    <testcase classname="options change indicators" name="diff" time="0">
    </testcase>
    <testcase classname="options change color" name="diffStringsUnified" time="0">
    </testcase>
    <testcase classname="options change color" name="no diff" time="0">
    </testcase>
    <testcase classname="options common" name="diff" time="0.005">
    </testcase>
    <testcase classname="options common" name="no diff" time="0.001">
    </testcase>
    <testcase classname="options includeChangeCounts false" name="diffLinesUnified" time="0.002">
    </testcase>
    <testcase classname="options includeChangeCounts false" name="diffStringsUnified" time="0">
    </testcase>
    <testcase classname="options includeChangeCounts true padding" name="diffLinesUnified a has 2 digits" time="0">
    </testcase>
    <testcase classname="options includeChangeCounts true padding" name="diffLinesUnified b has 2 digits" time="0">
    </testcase>
    <testcase classname="options includeChangeCounts true padding" name="diffStringsUnified" time="0">
    </testcase>
    <testcase classname="options omitAnnotationLines true" name="diff" time="0.001">
    </testcase>
    <testcase classname="options omitAnnotationLines true" name="diffStringsUnified and includeChangeCounts true" time="0">
    </testcase>
    <testcase classname="options omitAnnotationLines true" name="diffStringsUnified empty strings" time="0">
    </testcase>
    <testcase classname="options trailingSpaceFormatter" name="diffDefault default no color" time="0.001">
    </testcase>
    <testcase classname="options trailingSpaceFormatter" name="diffDefault middle dot" time="0">
    </testcase>
    <testcase classname="options trailingSpaceFormatter" name="diffDefault yellowish common" time="0">
    </testcase>
    <testcase classname="options emptyFirstOrLastLinePlaceholder default empty string" name="diffDefault" time="0">
    </testcase>
    <testcase classname="options emptyFirstOrLastLinePlaceholder default empty string" name="diffStringsUnified" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/watchTestNamePatternMode.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.246" tests="1">
    <testcase classname="Watch mode flows" name="Pressing &quot;T&quot; enters pattern mode" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/spyMatchers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.395" tests="248">
    <testcase classname="toBeCalled" name="works only on spies or jest.fn" time="0.001">
    </testcase>
    <testcase classname="toBeCalled" name="passes when called" time="0.001">
    </testcase>
    <testcase classname="toBeCalled" name=".not passes when called" time="0.001">
    </testcase>
    <testcase classname="toBeCalled" name="fails with any argument passed" time="0">
    </testcase>
    <testcase classname="toBeCalled" name=".not fails with any argument passed" time="0.001">
    </testcase>
    <testcase classname="toBeCalled" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalled" name="works only on spies or jest.fn" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalled" name="passes when called" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalled" name=".not passes when called" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalled" name="fails with any argument passed" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalled" name=".not fails with any argument passed" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalled" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toBeCalledTimes" name=".not works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toBeCalledTimes" name="only accepts a number argument" time="0.005">
    </testcase>
    <testcase classname="toBeCalledTimes" name=".not only accepts a number argument" time="0.002">
    </testcase>
    <testcase classname="toBeCalledTimes" name="passes if function called equal to expected times" time="0">
    </testcase>
    <testcase classname="toBeCalledTimes" name=".not passes if function called more than expected times" time="0.001">
    </testcase>
    <testcase classname="toBeCalledTimes" name=".not passes if function called less than expected times" time="0.001">
    </testcase>
    <testcase classname="toBeCalledTimes" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name=".not works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name="only accepts a number argument" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name=".not only accepts a number argument" time="0.004">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name="passes if function called equal to expected times" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name=".not passes if function called more than expected times" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name=".not passes if function called less than expected times" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledTimes" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="lastCalledWith" name="works when not called" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="lastCalledWith" name="works with arguments that don&apos;t match" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works with arguments that match" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works with trailing undefined arguments" time="0">
    </testcase>
    <testcase classname="lastCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works with Set" time="0.002">
    </testcase>
    <testcase classname="lastCalledWith" name="works with Immutable.js objects" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="works with many arguments" time="0">
    </testcase>
    <testcase classname="lastCalledWith" name="works with many arguments that don&apos;t match" time="0.001">
    </testcase>
    <testcase classname="lastCalledWith" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with no arguments" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with arguments that match" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with trailing undefined arguments" time="0">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with Immutable.js objects" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with many arguments" time="0">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="works with many arguments that don&apos;t match" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenLastCalledWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="works only on spies or jest.fn" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="works with no arguments" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works with arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="works with arguments that match" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works with trailing undefined arguments" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works with Immutable.js objects" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="works with three calls" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="positive throw matcher error for n that is not positive integer" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="positive throw matcher error for n that is not integer" time="0">
    </testcase>
    <testcase classname="nthCalledWith" name="negative throw matcher error for n that is not integer" time="0.001">
    </testcase>
    <testcase classname="nthCalledWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with no arguments" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with arguments that match" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with trailing undefined arguments" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with Immutable.js objects" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="works with three calls" time="0.002">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="positive throw matcher error for n that is not positive integer" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="positive throw matcher error for n that is not integer" time="0">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="negative throw matcher error for n that is not integer" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenNthCalledWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with no arguments" time="0.001">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with arguments that match" time="0.001">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with trailing undefined arguments" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with Immutable.js objects" time="0.001">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with many arguments" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="works with many arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toBeCalledWith" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with arguments that match" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with trailing undefined arguments" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with Immutable.js objects" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with many arguments" time="0.001">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="works with many arguments that don&apos;t match" time="0">
    </testcase>
    <testcase classname="toHaveBeenCalledWith" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toReturn" name=".not works only on jest.fn" time="0">
    </testcase>
    <testcase classname="toReturn" name="throw matcher error if received is spy" time="0">
    </testcase>
    <testcase classname="toReturn" name="passes when returned" time="0">
    </testcase>
    <testcase classname="toReturn" name="passes when undefined is returned" time="0">
    </testcase>
    <testcase classname="toReturn" name="passes when at least one call does not throw" time="0">
    </testcase>
    <testcase classname="toReturn" name=".not passes when not returned" time="0">
    </testcase>
    <testcase classname="toReturn" name=".not passes when all calls throw" time="0.001">
    </testcase>
    <testcase classname="toReturn" name=".not passes when a call throws undefined" time="0">
    </testcase>
    <testcase classname="toReturn" name="fails with any argument passed" time="0.001">
    </testcase>
    <testcase classname="toReturn" name=".not fails with any argument passed" time="0">
    </testcase>
    <testcase classname="toReturn" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toReturn" name="incomplete recursive calls are handled properly" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name=".not works only on jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name="throw matcher error if received is spy" time="0.001">
    </testcase>
    <testcase classname="toHaveReturned" name="passes when returned" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name="passes when undefined is returned" time="0.003">
    </testcase>
    <testcase classname="toHaveReturned" name="passes when at least one call does not throw" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name=".not passes when not returned" time="0.001">
    </testcase>
    <testcase classname="toHaveReturned" name=".not passes when all calls throw" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name=".not passes when a call throws undefined" time="0.001">
    </testcase>
    <testcase classname="toHaveReturned" name="fails with any argument passed" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name=".not fails with any argument passed" time="0">
    </testcase>
    <testcase classname="toHaveReturned" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toHaveReturned" name="incomplete recursive calls are handled properly" time="0">
    </testcase>
    <testcase classname="toReturnTimes" name="throw matcher error if received is spy" time="0">
    </testcase>
    <testcase classname="toReturnTimes" name="only accepts a number argument" time="0.002">
    </testcase>
    <testcase classname="toReturnTimes" name=".not only accepts a number argument" time="0.001">
    </testcase>
    <testcase classname="toReturnTimes" name="passes if function returned equal to expected times" time="0.001">
    </testcase>
    <testcase classname="toReturnTimes" name="calls that return undefined are counted as returns" time="0">
    </testcase>
    <testcase classname="toReturnTimes" name=".not passes if function returned more than expected times" time="0">
    </testcase>
    <testcase classname="toReturnTimes" name=".not passes if function called less than expected times" time="0.001">
    </testcase>
    <testcase classname="toReturnTimes" name="calls that throw are not counted" time="0">
    </testcase>
    <testcase classname="toReturnTimes" name="calls that throw undefined are not counted" time="0.002">
    </testcase>
    <testcase classname="toReturnTimes" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toReturnTimes" name="incomplete recursive calls are handled properly" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="throw matcher error if received is spy" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="only accepts a number argument" time="0.002">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name=".not only accepts a number argument" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="passes if function returned equal to expected times" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="calls that return undefined are counted as returns" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name=".not passes if function returned more than expected times" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name=".not passes if function called less than expected times" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="calls that throw are not counted" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="calls that throw undefined are not counted" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveReturnedTimes" name="incomplete recursive calls are handled properly" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="lastReturnedWith" name="works when not called" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with argument that does not match" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with argument that does match" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with undefined" time="0">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="works with Immutable.js objects indirectly created" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith" name="a call that throws is not considered to have returned" time="0">
    </testcase>
    <testcase classname="lastReturnedWith" name="a call that throws undefined is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith lastReturnedWith" name="works with three calls" time="0.001">
    </testcase>
    <testcase classname="lastReturnedWith lastReturnedWith" name="incomplete recursive calls are handled properly" time="0.005">
    </testcase>
    <testcase classname="lastReturnedWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with argument that does not match" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with argument that does match" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with undefined" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="works with Immutable.js objects indirectly created" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="a call that throws is not considered to have returned" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="a call that throws undefined is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith lastReturnedWith" name="works with three calls" time="0">
    </testcase>
    <testcase classname="toHaveLastReturnedWith lastReturnedWith" name="incomplete recursive calls are handled properly" time="0.001">
    </testcase>
    <testcase classname="toHaveLastReturnedWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="works only on spies or jest.fn" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with argument that does not match" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with argument that does match" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with undefined" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith" name="works with Immutable.js objects indirectly created" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="a call that throws is not considered to have returned" time="0">
    </testcase>
    <testcase classname="nthReturnedWith" name="a call that throws undefined is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="works with three calls" time="0">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="should replace 1st, 2nd, 3rd with first, second, third" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="positive throw matcher error for n that is not positive integer" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="should reject nth value greater than number of calls" time="0">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="positive throw matcher error for n that is not integer" time="0.001">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="negative throw matcher error for n that is not number" time="0">
    </testcase>
    <testcase classname="nthReturnedWith nthReturnedWith" name="incomplete recursive calls are handled properly" time="0.002">
    </testcase>
    <testcase classname="nthReturnedWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works when not called" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with argument that does not match" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with argument that does match" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with undefined" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with Set" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="works with Immutable.js objects indirectly created" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="a call that throws is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="a call that throws undefined is not considered to have returned" time="0.002">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="works with three calls" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="should replace 1st, 2nd, 3rd with first, second, third" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="positive throw matcher error for n that is not positive integer" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="should reject nth value greater than number of calls" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="positive throw matcher error for n that is not integer" time="0">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="negative throw matcher error for n that is not number" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith nthReturnedWith" name="incomplete recursive calls are handled properly" time="0.001">
    </testcase>
    <testcase classname="toHaveNthReturnedWith" name="includes the custom mock name in the error message" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="works only on spies or jest.fn" time="0.001">
    </testcase>
    <testcase classname="toReturnWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="works with no arguments" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="works with argument that does not match" time="0.001">
    </testcase>
    <testcase classname="toReturnWith" name="works with argument that does match" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="works with undefined" time="0.001">
    </testcase>
    <testcase classname="toReturnWith" name="works with Map" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="works with Set" time="0.002">
    </testcase>
    <testcase classname="toReturnWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="toReturnWith" name="works with Immutable.js objects indirectly created" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="a call that throws is not considered to have returned" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="a call that throws undefined is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="toReturnWith returnedWith" name="works with more calls than the limit" time="0.001">
    </testcase>
    <testcase classname="toReturnWith returnedWith" name="incomplete recursive calls are handled properly" time="0">
    </testcase>
    <testcase classname="toReturnWith" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works only on spies or jest.fn" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works when not called" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with no arguments" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with argument that does not match" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with argument that does match" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with undefined" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with Map" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with Set" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with Immutable.js objects directly created" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="works with Immutable.js objects indirectly created" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="a call that throws is not considered to have returned" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="a call that throws undefined is not considered to have returned" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith returnedWith" name="works with more calls than the limit" time="0.001">
    </testcase>
    <testcase classname="toHaveReturnedWith returnedWith" name="incomplete recursive calls are handled properly" time="0">
    </testcase>
    <testcase classname="toHaveReturnedWith" name="includes the custom mock name in the error message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jestChangedFiles.test.ts" errors="0" failures="1" skipped="0" timestamp="2021-01-24T19:22:07" time="9.045" tests="10">
    <testcase classname="" name="gets hg SCM roots and dedupes them" time="0.559">
    </testcase>
    <testcase classname="" name="gets git SCM roots and dedupes them" time="0.416">
    </testcase>
    <testcase classname="" name="gets mixed git and hg SCM roots and dedupes them" time="0.467">
    </testcase>
    <testcase classname="" name="gets changed files for git" time="2.298">
    </testcase>
    <testcase classname="" name="monitors only root paths for git" time="0.151">
    </testcase>
    <testcase classname="" name="does not find changes in files with no diff, for git" time="0.628">
    </testcase>
    <testcase classname="" name="handles a bad revision for &quot;changedSince&quot;, for git" time="0.878">
    </testcase>
    <testcase classname="" name="gets changed files for hg" time="2.219">
      <failure>Error: abort: empty revision range
    at makeError (/home/dorny/dorny/jest/node_modules/execa/lib/error.js:59:11)
    at handlePromise (/home/dorny/dorny/jest/node_modules/execa/index.js:114:26)
    at runMicrotasks (&lt;anonymous&gt;)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
    at Object.findChangedFiles (/home/dorny/dorny/jest/packages/jest-changed-files/build/hg.js:99:16)
    at async Promise.all (index 0)
    at getChangedFilesForRoots (/home/dorny/dorny/jest/packages/jest-changed-files/build/index.js:57:5)
    at Object.&lt;anonymous&gt; (/home/dorny/dorny/jest/e2e/__tests__/jestChangedFiles.test.ts:418:28)
    at _callCircusTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:218:5)
    at _runTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:155:3)</failure>
    </testcase>
    <testcase classname="" name="monitors only root paths for hg" time="0.281">
    </testcase>
    <testcase classname="" name="handles a bad revision for &quot;changedSince&quot;, for hg" time="0.949">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-matcher-utils/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.391" tests="48">
    <testcase classname="stringify()" name="[]" time="0">
    </testcase>
    <testcase classname="stringify()" name="{}" time="0.001">
    </testcase>
    <testcase classname="stringify()" name="1" time="0">
    </testcase>
    <testcase classname="stringify()" name="0" time="0">
    </testcase>
    <testcase classname="stringify()" name="1.5" time="0.001">
    </testcase>
    <testcase classname="stringify()" name="null" time="0">
    </testcase>
    <testcase classname="stringify()" name="undefined" time="0">
    </testcase>
    <testcase classname="stringify()" name="&quot;abc&quot;" time="0">
    </testcase>
    <testcase classname="stringify()" name="Symbol(abc)" time="0">
    </testcase>
    <testcase classname="stringify()" name="NaN" time="0">
    </testcase>
    <testcase classname="stringify()" name="Infinity" time="0">
    </testcase>
    <testcase classname="stringify()" name="-Infinity" time="0.001">
    </testcase>
    <testcase classname="stringify()" name="/ab\.c/gi" time="0">
    </testcase>
    <testcase classname="stringify()" name="1n" time="0">
    </testcase>
    <testcase classname="stringify()" name="0n" time="0">
    </testcase>
    <testcase classname="stringify()" name="circular references" time="0">
    </testcase>
    <testcase classname="stringify()" name="toJSON error" time="0.001">
    </testcase>
    <testcase classname="stringify()" name="toJSON errors when comparing two objects" time="0.003">
    </testcase>
    <testcase classname="stringify()" name="reduces maxDepth if stringifying very large objects" time="0.096">
    </testcase>
    <testcase classname="ensureNumbers()" name="dont throw error when variables are numbers" time="0">
    </testcase>
    <testcase classname="ensureNumbers()" name="throws error when expected is not a number (backward compatibility)" time="0.001">
    </testcase>
    <testcase classname="ensureNumbers()" name="throws error when received is not a number (backward compatibility)" time="0">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise empty isNot false received" time="0.001">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise empty isNot true expected" time="0.001">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise rejects isNot false expected" time="0">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise rejects isNot true received" time="0">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise resolves isNot false received" time="0.001">
    </testcase>
    <testcase classname="ensureNumbers() with options" name="promise resolves isNot true expected" time="0">
    </testcase>
    <testcase classname="ensureNoExpected()" name="dont throw error when undefined" time="0">
    </testcase>
    <testcase classname="ensureNoExpected()" name="throws error when expected is not undefined with matcherName" time="0.001">
    </testcase>
    <testcase classname="ensureNoExpected()" name="throws error when expected is not undefined with matcherName and options" time="0">
    </testcase>
    <testcase classname="diff" name="forwards to jest-diff" time="0.001">
    </testcase>
    <testcase classname="diff" name="two booleans" time="0">
    </testcase>
    <testcase classname="diff" name="two numbers" time="0">
    </testcase>
    <testcase classname="diff" name="two bigints" time="0">
    </testcase>
    <testcase classname="pluralize()" name="one" time="0.001">
    </testcase>
    <testcase classname="pluralize()" name="two" time="0">
    </testcase>
    <testcase classname="pluralize()" name="20" time="0.001">
    </testcase>
    <testcase classname="getLabelPrinter" name="0 args" time="0">
    </testcase>
    <testcase classname="getLabelPrinter" name="1 empty string" time="0">
    </testcase>
    <testcase classname="getLabelPrinter" name="1 non-empty string" time="0">
    </testcase>
    <testcase classname="getLabelPrinter" name="2 equal lengths" time="0.001">
    </testcase>
    <testcase classname="getLabelPrinter" name="2 unequal lengths" time="0">
    </testcase>
    <testcase classname="getLabelPrinter" name="returns incorrect padding if inconsistent arg is shorter" time="0">
    </testcase>
    <testcase classname="getLabelPrinter" name="throws if inconsistent arg is longer" time="0.026">
    </testcase>
    <testcase classname="matcherHint" name="expectedColor" time="0">
    </testcase>
    <testcase classname="matcherHint" name="receivedColor" time="0.001">
    </testcase>
    <testcase classname="matcherHint" name="secondArgumentColor" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/watchFilenamePatternMode.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.165" tests="2">
    <testcase classname="Watch mode flows" name="Pressing &quot;P&quot; enters pattern mode" time="0.007">
    </testcase>
    <testcase classname="Watch mode flows" name="Pressing &quot;c&quot; clears the filters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_create_mock_from_module.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.606" tests="3">
    <testcase classname="Runtime createMockFromModule" name="does not cause side effects in the rest of the module system when generating a mock" time="0.408">
    </testcase>
    <testcase classname="Runtime createMockFromModule" name="resolves mapped modules correctly" time="0.094">
    </testcase>
    <testcase classname="Runtime" name="creates mock objects in the right environment" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_environment.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:16" time="0.497" tests="2">
    <testcase classname="Runtime requireModule" name="emulates a node stack trace during module load" time="0.398">
    </testcase>
    <testcase classname="Runtime requireModule" name="emulates a node stack trace during function execution" time="0.07">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/__tests__/includes_dotfiles.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.337" tests="1">
    <testcase classname="" name="watchman crawler and node crawler both include dotfiles" time="0.077">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.153" tests="8">
    <testcase classname="watchman watch" name="returns a list of all files when there are no clocks" time="0.007">
    </testcase>
    <testcase classname="watchman watch" name="updates file map and removedFiles when the clock is given" time="0.001">
    </testcase>
    <testcase classname="watchman watch" name="resets the file map and tracks removedFiles when watchman is fresh" time="0.002">
    </testcase>
    <testcase classname="watchman watch" name="properly resets the file map when only one watcher is reset" time="0.006">
    </testcase>
    <testcase classname="watchman watch" name="does not add directory filters to query when watching a ROOT" time="0.002">
    </testcase>
    <testcase classname="watchman watch" name="SHA-1 requested and available" time="0.001">
    </testcase>
    <testcase classname="watchman watch" name="SHA-1 requested and NOT available" time="0.001">
    </testcase>
    <testcase classname="watchman watch" name="source control query" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-fake-timers/src/__tests__/legacyFakeTimers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.302" tests="50">
    <testcase classname="FakeTimers construction" name="installs setTimeout mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="accepts to promisify setTimeout mock" time="0.002">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs clearTimeout mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs setInterval mock" time="0">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs clearInterval mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks process.nextTick if it exists on global" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks setImmediate if it exists on global" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks clearImmediate if setImmediate is on global" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="runs all ticks, in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="does nothing when no ticks have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="only runs a scheduled callback once" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="cancels a callback even from native nextTick" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="cancels a callback even from native setImmediate" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="doesnt run a tick callback if native nextTick already did" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="doesnt run immediate if native setImmediate already did" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="native doesnt run immediate if fake already did" time="0.002">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="throws before allowing infinite recursion" time="0.043">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="runs all timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="warns when trying to advance timers while real timers are used" time="0.003">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="does nothing when no timers have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="only runs a setTimeout callback once (ever)" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="runs callbacks with arguments after the interval" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="doesnt pass the callback to native setTimeout" time="0">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="throws before allowing infinite recursion" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="also clears ticks" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersByTime" name="runs timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersByTime" name="does nothing when no timers have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersByTime" name="throws before allowing infinite recursion" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="runs timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="run correct amount of steps" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="setTimeout inside setTimeout" time="0">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="does nothing when no timers have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending setTimeouts" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending setIntervals" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending ticks callbacks &amp; immediates" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets current advanceTimersByTime time cursor" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runOnlyPendingTimers" name="runs all timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runOnlyPendingTimers" name="does not run timers that were cleared in another timer" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runWithRealTimers" name="executes callback with native timers" time="0.002">
    </testcase>
    <testcase classname="FakeTimers runWithRealTimers" name="resets mock timers after executing callback" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runWithRealTimers" name="resets mock timer functions even if callback throws" time="0.002">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native timer APIs" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native process.nextTick when present" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native setImmediate when present" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock timer APIs" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock process.nextTick when present" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock setImmediate when present" time="0.001">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="returns the correct count" time="0.001">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="includes immediates and ticks" time="0.01">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="not includes cancelled immediates" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_jest_fn.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.479" tests="4">
    <testcase classname="Runtime jest.fn" name="creates mock functions" time="0.33">
    </testcase>
    <testcase classname="Runtime jest.fn" name="creates mock functions with mock implementations" time="0.031">
    </testcase>
    <testcase classname="Runtime jest.isMockFunction" name="recognizes a mocked function" time="0.035">
    </testcase>
    <testcase classname="Runtime jest.clearAllMocks" name="clears all mocks" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/matchers-toStrictEqual.property.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.394" tests="3">
    <testcase classname="toStrictEqual" name="should be reflexive" time="0.044">
    </testcase>
    <testcase classname="toStrictEqual" name="should be symmetric" time="0.092">
    </testcase>
    <testcase classname="toStrictEqual on node &gt;=9" name="should be equivalent to Node deepStrictEqual" time="0.113">
    </testcase>
  </testsuite>
  <testsuite name="packages/diff-sequences/src/__tests__/index.property.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.357" tests="7">
    <testcase classname="" name="should be reflexive" time="0.045">
    </testcase>
    <testcase classname="" name="should find the same number of common items when switching the inputs" time="0.029">
    </testcase>
    <testcase classname="" name="should have at most the length of its inputs" time="0.02">
    </testcase>
    <testcase classname="" name="should have at most the same number of each character as its inputs" time="0.017">
    </testcase>
    <testcase classname="" name="should be a subsequence of its inputs" time="0.022">
    </testcase>
    <testcase classname="" name="should be no-op when passing common items" time="0.03">
    </testcase>
    <testcase classname="" name="should find the exact common items when one array is subarray of the other" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-fake-timers/src/__tests__/modernFakeTimers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:17" time="0.317" tests="40">
    <testcase classname="FakeTimers construction" name="installs setTimeout mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs clearTimeout mock" time="0">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs setInterval mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="installs clearInterval mock" time="0.001">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks process.nextTick if it exists on global" time="0">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks setImmediate if it exists on global" time="0">
    </testcase>
    <testcase classname="FakeTimers construction" name="mocks clearImmediate if setImmediate is on global" time="0">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="runs all ticks, in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="does nothing when no ticks have been scheduled" time="0">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="only runs a scheduled callback once" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTicks" name="throws before allowing infinite recursion" time="0.025">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="runs all timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="warns when trying to advance timers while real timers are used" time="0.004">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="does nothing when no timers have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="only runs a setTimeout callback once (ever)" time="0">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="runs callbacks with arguments after the interval" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="doesn&apos;t pass the callback to native setTimeout" time="0">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="throws before allowing infinite recursion" time="0.007">
    </testcase>
    <testcase classname="FakeTimers runAllTimers" name="also clears ticks" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersByTime" name="runs timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersByTime" name="does nothing when no timers have been scheduled" time="0">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="runs timers in order" time="0.004">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="run correct amount of steps" time="0.001">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="setTimeout inside setTimeout" time="0">
    </testcase>
    <testcase classname="FakeTimers advanceTimersToNextTimer" name="does nothing when no timers have been scheduled" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending setTimeouts" time="0">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending setIntervals" time="0">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets all pending ticks callbacks" time="0.001">
    </testcase>
    <testcase classname="FakeTimers reset" name="resets current advanceTimersByTime time cursor" time="0">
    </testcase>
    <testcase classname="FakeTimers runOnlyPendingTimers" name="runs all timers in order" time="0.001">
    </testcase>
    <testcase classname="FakeTimers runOnlyPendingTimers" name="does not run timers that were cleared in another timer" time="0">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native timer APIs" time="0.002">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native process.nextTick when present" time="0">
    </testcase>
    <testcase classname="FakeTimers useRealTimers" name="resets native setImmediate when present" time="0">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock timer APIs" time="0.001">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock process.nextTick when present" time="0">
    </testcase>
    <testcase classname="FakeTimers useFakeTimers" name="resets mock setImmediate when present" time="0">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="returns the correct count" time="0.001">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="includes immediates and ticks" time="0">
    </testcase>
    <testcase classname="FakeTimers getTimerCount" name="not includes cancelled immediates" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/matchers-toContain.property.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.236" tests="2">
    <testcase classname="toContain" name="should always find the value when inside the array" time="0.122">
    </testcase>
    <testcase classname="toContain" name="should not find the value if it has been cloned into the array" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_wrap.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.263" tests="2">
    <testcase classname="Runtime wrapCodeInModuleWrapper" name="generates the correct args for the module wrapper" time="0.194">
    </testcase>
    <testcase classname="Runtime wrapCodeInModuleWrapper" name="injects &quot;extra globals&quot;" time="0.043">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/matchers-toContainEqual.property.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.287" tests="2">
    <testcase classname="toContainEqual" name="should always find the value when inside the array" time="0.091">
    </testcase>
    <testcase classname="toContainEqual" name="should always find the value when cloned inside the array" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="packages/diff-sequences/src/__tests__/index.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.195" tests="48">
    <testcase classname="invalid arg length" name="is not a number" time="0.04">
    </testcase>
    <testcase classname="invalid arg length" name="Infinity is not a safe integer" time="0.001">
    </testcase>
    <testcase classname="invalid arg length" name="Not a Number is not a safe integer" time="0">
    </testcase>
    <testcase classname="invalid arg length" name="MAX_SAFE_INTEGER + 1 is not a safe integer" time="0">
    </testcase>
    <testcase classname="invalid arg length" name="MIN_SAFE_INTEGER - 1 is not a safe integer" time="0.001">
    </testcase>
    <testcase classname="invalid arg length" name="is a negative integer" time="0">
    </testcase>
    <testcase classname="invalid arg callback" name="null is not a function" time="0.001">
    </testcase>
    <testcase classname="invalid arg callback" name="undefined is not a function" time="0">
    </testcase>
    <testcase classname="input callback encapsulates comparison zero and negative zero" name="are not common according to Object.is method" time="0">
    </testcase>
    <testcase classname="input callback encapsulates comparison zero and negative zero" name="are common according to === operator" time="0">
    </testcase>
    <testcase classname="input callback encapsulates comparison Not a Number" name="is common according to Object.is method" time="0">
    </testcase>
    <testcase classname="input callback encapsulates comparison Not a Number" name="is not common according to === operator" time="0">
    </testcase>
    <testcase classname="input callback encapsulates sequences" name="arrays of strings" time="0.001">
    </testcase>
    <testcase classname="input callback encapsulates sequences" name="string and array of strings" time="0.001">
    </testcase>
    <testcase classname="input callback encapsulates sequences" name="strings" time="0.001">
    </testcase>
    <testcase classname="no common items negative zero is equivalent to zero for length" name="of a" time="0">
    </testcase>
    <testcase classname="no common items negative zero is equivalent to zero for length" name="of b" time="0">
    </testcase>
    <testcase classname="no common items negative zero is equivalent to zero for length" name="of a and b" time="0.001">
    </testcase>
    <testcase classname="no common items" name="a empty and b empty" time="0.003">
    </testcase>
    <testcase classname="no common items" name="a empty and b non-empty" time="0.001">
    </testcase>
    <testcase classname="no common items" name="a non-empty and b empty" time="0">
    </testcase>
    <testcase classname="no common items a non-empty and b non-empty" name="baDeltaLength 0 even" time="0.001">
    </testcase>
    <testcase classname="no common items a non-empty and b non-empty" name="baDeltaLength 1 odd" time="0">
    </testcase>
    <testcase classname="no common items a non-empty and b non-empty" name="baDeltaLength 2 even" time="0">
    </testcase>
    <testcase classname="no common items a non-empty and b non-empty" name="baDeltaLength 7 odd" time="0.001">
    </testcase>
    <testcase classname="only common items" name="length 1" time="0">
    </testcase>
    <testcase classname="only common items" name="length 2" time="0.001">
    </testcase>
    <testcase classname="all common items outside" name="preceding changes" time="0">
    </testcase>
    <testcase classname="all common items outside" name="following change" time="0">
    </testcase>
    <testcase classname="all common items outside" name="preceding and following changes in one sequence" time="0.001">
    </testcase>
    <testcase classname="some common items inside and outside" name="preceding changes adjacent to common in both sequences" time="0">
    </testcase>
    <testcase classname="some common items inside and outside" name="following changes adjacent to common in both sequences" time="0.001">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="move from start to end relative to change" time="0">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="move from start to end relative to common" time="0">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="move from start to end relative to change and common" time="0">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="reverse relative to change" time="0">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="preceding middle" time="0">
    </testcase>
    <testcase classname="all common items inside non-recursive" name="following middle" time="0.001">
    </testcase>
    <testcase classname="all common items inside recursive" name="prev reverse at depth 1 and preceding at depth 2" time="0">
    </testcase>
    <testcase classname="all common items inside recursive" name="last forward at depth 1 and following at depth 2" time="0.001">
    </testcase>
    <testcase classname="all common items inside recursive" name="preceding at depth 2 and both at depth 3 of following" time="0.007">
    </testcase>
    <testcase classname="all common items inside recursive" name="interleaved single change" time="0">
    </testcase>
    <testcase classname="all common items inside recursive" name="interleaved double changes" time="0.001">
    </testcase>
    <testcase classname="all common items inside recursive" name="optimization decreases iMaxF" time="0">
    </testcase>
    <testcase classname="all common items inside recursive" name="optimization decreases iMaxR" time="0">
    </testcase>
    <testcase classname="common substrings" name="progress" time="0.001">
    </testcase>
    <testcase classname="common substrings" name="regression" time="0.012">
    </testcase>
    <testcase classname="common substrings" name="wrapping" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-get-type/src/__tests__/getType.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.045" tests="14">
    <testcase classname=".getType()" name="null" time="0.001">
    </testcase>
    <testcase classname=".getType()" name="undefined" time="0">
    </testcase>
    <testcase classname=".getType()" name="object" time="0">
    </testcase>
    <testcase classname=".getType()" name="array" time="0">
    </testcase>
    <testcase classname=".getType()" name="number" time="0.001">
    </testcase>
    <testcase classname=".getType()" name="string" time="0">
    </testcase>
    <testcase classname=".getType()" name="function" time="0">
    </testcase>
    <testcase classname=".getType()" name="boolean" time="0">
    </testcase>
    <testcase classname=".getType()" name="symbol" time="0.001">
    </testcase>
    <testcase classname=".getType()" name="regexp" time="0">
    </testcase>
    <testcase classname=".getType()" name="map" time="0">
    </testcase>
    <testcase classname=".getType()" name="set" time="0">
    </testcase>
    <testcase classname=".getType()" name="date" time="0">
    </testcase>
    <testcase classname=".getType()" name="bigint" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-cli/src/init/__tests__/init.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.119" tests="24">
    <testcase classname="init project with package.json and no jest config all questions answered with answer: &quot;No&quot;" name="should return the default configuration (an empty config)" time="0.001">
    </testcase>
    <testcase classname="init project with package.json and no jest config all questions answered with answer: &quot;No&quot;" name="should generate empty config with mjs extension" time="0.001">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {clearMocks: true}" time="0.001">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {coverage: true}" time="0.001">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {coverageProvider: &quot;babel&quot;}" time="0">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {coverageProvider: &quot;v8&quot;}" time="0">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {environment: &quot;jsdom&quot;}" time="0">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create configuration for {environment: &quot;node&quot;}" time="0.001">
    </testcase>
    <testcase classname="init project with package.json and no jest config some questions answered with answer: &quot;Yes&quot;" name="should create package.json with configured test command when {scripts: true}" time="0.001">
    </testcase>
    <testcase classname="init no package json" name="should throw an error if there is no package.json file" time="0">
    </testcase>
    <testcase classname="init has-jest-config-file-js ask the user whether to override config or not" name="user answered with &quot;Yes&quot;" time="0.001">
    </testcase>
    <testcase classname="init has-jest-config-file-js ask the user whether to override config or not" name="user answered with &quot;No&quot;" time="0">
    </testcase>
    <testcase classname="init has-jest-config-file-ts ask the user whether to override config or not" name="user answered with &quot;Yes&quot;" time="0.001">
    </testcase>
    <testcase classname="init has-jest-config-file-ts ask the user whether to override config or not" name="user answered with &quot;No&quot;" time="0">
    </testcase>
    <testcase classname="init has-jest-config-file-mjs ask the user whether to override config or not" name="user answered with &quot;Yes&quot;" time="0">
    </testcase>
    <testcase classname="init has-jest-config-file-mjs ask the user whether to override config or not" name="user answered with &quot;No&quot;" time="0.001">
    </testcase>
    <testcase classname="init has-jest-config-file-cjs ask the user whether to override config or not" name="user answered with &quot;Yes&quot;" time="0.001">
    </testcase>
    <testcase classname="init has-jest-config-file-cjs ask the user whether to override config or not" name="user answered with &quot;No&quot;" time="0.001">
    </testcase>
    <testcase classname="init has-jest-config-file-json ask the user whether to override config or not" name="user answered with &quot;Yes&quot;" time="0">
    </testcase>
    <testcase classname="init has-jest-config-file-json ask the user whether to override config or not" name="user answered with &quot;No&quot;" time="0">
    </testcase>
    <testcase classname="init project using jest.config.ts ask the user whether he wants to use Typescript or not" name="user answered with &quot;Yes&quot;" time="0.001">
    </testcase>
    <testcase classname="init project using jest.config.ts ask the user whether he wants to use Typescript or not" name="user answered with &quot;No&quot;" time="0.001">
    </testcase>
    <testcase classname="init has jest config in package.json" name="should ask the user whether to override config or not" time="0.001">
    </testcase>
    <testcase classname="init already has &quot;jest&quot; in packageJson.scripts.test" name="should not ask &quot;test script question&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/runtime_require_module_no_ext.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.261" tests="1">
    <testcase classname="Runtime requireModule with no extension" name="throws error pointing out file with extension" time="0.204">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/deepCyclicCopy.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.086" tests="12">
    <testcase classname="" name="returns the same value for primitive or function values" time="0.001">
    </testcase>
    <testcase classname="" name="does not execute getters/setters, but copies them" time="0">
    </testcase>
    <testcase classname="" name="copies symbols" time="0.01">
    </testcase>
    <testcase classname="" name="copies arrays as array objects" time="0.001">
    </testcase>
    <testcase classname="" name="handles cyclic dependencies" time="0">
    </testcase>
    <testcase classname="" name="uses the blacklist to avoid copying properties on the first level" time="0.001">
    </testcase>
    <testcase classname="" name="does not keep the prototype by default when top level is object" time="0">
    </testcase>
    <testcase classname="" name="does not keep the prototype by default when top level is array" time="0.001">
    </testcase>
    <testcase classname="" name="does not keep the prototype of arrays when keepPrototype = false" time="0">
    </testcase>
    <testcase classname="" name="keeps the prototype of arrays when keepPrototype = true" time="0.002">
    </testcase>
    <testcase classname="" name="does not keep the prototype for objects when keepPrototype = false" time="0">
    </testcase>
    <testcase classname="" name="keeps the prototype for objects when keepPrototype = true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/version.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.138" tests="1">
    <testcase classname="" name="works with jest.config.js" time="0.094">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/createProcessObject.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.081" tests="4">
    <testcase classname="" name="creates a process object that looks like the original one" time="0.032">
    </testcase>
    <testcase classname="" name="fakes require(&quot;process&quot;) so it is equal to &quot;global.process&quot;" time="0">
    </testcase>
    <testcase classname="" name="checks that process.env works as expected on Linux platforms" time="0.005">
    </testcase>
    <testcase classname="" name="checks that process.env works as expected in Windows platforms" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/instrumentation.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.275" tests="1">
    <testcase classname="" name="instruments files" time="0.239">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/runJest.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.261" tests="2">
    <testcase classname="runJest" name="when watch is set then exit process" time="0.018">
    </testcase>
    <testcase classname="runJest" name="when watch is set then an error message is printed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-matcher-utils/src/__tests__/Replaceable.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.111" tests="17">
    <testcase classname="Replaceable constructor" name="init with object" time="0">
    </testcase>
    <testcase classname="Replaceable constructor" name="init with array" time="0">
    </testcase>
    <testcase classname="Replaceable constructor" name="init with Map" time="0">
    </testcase>
    <testcase classname="Replaceable constructor" name="init with other type should throw error" time="0.016">
    </testcase>
    <testcase classname="Replaceable get" name="get object item" time="0">
    </testcase>
    <testcase classname="Replaceable get" name="get array item" time="0">
    </testcase>
    <testcase classname="Replaceable get" name="get Map item" time="0.001">
    </testcase>
    <testcase classname="Replaceable set" name="set object item" time="0">
    </testcase>
    <testcase classname="Replaceable set" name="set array item" time="0">
    </testcase>
    <testcase classname="Replaceable set" name="set Map item" time="0">
    </testcase>
    <testcase classname="Replaceable forEach" name="object forEach" time="0.001">
    </testcase>
    <testcase classname="Replaceable forEach" name="array forEach" time="0">
    </testcase>
    <testcase classname="Replaceable forEach" name="map forEach" time="0">
    </testcase>
    <testcase classname="Replaceable forEach" name="forEach should ignore nonenumerable property" time="0.001">
    </testcase>
    <testcase classname="Replaceable isReplaceable" name="should return true if two object types equal and support" time="0.001">
    </testcase>
    <testcase classname="Replaceable isReplaceable" name="should return false if two object types not equal" time="0">
    </testcase>
    <testcase classname="Replaceable isReplaceable" name="should return false if object types not support" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/formatTime.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.082" tests="11">
    <testcase classname="" name="defaults to milliseconds" time="0.001">
    </testcase>
    <testcase classname="" name="formats seconds properly" time="0">
    </testcase>
    <testcase classname="" name="formats milliseconds properly" time="0">
    </testcase>
    <testcase classname="" name="formats microseconds properly" time="0.03">
    </testcase>
    <testcase classname="" name="formats nanoseconds properly" time="0">
    </testcase>
    <testcase classname="" name="interprets lower than lowest powers as nanoseconds" time="0">
    </testcase>
    <testcase classname="" name="interprets higher than highest powers as seconds" time="0.002">
    </testcase>
    <testcase classname="" name="interprets non-multiple-of-3 powers as next higher prefix" time="0">
    </testcase>
    <testcase classname="" name="formats the quantity properly when pad length is lower" time="0">
    </testcase>
    <testcase classname="" name="formats the quantity properly when pad length is equal" time="0">
    </testcase>
    <testcase classname="" name="left pads the quantity properly when pad length is higher" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/thread-integration.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:18" time="0.114" tests="6">
    <testcase classname="Jest Worker Process Integration" name="calls a single method from the worker" time="0.025">
    </testcase>
    <testcase classname="Jest Worker Process Integration" name="distributes sequential calls across child processes" time="0.006">
    </testcase>
    <testcase classname="Jest Worker Process Integration" name="schedules the task on the first available child processes if the scheduling policy is in-order" time="0.003">
    </testcase>
    <testcase classname="Jest Worker Process Integration" name="schedules the task on the first available child processes" time="0.004">
    </testcase>
    <testcase classname="Jest Worker Process Integration" name="distributes concurrent calls across child processes" time="0.006">
    </testcase>
    <testcase classname="Jest Worker Process Integration" name="sticks parallel calls to children" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/__tests__/worker.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.1" tests="7">
    <testcase classname="worker" name="parses JavaScript files and extracts module information" time="0.001">
    </testcase>
    <testcase classname="worker" name="accepts a custom dependency extractor" time="0.002">
    </testcase>
    <testcase classname="worker" name="delegates to hasteImplModulePath for getting the id" time="0.001">
    </testcase>
    <testcase classname="worker" name="parses package.json files as haste packages" time="0.001">
    </testcase>
    <testcase classname="worker" name="returns an error when a file cannot be accessed" time="0">
    </testcase>
    <testcase classname="worker" name="simply computes SHA-1s when requested (works well with binary data)" time="0.012">
    </testcase>
    <testcase classname="worker" name="avoids computing dependencies if not requested and Haste does not need it" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-matcher-utils/src/__tests__/printDiffOrStringify.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.114" tests="21">
    <testcase classname="printDiffOrStringify" name="expected is empty and received is single line" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify" name="expected is multi line and received is empty" time="0">
    </testcase>
    <testcase classname="printDiffOrStringify" name="expected and received are single line with multiple changes" time="0.002">
    </testcase>
    <testcase classname="printDiffOrStringify" name="expected and received are multi line with trailing spaces" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify" name="has no common after clean up chaff multiline" time="0.002">
    </testcase>
    <testcase classname="printDiffOrStringify" name="has no common after clean up chaff one-line" time="0">
    </testcase>
    <testcase classname="printDiffOrStringify" name="object contain readonly symbol key object" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify MAX_DIFF_STRING_LENGTH" name="both are less" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify MAX_DIFF_STRING_LENGTH" name="expected is more" time="0.004">
    </testcase>
    <testcase classname="printDiffOrStringify MAX_DIFF_STRING_LENGTH" name="received is more" time="0.008">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="minimal test" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="jest asymmetricMatcher" time="0.005">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="custom asymmetricMatcher" time="0">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="nested object" time="0">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="array" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="object in array" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="map" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="circular object" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="transitive circular" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="circular array" time="0.001">
    </testcase>
    <testcase classname="printDiffOrStringify asymmetricMatcher" name="circular map" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/utils.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.147" tests="41">
    <testcase classname="getPath()" name="property exists" time="0">
    </testcase>
    <testcase classname="getPath()" name="property doesnt exist" time="0.001">
    </testcase>
    <testcase classname="getPath()" name="property exist but undefined" time="0">
    </testcase>
    <testcase classname="getPath()" name="property is a getter on class instance" time="0.001">
    </testcase>
    <testcase classname="getPath()" name="property is inherited" time="0.001">
    </testcase>
    <testcase classname="getPath()" name="path breaks" time="0">
    </testcase>
    <testcase classname="getPath()" name="empty object at the end" time="0.001">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset({&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}, {&quot;a&quot;: &quot;d&quot;})).toEqual({&quot;a&quot;: &quot;b&quot;})" time="0.001">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset({&quot;a&quot;: [1, 2], &quot;b&quot;: &quot;b&quot;}, {&quot;a&quot;: [3, 4]})).toEqual({&quot;a&quot;: [1, 2]})" time="0">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset([{&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}], [{&quot;a&quot;: &quot;z&quot;}])).toEqual([{&quot;a&quot;: &quot;b&quot;}])" time="0.001">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset([1, 2], [1, 2, 3])).toEqual([1, 2])" time="0">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset({&quot;a&quot;: [1]}, {&quot;a&quot;: [1, 2]})).toEqual({&quot;a&quot;: [1]})" time="0">
    </testcase>
    <testcase classname="getObjectSubset" name="expect(getObjectSubset(2015-11-30T00:00:00.000Z, 2016-12-30T00:00:00.000Z)).toEqual(2015-11-30T00:00:00.000Z)" time="0">
    </testcase>
    <testcase classname="getObjectSubset returns the object instance if the subset has no extra properties" name="Date" time="0">
    </testcase>
    <testcase classname="getObjectSubset returns the subset instance if its property values are equal" name="Object" time="0">
    </testcase>
    <testcase classname="getObjectSubset returns the subset instance if its property values are equal Uint8Array" name="expected" time="0">
    </testcase>
    <testcase classname="getObjectSubset returns the subset instance if its property values are equal Uint8Array" name="received" time="0.001">
    </testcase>
    <testcase classname="getObjectSubset calculating subsets of objects with circular references" name="simple circular references" time="0">
    </testcase>
    <testcase classname="getObjectSubset calculating subsets of objects with circular references" name="transitive circular references" time="0.007">
    </testcase>
    <testcase classname="emptyObject()" name="matches an empty object" time="0">
    </testcase>
    <testcase classname="emptyObject()" name="does not match an object with keys" time="0">
    </testcase>
    <testcase classname="emptyObject()" name="does not match a non-object" time="0">
    </testcase>
    <testcase classname="subsetEquality()" name="matching object returns true" time="0">
    </testcase>
    <testcase classname="subsetEquality()" name="object without keys is undefined" time="0">
    </testcase>
    <testcase classname="subsetEquality()" name="objects to not match" time="0.001">
    </testcase>
    <testcase classname="subsetEquality()" name="null does not return errors" time="0">
    </testcase>
    <testcase classname="subsetEquality()" name="undefined does not return errors" time="0">
    </testcase>
    <testcase classname="subsetEquality() matching subsets with circular references" name="simple circular references" time="0">
    </testcase>
    <testcase classname="subsetEquality() matching subsets with circular references" name="referenced object on same level should not regarded as circular reference" time="0">
    </testcase>
    <testcase classname="subsetEquality() matching subsets with circular references" name="transitive circular references" time="0.009">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular iterators" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular Set" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given nested Sets" time="0.001">
    </testcase>
    <testcase classname="iterableEquality" name="returns false when given inequal set within a set" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns false when given inequal map within a set" time="0.005">
    </testcase>
    <testcase classname="iterableEquality" name="returns false when given inequal set within a map" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular Set shape" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular key in Map" time="0.001">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given nested Maps" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular key and value in Map" time="0">
    </testcase>
    <testcase classname="iterableEquality" name="returns true when given circular value in Map" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-matcher-utils/src/__tests__/deepCyclicCopyReplaceable.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.049" tests="11">
    <testcase classname="" name="returns the same value for primitive or function values" time="0.001">
    </testcase>
    <testcase classname="" name="convert accessor descriptor into value descriptor" time="0.001">
    </testcase>
    <testcase classname="" name="shuold not skips non-enumerables" time="0">
    </testcase>
    <testcase classname="" name="copies symbols" time="0.001">
    </testcase>
    <testcase classname="" name="copies arrays as array objects" time="0">
    </testcase>
    <testcase classname="" name="handles cyclic dependencies" time="0.001">
    </testcase>
    <testcase classname="" name="Copy Map" time="0">
    </testcase>
    <testcase classname="" name="Copy cyclic Map" time="0">
    </testcase>
    <testcase classname="" name="return same value for built-in object type except array, map and object" time="0">
    </testcase>
    <testcase classname="" name="should copy object symbol key property" time="0">
    </testcase>
    <testcase classname="" name="should set writable, configurable to true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/isError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.043" tests="4">
    <testcase classname="isError" name="should not assume objects are errors" time="0.001">
    </testcase>
    <testcase classname="isError" name="should detect simple error instances" time="0">
    </testcase>
    <testcase classname="isError" name="should detect errors from another context" time="0.012">
    </testcase>
    <testcase classname="isError" name="should detect DOMException errors from another context" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-get-type/src/__tests__/isPrimitive.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.036" tests="18">
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: null" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: undefined" time="0.001">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: 100" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: hello world" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: true" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: Symbol(a)" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: 0" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: NaN" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: Infinity" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns true when given primitive value of: 1n" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: {}" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: []" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: undefined" time="0.001">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: {}" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: {}" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: {}" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: &quot;2021-01-24T19:22:19.272Z&quot;" time="0">
    </testcase>
    <testcase classname=".isPrimitive()" name="returns false when given non primitive value of: {}" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/crawlers/__tests__/node.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.17" tests="10">
    <testcase classname="node crawler" name="crawls for files based on patterns" time="0.012">
    </testcase>
    <testcase classname="node crawler" name="updates only changed files" time="0.007">
    </testcase>
    <testcase classname="node crawler" name="returns removed files" time="0.013">
    </testcase>
    <testcase classname="node crawler" name="uses node fs APIs with incompatible find binary" time="0.009">
    </testcase>
    <testcase classname="node crawler" name="uses node fs APIs without find binary" time="0.008">
    </testcase>
    <testcase classname="node crawler" name="uses node fs APIs if &quot;forceNodeFilesystemAPI&quot; is set to true, regardless of platform" time="0.006">
    </testcase>
    <testcase classname="node crawler" name="completes with empty roots" time="0">
    </testcase>
    <testcase classname="node crawler" name="completes with fs.readdir throwing an error" time="0.011">
    </testcase>
    <testcase classname="node crawler readdir withFileTypes support" name="calls lstat for directories and symlinks if readdir withFileTypes is not supported" time="0.007">
    </testcase>
    <testcase classname="node crawler readdir withFileTypes support" name="avoids calling lstat for directories and symlinks if readdir withFileTypes is supported" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/onlyChanged.test.ts" errors="0" failures="1" skipped="0" timestamp="2021-01-24T19:21:57" time="22.281" tests="9">
    <testcase classname="" name="run for &quot;onlyChanged&quot; and &quot;changedSince&quot;" time="1.464">
    </testcase>
    <testcase classname="" name="run only changed files" time="5.196">
    </testcase>
    <testcase classname="" name="report test coverage for only changed files" time="1.889">
    </testcase>
    <testcase classname="" name="report test coverage of source on test file change under only changed files" time="0.822">
    </testcase>
    <testcase classname="" name="do not pickup non-tested files when reporting coverage on only changed files" time="0.861">
    </testcase>
    <testcase classname="" name="collect test coverage when using onlyChanged" time="1.058">
    </testcase>
    <testcase classname="" name="onlyChanged in config is overwritten by --all or testPathPattern" time="7.023">
    </testcase>
    <testcase classname="" name="gets changed files for hg" time="3.765">
      <failure>Error: expect(received).toMatch(expected)

Expected pattern: /PASS __tests__(\/|\\)file2.test.js/
Received string:  &quot;·
  ● Test suite failed to run·
    abort: empty revision range
&quot;
    at Object.toMatch (/home/dorny/dorny/jest/e2e/__tests__/onlyChanged.test.ts:360:18)
    at Promise.then.completed (/home/dorny/dorny/jest/packages/jest-circus/build/utils.js:307:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/home/dorny/dorny/jest/packages/jest-circus/build/utils.js:229:10)
    at _callCircusTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:218:40)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
    at _runTest (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:155:3)
    at _runTestsForDescribeBlock (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:66:9)
    at run (/home/dorny/dorny/jest/packages/jest-circus/build/run.js:25:3)
    at runAndTransformResultsToJestFormat (/home/dorny/dorny/jest/packages/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:163:21)</failure>
    </testcase>
    <testcase classname="" name="path on Windows is case-insensitive" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-diff/src/__tests__/joinAlignedDiffs.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.044" tests="6">
    <testcase classname="joinAlignedDiffsExpand" name="first line is empty common" time="0.001">
    </testcase>
    <testcase classname="joinAlignedDiffsNoExpand" name="patch 0 with context 1 and change at start and end" time="0">
    </testcase>
    <testcase classname="joinAlignedDiffsNoExpand" name="patch 0 with context 5 and first line is empty common" time="0.007">
    </testcase>
    <testcase classname="joinAlignedDiffsNoExpand" name="patch 1 with context 4 and last line is empty common" time="0">
    </testcase>
    <testcase classname="joinAlignedDiffsNoExpand" name="patch 2 with context 3" time="0.001">
    </testcase>
    <testcase classname="joinAlignedDiffsNoExpand" name="patch 3 with context 2 and omit excess common at start" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/SnapshotInteractiveMode.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.089" tests="13">
    <testcase classname="SnapshotInteractiveMode" name="is inactive at construction" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="call to run process the first file" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="call to abort" time="0.011">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="call to reset" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="press Q or ESC triggers an abort" time="0">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="press ENTER trigger a run" time="0">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="skip 1 test, then restart" time="0.002">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="skip 1 test, then quit" time="0.002">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="update 1 test, then finish and return" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="skip 2 tests, then finish and restart" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="update 2 tests, then finish and return" time="0.001">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="update 1 test, skip 1 test, then finish and restart" time="0.002">
    </testcase>
    <testcase classname="SnapshotInteractiveMode" name="skip 1 test, update 1 test, then finish and restart" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-runtime/src/__tests__/Runtime-statics.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.162" tests="2">
    <testcase classname="Runtime statics" name="Runtime.createHasteMap passes correct ignore files to HasteMap" time="0.002">
    </testcase>
    <testcase classname="Runtime statics" name="Runtime.createHasteMap passes correct ignore files to HasteMap in watch mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-diff/src/__tests__/getAlignedDiffs.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.072" tests="24">
    <testcase classname="getAlignedDiffs lines" name="change preceding and following common" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs lines" name="common preceding and following change" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs lines" name="common at end when both current change lines are empty" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs lines" name="common between delete and insert" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs lines" name="common between insert and delete" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="delete only" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="insert only" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="delete with adjacent change" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="insert with adjacent changes" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="change from space" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs newline" name="change to space" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings first" name="common when both current change lines are empty" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs substrings first" name="common when either current change line is non-empty" time="0.013">
    </testcase>
    <testcase classname="getAlignedDiffs substrings first" name="delete completes the current line" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings first" name="insert completes the current line" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings middle" name="is empty in delete between common" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings middle" name="is empty in insert at start" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs substrings middle" name="is non-empty in delete at end" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings middle" name="is non-empty in insert between common" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs substrings last" name="is empty in delete at end" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs substrings last" name="is empty in insert at end" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs substrings last" name="is non-empty in common not at end" time="0">
    </testcase>
    <testcase classname="getAlignedDiffs strings" name="change at start and delete or insert at end" time="0.001">
    </testcase>
    <testcase classname="getAlignedDiffs strings" name="delete or insert at start and change at end" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/assertionCounts.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.06" tests="6">
    <testcase classname=".assertions()" name="does not throw" time="0.001">
    </testcase>
    <testcase classname=".assertions()" name="redeclares different assertion count" time="0.001">
    </testcase>
    <testcase classname=".assertions()" name="expects no assertions" time="0">
    </testcase>
    <testcase classname=".hasAssertions()" name="does not throw if there is an assertion" time="0">
    </testcase>
    <testcase classname=".hasAssertions()" name="throws if expected is not undefined" time="0.001">
    </testcase>
    <testcase classname=".hasAssertions()" name="hasAssertions not leaking to global state" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/lib/__tests__/getPlatformExtension.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.035" tests="1">
    <testcase classname="getPlatformExtension" name="should get platform ext" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/lib/__tests__/isRegExpSupported.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.031" tests="2">
    <testcase classname="isRegExpSupported" name="should return true when passing valid regular expression" time="0">
    </testcase>
    <testcase classname="isRegExpSupported" name="should return false when passing an invalid regular expression" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/stacktrace.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.069" tests="3">
    <testcase classname="" name="stack trace points to correct location when using matchers" time="0.004">
    </testcase>
    <testcase classname="" name="stack trace points to correct location when using nested matchers" time="0.021">
    </testcase>
    <testcase classname="" name="stack trace points to correct location when throwing from a custom matcher" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/process-integration.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.062" tests="5">
    <testcase classname="Jest Worker Integration" name="calls a single method from the worker" time="0.003">
    </testcase>
    <testcase classname="Jest Worker Integration" name="distributes sequential calls across child processes" time="0.003">
    </testcase>
    <testcase classname="Jest Worker Integration" name="schedules the task on the first available child processes if the scheduling policy is in-order" time="0.015">
    </testcase>
    <testcase classname="Jest Worker Integration" name="distributes concurrent calls across child processes" time="0.002">
    </testcase>
    <testcase classname="Jest Worker Integration" name="sticks parallel calls to children" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/lib/__tests__/isValidPath.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.166" tests="3">
    <testcase classname="" name="is valid when it is a file inside roots" time="0.001">
    </testcase>
    <testcase classname="" name="is not valid when it is a snapshot file" time="0">
    </testcase>
    <testcase classname="" name="is not valid when it is a file in the coverage dir" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/errorWithStack.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.041" tests="1">
    <testcase classname="ErrorWithStack" name="calls Error.captureStackTrace with given callsite when capture exists" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/isInteractive.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.035" tests="2">
    <testcase classname="" name="Returns true when running on interactive environment" time="0.007">
    </testcase>
    <testcase classname="" name="Returns false when running on a non-interactive environment" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-diff/src/__tests__/diffStringsRaw.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.055" tests="2">
    <testcase classname="diffStringsRaw" name="one-line with cleanup" time="0.001">
    </testcase>
    <testcase classname="diffStringsRaw" name="one-line without cleanup" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/globsToMatcher.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.056" tests="4">
    <testcase classname="" name="works like micromatch with only positive globs" time="0.001">
    </testcase>
    <testcase classname="" name="works like micromatch with a mix of overlapping positive and negative globs" time="0.001">
    </testcase>
    <testcase classname="" name="works like micromatch with only negative globs" time="0.001">
    </testcase>
    <testcase classname="" name="works like micromatch with empty globs" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/testSchedulerHelper.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.048" tests="12">
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0.001">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return false for runInBand mode" time="0">
    </testcase>
    <testcase classname="" name="shouldRunInBand() - should return true for runInBand mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/installCommonGlobals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.068" tests="2">
    <testcase classname="" name="returns the passed object" time="0.028">
    </testcase>
    <testcase classname="" name="turns a V8 global object into a Node global object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/__tests__/get_mock_name.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.022" tests="1">
    <testcase classname="getMockName" name="extracts mock name from file path" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-worker/src/__tests__/WorkerPool.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.051" tests="3">
    <testcase classname="WorkerPool" name="should create a ChildProcessWorker and send to it" time="0.001">
    </testcase>
    <testcase classname="WorkerPool" name="should create a NodeThreadWorker and send to it" time="0.001">
    </testcase>
    <testcase classname="WorkerPool" name="should avoid NodeThreadWorker if not passed enableWorkerThreads" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/lib/__tests__/dependencyExtractor.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.056" tests="15">
    <testcase classname="dependencyExtractor" name="should not extract dependencies inside comments" time="0.001">
    </testcase>
    <testcase classname="dependencyExtractor" name="should not extract dependencies inside comments (windows line endings)" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should not extract dependencies inside comments (unicode line endings)" time="0.001">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `import` statements" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from side-effect only `import` statements" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should not extract dependencies from `import type/typeof` statements" time="0.001">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `export` statements" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `export-from` statements" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should not extract dependencies from `export type/typeof` statements" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from dynamic `import` calls" time="0.001">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `require` calls" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `jest.requireActual` calls" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `jest.requireMock` calls" time="0">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `jest.genMockFromModule` calls" time="0.001">
    </testcase>
    <testcase classname="dependencyExtractor" name="should extract dependencies from `jest.createMockFromModule` calls" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/lib/__tests__/normalizePathSep.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.035" tests="2">
    <testcase classname="normalizePathSep" name="does nothing on posix" time="0.001">
    </testcase>
    <testcase classname="normalizePathSep" name="replace slashes on windows" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-haste-map/src/lib/__tests__/fast_path.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.029" tests="5">
    <testcase classname="fastPath.relative" name="should get relative paths inside the root" time="0">
    </testcase>
    <testcase classname="fastPath.relative" name="should get relative paths outside the root" time="0">
    </testcase>
    <testcase classname="fastPath.relative" name="should get relative paths outside the root when start with same word" time="0.001">
    </testcase>
    <testcase classname="fastPath.resolve" name="should get the absolute path for paths inside the root" time="0">
    </testcase>
    <testcase classname="fastPath.resolve" name="should get the absolute path for paths outside the root" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/FailedTestsCache.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.025" tests="1">
    <testcase classname="FailedTestsCache" name="should filter tests" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/getNoTestsFoundMessage.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.061" tests="5">
    <testcase classname="getNoTestsFoundMessage" name="returns correct message when monitoring only failures" time="0.001">
    </testcase>
    <testcase classname="getNoTestsFoundMessage" name="returns correct message when monitoring only changed" time="0">
    </testcase>
    <testcase classname="getNoTestsFoundMessage" name="returns correct message with verbose option" time="0.001">
    </testcase>
    <testcase classname="getNoTestsFoundMessage" name="returns correct message without options" time="0">
    </testcase>
    <testcase classname="getNoTestsFoundMessage" name="returns correct message with passWithNoTests" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/__tests__/globals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.022" tests="1">
    <testcase classname="Common globals" name="check process" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-core/src/lib/__tests__/logDebugMessages.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.048" tests="3">
    <testcase classname="" name="prints the jest version" time="0.001">
    </testcase>
    <testcase classname="" name="prints the test framework name" time="0">
    </testcase>
    <testcase classname="" name="prints the config object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-util/src/__tests__/isPromise.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.03" tests="10">
    <testcase classname="not a Promise: " name="undefined" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="null" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="true" time="0.001">
    </testcase>
    <testcase classname="not a Promise: " name="42" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="&quot;1337&quot;" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="Symbol()" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="[]" time="0">
    </testcase>
    <testcase classname="not a Promise: " name="{}" time="0.001">
    </testcase>
    <testcase classname="" name="a resolved Promise" time="0">
    </testcase>
    <testcase classname="" name="a rejected Promise" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-cli/src/init/__tests__/modifyPackageJson.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.03" tests="4">
    <testcase classname="" name="should remove jest config if exists" time="0.001">
    </testcase>
    <testcase classname="" name="should add test script when there are no scripts" time="0">
    </testcase>
    <testcase classname="" name="should add test script when there are scripts" time="0">
    </testcase>
    <testcase classname="" name="should not add test script when { shouldModifyScripts: false }" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/expect/src/__tests__/symbolInObjects.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.033" tests="3">
    <testcase classname="Symbol in objects" name="should compare objects with Symbol keys" time="0">
    </testcase>
    <testcase classname="Symbol in objects" name="should compare objects with mixed keys and Symbol" time="0.001">
    </testcase>
    <testcase classname="Symbol in objects" name="should compare objects with different Symbol keys" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/test-in-root/test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.037" tests="1">
    <testcase classname="" name="stub" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/test-in-root/spec.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.019" tests="1">
    <testcase classname="" name="stub" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/v8-coverage/empty-sourcemap/test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.031" tests="1">
    <testcase classname="" name="dummy-test" time="0">
    </testcase>
  </testsuite>
  <testsuite name="packages/jest-matcher-utils/src/__tests__/deepCyclicCopyReplaceableDom.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:20" time="0.048" tests="2">
    <testcase classname="" name="should copy dom element" time="0.002">
    </testcase>
    <testcase classname="" name="should copy complex element" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nativeEsmTypescript.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="0.956" tests="1">
    <testcase classname="on node ^12.16.0 || &gt;=13.7.0" name="runs TS test with native ESM" time="0.923">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageRemapping.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="12.701" tests="1">
    <testcase classname="" name="maps code coverage against original source" time="12.66">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/globalTeardown.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:20" time="11.886" tests="7">
    <testcase classname="" name="globalTeardown is triggered once after all test suites" time="2.026">
    </testcase>
    <testcase classname="" name="jest throws an error when globalTeardown does not export a function" time="1.144">
    </testcase>
    <testcase classname="" name="globalTeardown function gets jest config object as a parameter" time="0.959">
    </testcase>
    <testcase classname="" name="should call globalTeardown function of multiple projects" time="1.711">
    </testcase>
    <testcase classname="" name="should not call a globalTeardown of a project if there are no tests to run from this project" time="0.882">
    </testcase>
    <testcase classname="" name="globalTeardown works with default export" time="1.045">
    </testcase>
    <testcase classname="" name="globalTeardown throws with named export" time="1.041">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/multiProjectRunner.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:19" time="16.36" tests="14">
    <testcase classname="" name="--listTests doesn&apos;t duplicate the test files" time="0.445">
    </testcase>
    <testcase classname="" name="can pass projects or global config" time="3.379">
    </testcase>
    <testcase classname="" name="&quot;No tests found&quot; message for projects" time="0.977">
    </testcase>
    <testcase classname="" name="allows a single non-root project" time="1.215">
    </testcase>
    <testcase classname="" name="allows a single non-root project" time="0.751">
    </testcase>
    <testcase classname="" name="correctly runs a single non-root project" time="0.805">
    </testcase>
    <testcase classname="" name="correctly runs a single non-root project" time="0.839">
    </testcase>
    <testcase classname="" name="projects can be workspaces with non-JS/JSON files" time="1.371">
    </testcase>
    <testcase classname="" name="objects in project configuration" time="0.869">
    </testcase>
    <testcase classname="" name="allows a single project" time="0.822">
    </testcase>
    <testcase classname="" name="resolves projects and their &lt;rootDir&gt; properly" time="1.938">
    </testcase>
    <testcase classname="" name="Does transform files with the corresponding project transformer" time="0.737">
    </testcase>
    <testcase classname="doesn&apos;t bleed module file extensions resolution with multiple workers" name="external config files" time="1.025">
    </testcase>
    <testcase classname="doesn&apos;t bleed module file extensions resolution with multiple workers" name="inline config files" time="1.101">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toMatchSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:20" time="17.025" tests="9">
    <testcase classname="" name="basic support" time="3.007">
    </testcase>
    <testcase classname="" name="error thrown before snapshot" time="2.377">
    </testcase>
    <testcase classname="" name="first snapshot fails, second passes" time="1.373">
    </testcase>
    <testcase classname="" name="does not mark snapshots as obsolete in skipped tests" time="1.244">
    </testcase>
    <testcase classname="" name="accepts custom snapshot name" time="0.821">
    </testcase>
    <testcase classname="" name="handles property matchers" time="1.917">
    </testcase>
    <testcase classname="" name="handles invalid property matchers" time="1.906">
    </testcase>
    <testcase classname="" name="handles property matchers with hint" time="1.752">
    </testcase>
    <testcase classname="" name="handles property matchers with deep properties" time="2.528">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/detectOpenHandles.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:32" time="7.528" tests="8">
    <testcase classname="" name="prints message about flag on slow tests" time="1.993">
    </testcase>
    <testcase classname="" name="prints message about flag on forceExit" time="0.678">
    </testcase>
    <testcase classname="" name="prints out info about open handlers" time="0.868">
    </testcase>
    <testcase classname="" name="does not report promises" time="0.728">
    </testcase>
    <testcase classname="on node &gt;=11.10.0" name="does not report ELD histograms" time="0.729">
    </testcase>
    <testcase classname="notify" name="does not report --notify flag" time="0.789">
    </testcase>
    <testcase classname="on node &gt;=11" name="does not report timeouts using unref" time="0.763">
    </testcase>
    <testcase classname="" name="prints out info about open handlers from inside tests" time="0.903">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/failures.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:32" time="10.353" tests="7">
    <testcase classname="" name="not throwing Error objects" time="4.615">
    </testcase>
    <testcase classname="" name="works with node assert" time="0.854">
    </testcase>
    <testcase classname="" name="works with assertions in separate files" time="0.765">
    </testcase>
    <testcase classname="" name="works with async failures" time="0.983">
    </testcase>
    <testcase classname="" name="works with snapshot failures" time="0.782">
    </testcase>
    <testcase classname="" name="works with snapshot failures with hint" time="0.784">
    </testcase>
    <testcase classname="" name="errors after test has completed" time="0.782">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/console.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:36" time="8.072" tests="7">
    <testcase classname="" name="console printing" time="0.755">
    </testcase>
    <testcase classname="" name="console printing with --verbose" time="0.943">
    </testcase>
    <testcase classname="" name="does not print to console with --silent" time="0.855">
    </testcase>
    <testcase classname="" name="respects --noStackTrace" time="0.974">
    </testcase>
    <testcase classname="" name="respects noStackTrace in config" time="1.008">
    </testcase>
    <testcase classname="" name="the jsdom console is the same as the test console" time="1.429">
    </testcase>
    <testcase classname="" name="does not error out when using winston" time="2.049">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/globals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:37" time="7.505" tests="10">
    <testcase classname="" name="basic test constructs" time="0.762">
    </testcase>
    <testcase classname="" name="interleaved describe and test children order" time="0.704">
    </testcase>
    <testcase classname="" name="skips" time="0.685">
    </testcase>
    <testcase classname="" name="only" time="0.827">
    </testcase>
    <testcase classname="" name="cannot have describe with no implementation" time="0.682">
    </testcase>
    <testcase classname="" name="cannot test with no implementation" time="0.701">
    </testcase>
    <testcase classname="" name="skips with expand arg" time="0.683">
    </testcase>
    <testcase classname="" name="only with expand arg" time="0.701">
    </testcase>
    <testcase classname="" name="cannot test with no implementation with expand arg" time="0.663">
    </testcase>
    <testcase classname="" name="function as descriptor" time="0.752">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageThreshold.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:40" time="4.868" tests="5">
    <testcase classname="" name="exits with 1 if coverage threshold is not met" time="0.963">
    </testcase>
    <testcase classname="" name="exits with 1 if path threshold group is not found in coverage data" time="0.962">
    </testcase>
    <testcase classname="" name="exits with 0 if global threshold group is not found in coverage data" time="0.847">
    </testcase>
    <testcase classname="" name="excludes tests matched by path threshold groups from global group" time="1.174">
    </testcase>
    <testcase classname="" name="file is matched by all path and glob threshold groups" time="0.836">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testPathPatternReporterMessage.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:45" time="3.076" tests="1">
    <testcase classname="" name="prints a message with path pattern at the end" time="3.03">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/filter.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:42" time="5.422" tests="7">
    <testcase classname="Dynamic test filtering" name="uses the default JSON option" time="1.044">
    </testcase>
    <testcase classname="Dynamic test filtering" name="uses the CLI option" time="0.786">
    </testcase>
    <testcase classname="Dynamic test filtering" name="ignores the filter if requested to do so" time="0.88">
    </testcase>
    <testcase classname="Dynamic test filtering" name="throws when you return clowny stuff" time="0.361">
    </testcase>
    <testcase classname="Dynamic test filtering" name="will call setup on filter before filtering" time="1.544">
    </testcase>
    <testcase classname="Dynamic test filtering" name="will print error when filter throws" time="0.369">
    </testcase>
    <testcase classname="Dynamic test filtering" name="will return no results when setup hook throws" time="0.354">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/selectProjects.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:44" time="5.236" tests="18">
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects first-project`" name="runs the tests in the first project only" time="0.001">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects first-project`" name="prints that only first-project will run" time="0">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects second-project`" name="runs the tests in the second project only" time="0.001">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects second-project`" name="prints that only second-project will run" time="0">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects first-project second-project`" name="runs the tests in the first and second projects" time="0">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects first-project second-project`" name="prints that both first-project and second-project will run" time="0.001">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started without providing `--selectProjects`" name="runs the tests in the first and second projects" time="0.001">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started without providing `--selectProjects`" name="does not print which projects are run" time="0">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects third-project`" name="fails" time="0">
    </testcase>
    <testcase classname="Given a config with two named projects, first-project and second-project when Jest is started with `--selectProjects third-project`" name="prints that no project was found" time="0.001">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects first-project`" name="runs the tests in the first project only" time="0.001">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects first-project`" name="prints that a project does not have a name" time="0">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects first-project`" name="prints that only first-project will run" time="0">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started without providing `--selectProjects`" name="runs the tests in the first and second projects" time="0.004">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started without providing `--selectProjects`" name="does not print that a project has no name" time="0">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects third-project`" name="fails" time="0.001">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects third-project`" name="prints that a project does not have a name" time="0">
    </testcase>
    <testcase classname="Given a config with two projects, first-project and an unnamed project when Jest is started with `--selectProjects third-project`" name="prints that no project was found" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/mockNames.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:44" time="6.771" tests="8">
    <testcase classname="" name="suite without mock name, mock called" time="0.872">
    </testcase>
    <testcase classname="" name="suite without mock name, mock not called" time="0.864">
    </testcase>
    <testcase classname="" name="suite with mock name, expect mock not called" time="0.755">
    </testcase>
    <testcase classname="" name="suite with mock name, mock called, expect fail" time="0.721">
    </testcase>
    <testcase classname="" name="suite with mock name, mock called 5 times" time="0.766">
    </testcase>
    <testcase classname="" name="suite with mock name, mock not called 5 times, expect fail" time="0.948">
    </testcase>
    <testcase classname="" name="suite with mock name, mock called" time="0.848">
    </testcase>
    <testcase classname="" name="suite with mock name, mock not called" time="0.948">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/stackTrace.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:48" time="4.725" tests="7">
    <testcase classname="Stack Trace" name="prints a stack trace for runtime errors" time="0.958">
    </testcase>
    <testcase classname="Stack Trace" name="does not print a stack trace for runtime errors when --noStackTrace is given" time="0.606">
    </testcase>
    <testcase classname="Stack Trace" name="prints a stack trace for matching errors" time="0.714">
    </testcase>
    <testcase classname="Stack Trace" name="does not print a stack trace for matching errors when --noStackTrace is given" time="0.599">
    </testcase>
    <testcase classname="Stack Trace" name="prints a stack trace for errors" time="0.643">
    </testcase>
    <testcase classname="Stack Trace" name="prints a stack trace for errors without message in stack trace" time="0.602">
    </testcase>
    <testcase classname="Stack Trace" name="does not print a stack trace for errors when --noStackTrace is given" time="0.52">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/each.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:48" time="4.721" tests="7">
    <testcase classname="" name="works with passing tests" time="0.882">
    </testcase>
    <testcase classname="" name="shows error message when not enough arguments are supplied to tests" time="0.597">
    </testcase>
    <testcase classname="" name="shows the correct errors in stderr when failing tests" time="0.769">
    </testcase>
    <testcase classname="" name="shows only the tests with .only as being ran" time="0.653">
    </testcase>
    <testcase classname="" name="shows only the tests without .skip as being ran" time="0.612">
    </testcase>
    <testcase classname="" name="runs only the describe.only.each tests" time="0.562">
    </testcase>
    <testcase classname="" name="formats args with pretty format when given %p" time="0.58">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toThrowErrorMatchingInlineSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:49" time="3.562" tests="4">
    <testcase classname="" name="works fine when function throws error" time="1.138">
    </testcase>
    <testcase classname="" name="updates existing snapshot" time="0.844">
    </testcase>
    <testcase classname="" name="cannot be used with .not" time="0.68">
    </testcase>
    <testcase classname="" name="should support rejecting promises" time="0.808">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/watchModeNoAccess.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:50" time="4.37" tests="1">
    <testcase classname="" name="does not re-run tests when only access time is modified" time="4.313">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/pnp.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:53" time="2.715" tests="1">
    <testcase classname="" name="successfully runs the tests inside `pnp/`" time="2.547">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/declarationErrors.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:53" time="2.389" tests="3">
    <testcase classname="" name="errors if describe returns a Promise" time="0.781">
    </testcase>
    <testcase classname="" name="errors if describe returns something" time="0.709">
    </testcase>
    <testcase classname="" name="errors if describe throws" time="0.778">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/wrongEnv.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:52" time="3.877" tests="5">
    <testcase classname="Wrong globals for environment" name="print useful error for window" time="0.736">
    </testcase>
    <testcase classname="Wrong globals for environment" name="print useful error for document" time="0.533">
    </testcase>
    <testcase classname="Wrong globals for environment" name="print useful error for navigator" time="0.606">
    </testcase>
    <testcase classname="Wrong globals for environment" name="print useful error for unref" time="1.301">
    </testcase>
    <testcase classname="Wrong globals for environment" name="print useful error when it explodes during evaluation" time="0.659">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/setupFilesAfterEnvConfig.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:55" time="1.967" tests="2">
    <testcase classname="setupFilesAfterEnv" name="requires multiple setup files before each file in the suite" time="1.063">
    </testcase>
    <testcase classname="setupFilesAfterEnv" name="requires setup files *after* the test runners are required" time="0.8">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/noTestsFound.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:55" time="2.739" tests="5">
    <testcase classname="No tests are found" name="fails the test suite in standard situation" time="0.488">
    </testcase>
    <testcase classname="No tests are found" name="doesn&apos;t fail the test suite if --passWithNoTests passed" time="0.518">
    </testcase>
    <testcase classname="No tests are found" name="doesn&apos;t fail the test suite if using --lastCommit" time="0.608">
    </testcase>
    <testcase classname="No tests are found" name="doesn&apos;t fail the test suite if using --onlyChanged" time="0.565">
    </testcase>
    <testcase classname="No tests are found" name="doesn&apos;t fail the test suite if using --findRelatedTests" time="0.505">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/customMatcherStackTrace.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:57" time="1.539" tests="2">
    <testcase classname="" name="works with custom matchers" time="0.873">
    </testcase>
    <testcase classname="" name="custom async matchers" time="0.623">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nestedTestDefinitions.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:55" time="4.641" tests="4">
    <testcase classname="" name="print correct error message with nested test definitions outside describe" time="1.354">
    </testcase>
    <testcase classname="" name="print correct error message with nested test definitions inside describe" time="1.088">
    </testcase>
    <testcase classname="" name="print correct message when nesting describe inside it" time="1.047">
    </testcase>
    <testcase classname="" name="print correct message when nesting a hook inside it" time="1.027">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/autoClearMocks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:58" time="1.681" tests="2">
    <testcase classname="" name="suite with auto-clear" time="0.801">
    </testcase>
    <testcase classname="" name="suite without auto-clear" time="0.837">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/forceExit.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:58" time="2.208" tests="1">
    <testcase classname="" name="exits the process after test are done but before timers complete" time="2.157">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testFailureExitCode.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:22:56" time="4.476" tests="2">
    <testcase classname="" name="exits with a specified code when test fail" time="2.073">
    </testcase>
    <testcase classname="" name="exits with a specified code when bailing from a failed test" time="2.188">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/promiseReject.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:00" time="0.967" tests="1">
    <testcase classname="" name="" time="0.905">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/timerResetMocks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:00" time="1.878" tests="2">
    <testcase classname="" name="run timers after resetAllMocks test" time="0.944">
    </testcase>
    <testcase classname="" name="run timers with resetMocks in config test" time="0.814">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testEnvironmentAsync.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:00" time="1.493" tests="1">
    <testcase classname="" name="triggers setup/teardown hooks" time="1.422">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resolveNoFileExtensions.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:01" time="1.263" tests="2">
    <testcase classname="" name="show error message with matching files" time="1.064">
    </testcase>
    <testcase classname="" name="show error message when no js moduleFileExtensions" time="0.117">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nestedEventLoop.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:01" time="1.422" tests="1">
    <testcase classname="" name="works with nested event loops" time="1.392">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/useStderr.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:02" time="1.352" tests="1">
    <testcase classname="" name="no tests found message is redirected to stderr" time="1.257">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/domDiffing.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:02" time="1.361" tests="1">
    <testcase classname="" name="should work without error" time="1.31">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/consoleAfterTeardown.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:02" time="1.341" tests="1">
    <testcase classname="" name="console printing" time="1.301">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testInRoot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:02" time="1.009" tests="1">
    <testcase classname="" name="runs tests in only test.js and spec.js" time="0.944">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireMainIsolateModules.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:03" time="0.976" tests="1">
    <testcase classname="" name="`require.main` on using `jest.isolateModules` should not be undefined" time="0.867">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/clearCache.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:03" time="1.004" tests="2">
    <testcase classname="jest --clearCache" name="normal run results in cache directory being written" time="0.792">
    </testcase>
    <testcase classname="jest --clearCache" name="clearCache results in deleted directory and exitCode 0" time="0.127">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/runtimeInternalModuleRegistry.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:03" time="1.202" tests="1">
    <testcase classname="Runtime Internal Module Registry" name="correctly makes use of internal module registry when requiring modules" time="1.15">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resolveNodeModule.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:03" time="0.943" tests="1">
    <testcase classname="" name="resolve node module" time="0.89">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/setImmediate.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:04" time="0.904" tests="1">
    <testcase classname="" name="setImmediate" time="0.859">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/emptySuiteError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:04" time="0.885" tests="1">
    <testcase classname="JSON Reporter" name="fails the test suite if it contains no tests" time="0.824">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/badSourceMap.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:04" time="0.858" tests="1">
    <testcase classname="" name="suite with test cases that contain malformed sourcemaps" time="0.823">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/timerUseRealTimers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:04" time="1.018" tests="1">
    <testcase classname="" name="useRealTimers cancels &quot;timers&quot;: &quot;fake&quot; for whole test file" time="0.986">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/global-mutation.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:05" time="0.04" tests="1">
    <testcase classname="" name="can redefine global" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/runProgrammatically.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:05" time="0.575" tests="2">
    <testcase classname="" name="run Jest programmatically cjs" time="0.075">
    </testcase>
    <testcase classname="" name="run Jest programmatically esm" time="0.462">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/symbol.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:06" time="0.049" tests="1">
    <testcase classname="" name="Symbol deletion" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/hasteMapMockChanged.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:05" time="0.379" tests="1">
    <testcase classname="" name="should not warn when a mock file changes" time="0.298">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/existentRoots.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:05" time="0.627" tests="4">
    <testcase classname="" name="error when rootDir does not exist" time="0.109">
    </testcase>
    <testcase classname="" name="error when rootDir is a file" time="0.109">
    </testcase>
    <testcase classname="" name="error when roots directory does not exist" time="0.137">
    </testcase>
    <testcase classname="" name="error when roots is a file" time="0.129">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/doneInHooks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:06" time="0.855" tests="1">
    <testcase classname="" name="`done()` works properly in hooks" time="0.819">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testEnvironmentCircusAsync.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:05" time="1.507" tests="1">
    <testcase classname="" name="calls asynchronous handleTestEvent in testEnvironment" time="1.458">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/moduleNameMapper.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:07" time="5.395" tests="5">
    <testcase classname="" name="moduleNameMapper wrong configuration" time="1.03">
    </testcase>
    <testcase classname="" name="moduleNameMapper wrong array configuration" time="0.909">
    </testcase>
    <testcase classname="" name="moduleNameMapper correct configuration" time="0.913">
    </testcase>
    <testcase classname="" name="moduleNameMapper correct configuration mocking module of absolute path" time="1.479">
    </testcase>
    <testcase classname="" name="moduleNameMapper with mocking" time="0.967">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/customReporters.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:07" time="6.553" tests="9">
    <testcase classname="Custom Reporters Integration" name="valid string format for adding reporters" time="0.966">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="valid array format for adding reporters" time="0.623">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="invalid format for adding reporters" time="0.115">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="default reporters enabled" time="0.62">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="TestReporter with all tests passing" time="0.978">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="TestReporter with all tests failing" time="1.093">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="IncompleteReporter for flexibility" time="0.801">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="reporters can be default exports" time="0.792">
    </testcase>
    <testcase classname="Custom Reporters Integration" name="prints reporter errors" time="0.495">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/findRelatedFiles.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:12" time="6.23" tests="5">
    <testcase classname="--findRelatedTests flag" name="runs tests related to filename" time="1.324">
    </testcase>
    <testcase classname="--findRelatedTests flag" name="runs tests related to uppercased filename on case-insensitive os" time="0.001">
    </testcase>
    <testcase classname="--findRelatedTests flag" name="runs tests related to filename with a custom dependency extractor" time="1.307">
    </testcase>
    <testcase classname="--findRelatedTests flag" name="generates coverage report for filename" time="2.002">
    </testcase>
    <testcase classname="--findRelatedTests flag" name="coverage configuration is applied correctly" time="1.516">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/env.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:13" time="5.221" tests="6">
    <testcase classname="Environment override" name="uses jsdom when specified" time="1.501">
    </testcase>
    <testcase classname="Environment override" name="uses node as default from package.json" time="1.002">
    </testcase>
    <testcase classname="Environment override" name="uses node when specified" time="0.664">
    </testcase>
    <testcase classname="Environment override" name="fails when the env is not available" time="0.121">
    </testcase>
    <testcase classname="Environment equivalent" name="uses jsdom" time="1.092">
    </testcase>
    <testcase classname="Environment equivalent" name="uses node" time="0.731">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/globalSetup.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:06" time="13.926" tests="10">
    <testcase classname="" name="globalSetup is triggered once before all test suites" time="2.384">
    </testcase>
    <testcase classname="" name="jest throws an error when globalSetup does not export a function" time="0.851">
    </testcase>
    <testcase classname="" name="globalSetup function gets jest config object as a parameter" time="0.918">
    </testcase>
    <testcase classname="" name="should call globalSetup function of multiple projects" time="1.307">
    </testcase>
    <testcase classname="" name="should not call a globalSetup of a project if there are no tests to run from this project" time="1.189">
    </testcase>
    <testcase classname="" name="should not call any globalSetup if there are no tests to run" time="0.792">
    </testcase>
    <testcase classname="" name="globalSetup works with default export" time="0.926">
    </testcase>
    <testcase classname="" name="globalSetup throws with named export" time="0.783">
    </testcase>
    <testcase classname="" name="should not transpile the transformer" time="0.718">
    </testcase>
    <testcase classname="" name="should transform node_modules if configured by transformIgnorePatterns" time="1.165">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/workerForceExit.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:18" time="4.751" tests="2">
    <testcase classname="" name="prints a warning if a worker is force exited" time="2.355">
    </testcase>
    <testcase classname="" name="force exits a worker that fails to exit gracefully" time="2.319">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/babelPluginJestHoist.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:18" time="6.249" tests="1">
    <testcase classname="" name="successfully runs the tests inside `babel-plugin-jest-hoist/`" time="6.179">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageTransformInstrumented.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:20" time="5.029" tests="1">
    <testcase classname="" name="code coverage for transform instrumented code" time="4.91">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/timeoutsLegacy.test.ts" errors="0" failures="0" skipped="3" timestamp="2021-01-24T19:23:25" time="0.071" tests="4">
    <testcase classname="" name="does not work on jest-circus" time="0.002">
    </testcase>
    <testcase classname="" name="exceeds the timeout set using jasmine.DEFAULT_TIMEOUT_INTERVAL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="does not exceed the timeout using jasmine.DEFAULT_TIMEOUT_INTERVAL" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="can read and write jasmine.DEFAULT_TIMEOUT_INTERVAL" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/asyncRegenerator.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:23" time="4.127" tests="1">
    <testcase classname="" name="successfully transpiles async" time="4.04">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toThrowErrorMatchingSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:25" time="3.524" tests="5">
    <testcase classname="" name="works fine when function throws error" time="0.79">
    </testcase>
    <testcase classname="" name="throws the error if tested function didn&apos;t throw error" time="0.713">
    </testcase>
    <testcase classname="" name="accepts custom snapshot name" time="0.653">
    </testcase>
    <testcase classname="" name="cannot be used with .not" time="0.644">
    </testcase>
    <testcase classname="" name="should support rejecting promises" time="0.647">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testTodo.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:25" time="3.573" tests="5">
    <testcase classname="" name="works with all statuses" time="0.891">
    </testcase>
    <testcase classname="" name="shows error messages when called with no arguments" time="0.602">
    </testcase>
    <testcase classname="" name="shows error messages when called with multiple arguments" time="0.669">
    </testcase>
    <testcase classname="" name="shows error messages when called with invalid argument" time="0.624">
    </testcase>
    <testcase classname="" name="shows todo messages when in verbose mode" time="0.71">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/onlyFailuresNonWatch.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:27" time="2.893" tests="1">
    <testcase classname="" name="onlyFailures flag works in non-watch mode" time="2.841">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/presets.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:29" time="1.966" tests="2">
    <testcase classname="" name="supports json preset" time="0.86">
    </testcase>
    <testcase classname="" name="supports js preset" time="0.956">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/expectAsyncMatcher.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:28" time="2.732" tests="2">
    <testcase classname="" name="works with passing tests" time="1.173">
    </testcase>
    <testcase classname="" name="shows the correct errors in stderr when failing tests" time="0.76">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/transform.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:06" time="26.74" tests="16">
    <testcase classname="babel-jest" name="runs transpiled code" time="2.241">
    </testcase>
    <testcase classname="babel-jest" name="instruments only specific files and collects coverage" time="2.589">
    </testcase>
    <testcase classname="babel-jest ignored" name="tells user to match ignored files" time="0.94">
    </testcase>
    <testcase classname="babel-jest with manual transformer" name="runs transpiled code" time="1.608">
    </testcase>
    <testcase classname="no babel-jest" name="fails with syntax error on flow types" time="1.343">
    </testcase>
    <testcase classname="no babel-jest" name="instrumentation with no babel-jest" time="1.378">
    </testcase>
    <testcase classname="custom transformer" name="proprocesses files" time="0.673">
    </testcase>
    <testcase classname="custom transformer" name="instruments files" time="0.706">
    </testcase>
    <testcase classname="multiple-transformers" name="transforms dependencies using specific transformers" time="7.383">
    </testcase>
    <testcase classname="ecmascript-modules-support" name="runs transpiled code" time="0.923">
    </testcase>
    <testcase classname="transformer-config" name="runs transpiled code" time="1.636">
    </testcase>
    <testcase classname="transformer-config" name="instruments only specific files and collects coverage" time="1.588">
    </testcase>
    <testcase classname="transformer caching" name="does not rerun transform within worker" time="1.033">
    </testcase>
    <testcase classname="transform-environment" name="should transform the environment" time="1.044">
    </testcase>
    <testcase classname="transform-runner" name="should transform runner" time="0.795">
    </testcase>
    <testcase classname="transform-testrunner" name="should transform testRunner" time="0.783">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/chaiAssertionLibrary.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:31" time="1.902" tests="1">
    <testcase classname="" name="chai assertion errors should display properly" time="1.817">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/stackTraceSourceMapsWithCoverage.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:30" time="2.444" tests="1">
    <testcase classname="" name="processes stack traces and code frames with source maps with coverage" time="2.394">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/customTestSequencers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:30" time="2.757" tests="3">
    <testcase classname="" name="run prioritySequence first sync" time="0.933">
    </testcase>
    <testcase classname="" name="run prioritySequence first async" time="0.901">
    </testcase>
    <testcase classname="" name="run failed tests async" time="0.849">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/beforeAllFiltered.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:33" time="0.958" tests="1">
    <testcase classname="Correct BeforeAll run" name="ensures the BeforeAll of ignored suite is not run" time="0.905">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/fakePromises.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:33" time="1.716" tests="2">
    <testcase classname="Fake promises" name="should be possible to resolve with fake timers using immediates" time="0.901">
    </testcase>
    <testcase classname="Fake promises" name="should be possible to resolve with fake timers using asap" time="0.78">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/stackTraceSourceMaps.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:33" time="2.185" tests="1">
    <testcase classname="" name="processes stack traces and code frames with source maps" time="2.153">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/dynamicRequireDependencies.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:34" time="0.847" tests="1">
    <testcase classname="" name="successfully runs tests with dynamic dependencies" time="0.811">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/overrideGlobals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:33" time="2.046" tests="2">
    <testcase classname="" name="overriding native promise does not freeze Jest" time="1.116">
    </testcase>
    <testcase classname="" name="has a duration even if time is faked" time="0.859">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/executeTestsOnceInMpr.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:35" time="0.976" tests="1">
    <testcase classname="" name="Tests are executed only once even in an MPR" time="0.908">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/moduleParentNullInTest.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:35" time="0.886" tests="1">
    <testcase classname="" name="module.parent should be null in test files" time="0.83">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireAfterTeardown.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:35" time="0.921" tests="1">
    <testcase classname="" name="prints useful error for requires after test is done" time="0.842">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/lifecycles.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:35" time="0.861" tests="1">
    <testcase classname="" name="suite with invalid assertions in afterAll" time="0.827">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/hasteMapSha1.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="0.298" tests="1">
    <testcase classname="" name="exits the process after test are done but before timers complete" time="0.187">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/json.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="0.029" tests="2">
    <testcase classname="" name="JSON is available in the global scope" time="0.001">
    </testcase>
    <testcase classname="" name="JSON.parse creates objects from within this context" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testResultsProcessor.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="0.91" tests="1">
    <testcase classname="" name="testNamePattern" time="0.859">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/debug.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="0.899" tests="1">
    <testcase classname="jest --debug" name="outputs debugging info before running the test" time="0.857">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/importedGlobals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="1.043" tests="1">
    <testcase classname="" name="imported globals" time="1.012">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/customResolver.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:37" time="0.826" tests="1">
    <testcase classname="" name="use the custom resolver" time="0.749">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/circularInequality.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:37" time="1.451" tests="1">
    <testcase classname="" name="handles circular inequality properly" time="1.407">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/injectGlobals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:36" time="1.86" tests="2">
    <testcase classname="" name="globals are undefined if passed `false` from CLI" time="0.876">
    </testcase>
    <testcase classname="" name="globals are undefined if passed `false` from config" time="0.918">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/skipBeforeAfterAll.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:38" time="1.061" tests="1">
    <testcase classname="" name="correctly skip `beforeAll`s in skipped tests" time="0.998">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/customInlineSnapshotMatchers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:37" time="2.206" tests="1">
    <testcase classname="" name="works with custom inline snapshot matchers" time="2.145">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/regexCharInPath.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:38" time="0.962" tests="1">
    <testcase classname="Regex Char In Path" name="parses paths containing regex chars correctly" time="0.873">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/noTestFound.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:38" time="1.063" tests="2">
    <testcase classname="Coverage Report" name="outputs coverage report" time="0.551">
    </testcase>
    <testcase classname="File path not found in mulit-project scenario" name="outputs coverage report" time="0.463">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nativeEsm.test.ts" errors="0" failures="0" skipped="1" timestamp="2021-01-24T19:23:39" time="0.905" tests="3">
    <testcase classname="" name="test config is without transform" time="0.133">
    </testcase>
    <testcase classname="on node ^12.16.0 || &gt;=13.7.0" name="runs test with native ESM" time="0.69">
    </testcase>
    <testcase classname="on node &gt;=14.3.0" name="supports top-level await" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/supportsDashedArgs.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:39" time="0.968" tests="2">
    <testcase classname="" name="works with passing tests" time="0.777">
    </testcase>
    <testcase classname="" name="throws error for unknown dashed &amp; camelcase args" time="0.119">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/transformLinkedModules.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:39" time="0.783" tests="1">
    <testcase classname="" name="should transform linked modules" time="0.734">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testNamePattern.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:39" time="0.859" tests="1">
    <testcase classname="" name="testNamePattern" time="0.788">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nativeAsyncMock.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="0.055" tests="1">
    <testcase classname="" name="mocks async functions" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/hasteMapSize.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="0.397" tests="2">
    <testcase classname="" name="reports the correct file size" time="0.083">
    </testcase>
    <testcase classname="" name="updates the file size when a file changes" time="0.217">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/circusDeclarationErrors.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="0.869" tests="1">
    <testcase classname="" name="defining tests and hooks asynchronously throws" time="0.832">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testEnvironmentCircus.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="1.501" tests="1">
    <testcase classname="" name="calls testEnvironment handleTestEvent" time="1.456">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/callDoneTwice.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:41" time="0.882" tests="1">
    <testcase classname="" name="`done()` should not be called more than once" time="0.82">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/emptyDescribeWithHooks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="2.886" tests="4">
    <testcase classname="" name="hook in empty describe" time="0.829">
    </testcase>
    <testcase classname="" name="hook in describe with skipped test" time="0.614">
    </testcase>
    <testcase classname="" name="hook in empty nested describe" time="0.68">
    </testcase>
    <testcase classname="" name="multiple hooks in empty describe" time="0.726">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/errorOnDeprecated.test.ts" errors="0" failures="0" skipped="24" timestamp="2021-01-24T19:23:43" time="0.056" tests="25">
    <testcase classname="" name="does not work on jest-circus" time="0.004">
    </testcase>
    <testcase classname="" name="fail.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.addMatchers.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.any.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.anything.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.arrayContaining.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.createSpy.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.objectContaining.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.stringMatching.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="pending.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="spyOn.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="spyOnProperty.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="defaultTimeoutInterval.test.js errors in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="fail.test.js errors when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.addMatchers.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.any.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.anything.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.arrayContaining.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.createSpy.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.objectContaining.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="jasmine.stringMatching.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="pending.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="spyOn.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="spyOnProperty.test.js errors when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
    <testcase classname="" name="defaultTimeoutInterval.test.js passes when not in errorOnDeprecated mode" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testRetries.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:40" time="3.277" tests="4">
    <testcase classname="Test Retries" name="retries failed tests" time="0.859">
    </testcase>
    <testcase classname="Test Retries" name="reporter shows more than 1 invocation if test is retried" time="0.829">
    </testcase>
    <testcase classname="Test Retries" name="reporter shows 1 invocation if tests are not retried" time="0.811">
    </testcase>
    <testcase classname="Test Retries" name="tests are not retried if beforeAll hook failure occurs" time="0.706">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jest.config.ts.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:43" time="14.322" tests="5">
    <testcase classname="" name="works with jest.config.ts" time="3.356">
    </testcase>
    <testcase classname="" name="works with tsconfig.json" time="3.224">
    </testcase>
    <testcase classname="" name="traverses directory tree up until it finds jest.config" time="3.116">
    </testcase>
    <testcase classname="" name="it does type check the config" time="2.278">
    </testcase>
    <testcase classname="" name="invalid JS in jest.config.ts" time="2.2">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageReport.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:41" time="22.264" tests="12">
    <testcase classname="" name="outputs coverage report" time="2.076">
    </testcase>
    <testcase classname="" name="collects coverage only from specified file" time="1.646">
    </testcase>
    <testcase classname="" name="collects coverage only from multiple specified files" time="1.587">
    </testcase>
    <testcase classname="" name="collects coverage only from specified files avoiding dependencies" time="1.173">
    </testcase>
    <testcase classname="" name="json reporter printing with --coverage" time="0.898">
    </testcase>
    <testcase classname="" name="outputs coverage report as json" time="1.824">
    </testcase>
    <testcase classname="" name="outputs coverage report when text is requested" time="1.872">
    </testcase>
    <testcase classname="" name="outputs coverage report when text-summary is requested" time="1.85">
    </testcase>
    <testcase classname="" name="outputs coverage report when text and text-summary is requested" time="1.827">
    </testcase>
    <testcase classname="" name="does not output coverage report when html is requested" time="2.021">
    </testcase>
    <testcase classname="" name="collects coverage from duplicate files avoiding shared cache" time="2.245">
    </testcase>
    <testcase classname="" name="generates coverage when using the testRegex config param " time="2.3">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toMatchInlineSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:42" time="23.917" tests="12">
    <testcase classname="" name="basic support" time="4.442">
    </testcase>
    <testcase classname="" name="do not indent empty lines" time="1.94">
    </testcase>
    <testcase classname="" name="handles property matchers" time="3.82">
    </testcase>
    <testcase classname="" name="removes obsolete external snapshots" time="3.007">
    </testcase>
    <testcase classname="" name="supports async matchers" time="0.895">
    </testcase>
    <testcase classname="" name="supports async tests" time="1.117">
    </testcase>
    <testcase classname="" name="writes snapshots with non-literals in expect(...)" time="0.897">
    </testcase>
    <testcase classname="" name="handles mocking native modules prettier relies on" time="1.142">
    </testcase>
    <testcase classname="" name="supports custom matchers" time="2.263">
    </testcase>
    <testcase classname="" name="supports custom matchers with property matcher" time="1.95">
    </testcase>
    <testcase classname="" name="multiple custom matchers and native matchers" time="1.385">
    </testcase>
    <testcase classname="" name="indentation is correct in the presences of existing snapshots" time="0.932">
    </testcase>
  </testsuite>
  <testsuite name="examples/react-native/__tests__/intro.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:58" time="8.559" tests="4">
    <testcase classname="" name="renders correctly" time="0.478">
    </testcase>
    <testcase classname="" name="renders the ActivityIndicator component" time="0.106">
    </testcase>
    <testcase classname="" name="renders the TextInput component" time="2.887">
    </testcase>
    <testcase classname="" name="renders the FlatList component" time="0.791">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toMatchInlineSnapshotWithRetries.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:04" time="4.67" tests="3">
    <testcase classname="" name="works with a single snapshot" time="2.009">
    </testcase>
    <testcase classname="" name="works when a different assertion is failing" time="0.6">
    </testcase>
    <testcase classname="" name="works when multiple tests have snapshots but only one of them failed multiple times" time="1.64">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/timeouts.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:06" time="4.029" tests="4">
    <testcase classname="" name="exceeds the timeout" time="0.782">
    </testcase>
    <testcase classname="" name="does not exceed the timeout" time="0.664">
    </testcase>
    <testcase classname="" name="exceeds the command line testTimeout" time="1.529">
    </testcase>
    <testcase classname="" name="does not exceed the command line testTimeout" time="0.856">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toMatchSnapshotWithStringSerializer.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:07" time="3.544" tests="3">
    <testcase classname="" name="empty external" time="1.636">
    </testcase>
    <testcase classname="" name="empty internal ci false" time="1.213">
    </testcase>
    <testcase classname="" name="undefined internal ci true" time="0.598">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jasmineAsync.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:23:43" time="28.291" tests="15">
    <testcase classname="async jasmine" name="works with beforeAll" time="1.317">
    </testcase>
    <testcase classname="async jasmine" name="works with beforeEach" time="0.673">
    </testcase>
    <testcase classname="async jasmine" name="works with afterAll" time="1.151">
    </testcase>
    <testcase classname="async jasmine" name="works with afterEach" time="0.638">
    </testcase>
    <testcase classname="async jasmine" name="works with fit" time="0.936">
    </testcase>
    <testcase classname="async jasmine" name="works with xit" time="0.738">
    </testcase>
    <testcase classname="async jasmine" name="throws when not a promise is returned" time="0.67">
    </testcase>
    <testcase classname="async jasmine" name="tests async promise code" time="10.831">
    </testcase>
    <testcase classname="async jasmine" name="works with concurrent" time="0.757">
    </testcase>
    <testcase classname="async jasmine" name="works with concurrent within a describe block when invoked with testNamePattern" time="0.686">
    </testcase>
    <testcase classname="async jasmine" name="works with concurrent.each" time="0.717">
    </testcase>
    <testcase classname="async jasmine" name="works with concurrent.only.each" time="1.171">
    </testcase>
    <testcase classname="async jasmine" name="doesn&apos;t execute more than 5 tests simultaneously" time="0.976">
    </testcase>
    <testcase classname="async jasmine" name="async test fails" time="6.223">
    </testcase>
    <testcase classname="async jasmine" name="generator test" time="0.688">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/config.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:08" time="3.945" tests="6">
    <testcase classname="" name="config as JSON" time="0.381">
    </testcase>
    <testcase classname="" name="works with sane config JSON" time="0.621">
    </testcase>
    <testcase classname="" name="watchman config option is respected over default argv" time="0.64">
    </testcase>
    <testcase classname="" name="config from argv is respected with sane config JSON" time="0.53">
    </testcase>
    <testcase classname="" name="works with jsdom testEnvironmentOptions config JSON" time="1.558">
    </testcase>
    <testcase classname="" name="negated flags override previous flags" time="0.156">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/fatalWorkerError.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:10" time="3.167" tests="1">
    <testcase classname="" name="fails a test that terminates the worker with a fatal error" time="3.117">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/toMatchSnapshotWithRetries.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:10" time="4.435" tests="2">
    <testcase classname="" name="works with a single snapshot" time="2.153">
    </testcase>
    <testcase classname="" name="works when multiple tests have snapshots but only one of them failed multiple times" time="2.208">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/watchModePatterns.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:11" time="3.503" tests="2">
    <testcase classname="" name="can press &quot;p&quot; to filter by file name" time="1.471">
    </testcase>
    <testcase classname="" name="can press &quot;t&quot; to filter by test name" time="1.775">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/unexpectedToken.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:12" time="3.411" tests="3">
    <testcase classname="" name="triggers unexpected token error message for non-JS assets" time="0.98">
    </testcase>
    <testcase classname="" name="triggers unexpected token error message for untranspiled node_modules" time="0.794">
    </testcase>
    <testcase classname="" name="does not trigger unexpected token error message for regular syntax errors" time="1.539">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jestRequireMock.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:14" time="2.119" tests="1">
    <testcase classname="" name="understands dependencies using jest.requireMock" time="1.909">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/typescriptCoverage.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:13" time="2.893" tests="1">
    <testcase classname="" name="instruments and collects coverage for typescript files" time="2.83">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jest.config.js.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:15" time="2.134" tests="3">
    <testcase classname="" name="works with jest.config.js" time="1.016">
    </testcase>
    <testcase classname="" name="traverses directory tree up until it finds jest.config" time="0.882">
    </testcase>
    <testcase classname="" name="invalid JS in jest.config.js" time="0.135">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireMainResetModules.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:16" time="1.961" tests="2">
    <testcase classname="" name="`require.main` on using `--resetModules=&apos;true&apos;` should not be undefined" time="0.97">
    </testcase>
    <testcase classname="" name="`require.main` on using `jest.resetModules()` should not be undefined" time="0.915">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/modernFakeTimers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:16" time="1.68" tests="2">
    <testcase classname="modern implementation of fake timers" name="should be possible to use modern implementation from config" time="0.792">
    </testcase>
    <testcase classname="modern implementation of fake timers" name="should be possible to use modern implementation from jest-object" time="0.831">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/runTestsByPath.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:16" time="1.999" tests="1">
    <testcase classname="" name="runs tests by exact path" time="1.938">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testEnvironment.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:17" time="1.628" tests="1">
    <testcase classname="" name="respects testEnvironment docblock" time="1.513">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/circusConcurrentEach.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:18" time="1.591" tests="2">
    <testcase classname="" name="works with concurrent.each" time="0.817">
    </testcase>
    <testcase classname="" name="works with concurrent.only.each" time="0.695">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/autoRestoreMocks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:18" time="1.797" tests="2">
    <testcase classname="" name="suite with auto-restore" time="0.822">
    </testcase>
    <testcase classname="" name="suite without auto-restore" time="0.845">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/jsonReporter.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:18" time="1.514" tests="2">
    <testcase classname="JSON Reporter" name="writes test result to sum.result.json" time="0.721">
    </testcase>
    <testcase classname="JSON Reporter" name="outputs coverage report" time="0.698">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/autoResetMocks.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:18" time="1.666" tests="2">
    <testcase classname="" name="suite with auto-reset" time="0.801">
    </testcase>
    <testcase classname="" name="suite without auto-reset" time="0.827">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/focusedTests.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:20" time="0.888" tests="1">
    <testcase classname="" name="runs only &quot;it.only&quot; tests" time="0.834">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/watchModeOnlyFailed.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:20" time="1.394" tests="1">
    <testcase classname="" name="can press &quot;f&quot; to run only failed tests" time="1.341">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/beforeEachQueue.ts" errors="0" failures="0" skipped="1" timestamp="2021-01-24T19:24:21" time="0.055" tests="2">
    <testcase classname="" name="does not work on jest-circus" time="0.001">
    </testcase>
    <testcase classname="Correct beforeEach order" name="ensures the correct order for beforeEach" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/extraGlobals.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:20" time="1.011" tests="1">
    <testcase classname="" name="works with injected globals" time="0.962">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/snapshotSerializers.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:19" time="2.065" tests="2">
    <testcase classname="Snapshot serializers" name="renders snapshot" time="0.607">
    </testcase>
    <testcase classname="Snapshot serializers" name="compares snapshots correctly" time="1.365">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/locationInResults.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:20" time="1.764" tests="2">
    <testcase classname="" name="defaults to null for location" time="0.836">
    </testcase>
    <testcase classname="" name="adds correct location info when provided with flag" time="0.859">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/consoleLogOutputWhenRunInBand.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:21" time="0.793" tests="1">
    <testcase classname="" name="prints console.logs when run with forceExit" time="0.726">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/dependencyClash.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:22" time="0.833" tests="1">
    <testcase classname="" name="does not require project modules from inside node_modules" time="0.723">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/coverageWithoutTransform.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:21" time="1.075" tests="1">
    <testcase classname="" name="produces code coverage for uncovered files without transformer" time="1.021">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/cliHandlesExactFilenames.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:22" time="1.23" tests="2">
    <testcase classname="" name="CLI accepts exact file names if matchers matched" time="0.741">
    </testcase>
    <testcase classname="" name="CLI skips exact file names if no matchers matched" time="0.389">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireMainAfterCreateRequire.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:22" time="0.966" tests="1">
    <testcase classname="on node &gt;=12.2.0" name="`require.main` not undefined after createRequire" time="0.891">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resetModules.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:22" time="0.926" tests="1">
    <testcase classname="" name="jest.resetModules should not error when _isMockFunction is defined but not boolean" time="0.883">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/watchModeUpdateSnapshot.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:23" time="1.075" tests="1">
    <testcase classname="" name="can press &quot;u&quot; to update snapshots" time="0.993">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/generatorMock.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:23" time="1.027" tests="1">
    <testcase classname="" name="mock works with generator" time="0.974">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resolveGetPaths.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:23" time="1.155" tests="1">
    <testcase classname="" name="require.resolve.paths" time="1.119">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/v8Coverage.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:23" time="2.412" tests="2">
    <testcase classname="" name="prints coverage with missing sourcemaps" time="1.003">
    </testcase>
    <testcase classname="" name="prints coverage with empty sourcemaps" time="1.338">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/resolveWithPaths.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:24" time="1.17" tests="1">
    <testcase classname="" name="require.resolve with paths" time="1.117">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/logHeapUsage.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:24" time="0.884" tests="1">
    <testcase classname="" name="logs memory usage" time="0.83">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireMain.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:24" time="1.137" tests="1">
    <testcase classname="" name="provides `require.main` set to test suite module" time="1.009">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/snapshotMockFs.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:25" time="0.883" tests="1">
    <testcase classname="" name="store snapshot even if fs is mocked" time="0.8">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/snapshot-unknown.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:25" time="0.838" tests="1">
    <testcase classname="Snapshot serializers" name="renders snapshot" time="0.798">
    </testcase>
  </testsuite>
  <testsuite name="examples/angular/app.component.spec.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:25" time="0.654" tests="3">
    <testcase classname="AppComponent" name="should create the app" time="0.069">
    </testcase>
    <testcase classname="AppComponent" name="should have as title &apos;angular&apos;" time="0.028">
    </testcase>
    <testcase classname="AppComponent" name="should render title in a h1 tag" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/stackTraceNoCaptureStackTrace.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:25" time="0.899" tests="1">
    <testcase classname="" name="prints a usable stack trace even if no Error.captureStackTrace" time="0.848">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/testNamePatternSkipped.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:26" time="0.991" tests="1">
    <testcase classname="" name="testNamePattern skipped" time="0.924">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/failureDetailsProperty.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:26" time="0.907" tests="1">
    <testcase classname="" name="that the failureDetails property is set" time="0.856">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/snapshotResolver.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:26" time="0.823" tests="1">
    <testcase classname="Custom snapshot resolver" name="Resolves snapshot files using custom resolver" time="0.735">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/processExit.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:26" time="1.07" tests="1">
    <testcase classname="" name="prints stack trace pointing to process.exit call" time="1.013">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/nodePath.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:27" time="0.866" tests="1">
    <testcase classname="" name="supports NODE_PATH" time="0.833">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/verbose.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:27" time="0.683" tests="1">
    <testcase classname="" name="Verbose Reporter" time="0.631">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/listTests.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:27" time="0.945" tests="2">
    <testcase classname="--listTests flag" name="causes tests to be printed in different lines" time="0.478">
    </testcase>
    <testcase classname="--listTests flag" name="causes tests to be printed out as JSON when using the --json flag" time="0.404">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/createProcessObject.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:27" time="0.908" tests="1">
    <testcase classname="" name="allows retrieving the current domain" time="0.867">
    </testcase>
  </testsuite>
  <testsuite name="examples/react-testing-library/__tests__/CheckboxWithLabel-test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:28" time="0.469" tests="1">
    <testcase classname="" name="CheckboxWithLabel changes the text after click" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="examples/angular/shared/data.service.spec.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:28" time="0.431" tests="2">
    <testcase classname="Service: DataService" name="should create service" time="0.02">
    </testcase>
    <testcase classname="Service: DataService" name="should return the right title" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/environmentAfterTeardown.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:28" time="0.892" tests="1">
    <testcase classname="" name="prints useful error for environment methods after test is done" time="0.846">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/esmConfigFile.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:28" time="0.526" tests="3">
    <testcase classname="" name="reads config from cjs file" time="0.157">
    </testcase>
    <testcase classname="on node ^12.17.0 || &gt;=13.2.0" name="reads config from mjs file" time="0.202">
    </testcase>
    <testcase classname="on node ^12.17.0 || &gt;=13.2.0" name="reads config from js file when package.json#type=module" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="examples/enzyme/__tests__/CheckboxWithLabel-test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:28" time="0.434" tests="1">
    <testcase classname="" name="CheckboxWithLabel changes the text after click" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="examples/module-mock/__tests__/mock_per_test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.116" tests="2">
    <testcase classname="define mock per test" name="uses mocked module" time="0.002">
    </testcase>
    <testcase classname="define mock per test" name="uses actual module" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="examples/mongodb/__test__/db.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.236" tests="1">
    <testcase classname="" name="should aggregate docs from collection" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="examples/snapshot/__tests__/link.react.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.181" tests="4">
    <testcase classname="" name="renders correctly" time="0.006">
    </testcase>
    <testcase classname="" name="renders as an anchor when no page is set" time="0.001">
    </testcase>
    <testcase classname="" name="properly escapes quotes" time="0.001">
    </testcase>
    <testcase classname="" name="changes the class when hovered" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="examples/typescript/__tests__/CheckboxWithLabel-test.tsx" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.227" tests="1">
    <testcase classname="" name="CheckboxWithLabel changes the text after click" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="examples/react/__tests__/CheckboxWithLabel-test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.256" tests="1">
    <testcase classname="" name="CheckboxWithLabel changes the text after click" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/showConfig.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.195" tests="1">
    <testcase classname="" name="--showConfig outputs config info and exits" time="0.144">
    </testcase>
  </testsuite>
  <testsuite name="examples/snapshot/__tests__/clock.react.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.062" tests="1">
    <testcase classname="" name="renders correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="examples/timer/__tests__/infinite_timer_game.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.094" tests="1">
    <testcase classname="" name="schedules a 10-second timer after 1 second" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="examples/jquery/__tests__/fetch_current_user.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.196" tests="2">
    <testcase classname="" name="calls into $.ajax with the correct params" time="0.073">
    </testcase>
    <testcase classname="" name="calls the callback when $.ajax requests are finished" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="examples/jquery/__tests__/display_user.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.196" tests="1">
    <testcase classname="" name="displays a user after a click" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="examples/timer/__tests__/timer_game.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.074" tests="3">
    <testcase classname="timerGame" name="waits 1 second before ending the game" time="0.008">
    </testcase>
    <testcase classname="timerGame" name="calls the callback after 1 second via runAllTimers" time="0.002">
    </testcase>
    <testcase classname="timerGame" name="calls the callback after 1 second via advanceTimersByTime" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/async/__tests__/user.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.096" tests="8">
    <testcase classname="" name="works with resolves" time="0.001">
    </testcase>
    <testcase classname="" name="works with promises" time="0">
    </testcase>
    <testcase classname="" name="works with async/await" time="0">
    </testcase>
    <testcase classname="" name="works with async/await and resolves" time="0.001">
    </testcase>
    <testcase classname="" name="tests error with rejects" time="0">
    </testcase>
    <testcase classname="" name="tests error with promises" time="0">
    </testcase>
    <testcase classname="" name="tests error with async/await" time="0.001">
    </testcase>
    <testcase classname="" name="tests error with async/await and rejects" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/automatic-mocks/__tests__/createMockFromModule.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.115" tests="2">
    <testcase classname="" name="implementation created by automock" time="0.001">
    </testcase>
    <testcase classname="" name="implementation created by jest.createMockFromModule" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/manual-mocks/__tests__/file_summarizer.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.087" tests="1">
    <testcase classname="listFilesInDirectorySync" name="includes all files in the directory in the summary" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="examples/typescript/__tests__/calc.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.276" tests="6">
    <testcase classname="calc - mocks" name="returns result from subtract" time="0.001">
    </testcase>
    <testcase classname="calc - mocks" name="returns result from sum" time="0.001">
    </testcase>
    <testcase classname="calc - mocks" name="adds last result to memory" time="0">
    </testcase>
    <testcase classname="calc - mocks" name="subtracts last result to memory" time="0.001">
    </testcase>
    <testcase classname="calc - mocks" name="clears the memory" time="0.001">
    </testcase>
    <testcase classname="calc - mocks" name="throws an error when invalid Op is passed" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="examples/getting-started/sum.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.078" tests="1">
    <testcase classname="" name="adds 1 + 2 to equal 3" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/angular/shared/sub.service.spec.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.109" tests="1">
    <testcase classname="Service: SubService" name="should create service" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="examples/manual-mocks/__tests__/user.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.041" tests="1">
    <testcase classname="" name="if orginal user model" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/typescript/__tests__/sum-test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.069" tests="2">
    <testcase classname="" name="adds 1 + 2 to equal 3 in TScript" time="0.008">
    </testcase>
    <testcase classname="" name="adds 1 + 2 to equal 3 in JavaScript" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="examples/automatic-mocks/__tests__/automock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.074" tests="2">
    <testcase classname="" name="if utils are mocked" time="0">
    </testcase>
    <testcase classname="" name="mocked implementation" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/manual-mocks/__tests__/lodashMocking.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.109" tests="1">
    <testcase classname="" name="if lodash head is mocked" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/manual-mocks/__tests__/userMocked.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.105" tests="1">
    <testcase classname="" name="if user model is mocked" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/typescript/__tests__/sum.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.1" tests="2">
    <testcase classname="" name="adds 1 + 2 to equal 3 in Typescript" time="0.002">
    </testcase>
    <testcase classname="" name="adds 1 + 2 to equal 3 in JavaScript" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/custom-test-sequencer/b.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.021" tests="1">
    <testcase classname="" name="b" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/typescript/__tests__/sub-test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.043" tests="1">
    <testcase classname="" name="subtracts 5 - 1 to equal 4 in TypeScript" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="examples/module-mock/__tests__/full_mock.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.06" tests="1">
    <testcase classname="" name="does a full mock" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/global.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.031" tests="1">
    <testcase classname="" name="globals are properly defined" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/automatic-mocks/__tests__/disableAutomocking.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.024" tests="1">
    <testcase classname="" name="original implementation" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/timer-reset-mocks/after-reset-all-mocks/timerAndMock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.03" tests="2">
    <testcase classname="timers" name="should work before calling resetAllMocks" time="0.001">
    </testcase>
    <testcase classname="timers" name="should not break after calling resetAllMocks" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/requireV8Module.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.03" tests="1">
    <testcase classname="" name="v8 module" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/timer-reset-mocks/with-reset-mocks/timerWithMock.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.034" tests="1">
    <testcase classname="timers" name="should work before calling resetAllMocks" time="0">
    </testcase>
  </testsuite>
  <testsuite name="examples/module-mock/__tests__/partial_mock.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.215" tests="1">
    <testcase classname="" name="does a partial mock" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="e2e/custom-test-sequencer/d.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.021" tests="1">
    <testcase classname="" name="d" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/custom-test-sequencer/a.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.029" tests="1">
    <testcase classname="" name="a" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/custom-test-sequencer/e.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.027" tests="1">
    <testcase classname="" name="e" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/custom-test-sequencer/c.test.js" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:30" time="0.042" tests="1">
    <testcase classname="" name="c" time="0">
    </testcase>
  </testsuite>
  <testsuite name="e2e/__tests__/asyncAndCallback.test.ts" errors="0" failures="0" skipped="0" timestamp="2021-01-24T19:24:29" time="0.746" tests="1">
    <testcase classname="" name="errors when a test both returns a promise and takes a callback" time="0.704">
    </testcase>
  </testsuite>
</testsuites>