<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.runner.uwp</name>
    </assembly>
    <members>
        <member name="T:NUnit.Runner.App">
            <summary>
            The NUnit Xamarin test runner
            </summary>
        </member>
        <member name="M:NUnit.Runner.App.#ctor">
            <summary>
            Constructs a new app adding the current assembly to be tested
            </summary>
        </member>
        <member name="M:NUnit.Runner.App.AddTestAssembly(System.Reflection.Assembly)">
            <summary>
            Adds an assembly to be tested.
            </summary>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="P:NUnit.Runner.App.Options">
            <summary>
            User options for the test suite.
            </summary>
        </member>
        <member name="M:NUnit.Runner.Extensions.XamarinExtensions.Color(NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Gets the color to display for the test status
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Runner.Helpers.TestRunResult">
            <summary>
            Contains all results from all tests in a <see cref="T:NUnit.Runner.Helpers.TestPackage"/>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Helpers.TestPackage">
            <summary>
            Contains all assemblies for a test run, and controls execution of tests and collection of results
            </summary>
        </member>
        <member name="T:NUnit.Runner.Helpers.ResultSummary">
            <summary>
            Helper class used to summarize the result of a test run.
            </summary>
        </member>
        <member name="M:NUnit.Runner.Helpers.ResultSummary.GetTestResults">
             <summary>
            Gets all TestResults
             </summary>
             <returns></returns>
        </member>
        <member name="M:NUnit.Runner.Helpers.ResultSummary.GetTestXml">
            <summary>
            Summarizes all of the results and returns the test result xml document
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.OverallResult">
            <summary>
            The overall result of the test run.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.OverallResultColor">
            <summary>
            Gets the color for the overall result.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.TestCount">
            <summary>
            Gets the number of test cases for which results
            have been summarized. Any tests excluded by use of
            Category or Explicit attributes are not counted.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.AssertCount">
            <summary>
            Gets the number of asserts
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.RunCount">
            <summary>
            Returns the number of test cases actually run.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.NotRunCount">
            <summary>
            Returns the number of test cases not run for any reason.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.PassCount">
            <summary>
            Gets the count of passed tests
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.FailureCount">
            <summary>
            Gets count of failed tests, excluding errors and invalid tests
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.ErrorCount">
            <summary>
            Gets the error count
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.InconclusiveCount">
            <summary>
            Gets the count of inconclusive tests
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.InvalidCount">
            <summary>
            Returns the number of test cases that were not runnable
            due to errors in the signature of the class or method.
            Such tests are also counted as Errors.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.SkipCount">
            <summary>
            Gets the count of skipped tests, excluding ignored and explicit tests
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.IgnoreCount">
            <summary>
            Gets the ignore count
            </summary>
        </member>
        <member name="P:NUnit.Runner.Helpers.ResultSummary.ExplicitCount">
            <summary>
            Gets the count of tests not run because the are Explicit
            </summary>
        </member>
        <member name="T:NUnit.Runner.Messages.ErrorMessage">
            <summary>
            Represents an error message
            </summary>
        </member>
        <member name="F:NUnit.Runner.Messages.ErrorMessage.Name">
            <summary>
            The name of this message
            </summary>
        </member>
        <member name="M:NUnit.Runner.Messages.ErrorMessage.#ctor(System.String)">
            <summary>
            Constructs an <see cref="T:NUnit.Runner.Messages.ErrorMessage"/> with a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:NUnit.Runner.Messages.ErrorMessage.Message">
            <summary>
            The error message
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:NUnit.Runner.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:NUnit.Runner.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:NUnit.Runner.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:NUnit.Runner.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:NUnit.Runner.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:NUnit.Runner.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:NUnit.Runner.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:NUnit.Runner.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:NUnit.Runner.Services.TcpWriterInfo">
            <summary>
            Represents the host and port to connect to
            </summary>
        </member>
        <member name="M:NUnit.Runner.Services.TcpWriterInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:NUnit.Runner.Services.TcpWriterInfo"/>
            </summary>
            <param name="hostName">The host name or IP to connect to</param>
            <param name="port">The port to connect to</param>
            <param name="timeout">The timeout in seconds</param>
        </member>
        <member name="P:NUnit.Runner.Services.TcpWriterInfo.Hostname">
            <summary>
            The host to connect to
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TcpWriterInfo.Port">
            <summary>
            The port to connect to
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TcpWriterInfo.Timeout">
            <summary>
            The connect timeout in seconds
            </summary>
        </member>
        <member name="M:NUnit.Runner.Services.TcpWriterInfo.Equals(NUnit.Runner.Services.TcpWriterInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:NUnit.Runner.Services.TcpWriterInfo.ToString">
            <summary>
            Gets a string representation of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Runner.Services.TcpWriter">
            <summary>
            Redirects output to a Tcp connection
            </summary>
        </member>
        <member name="T:NUnit.Runner.Services.TestOptions">
            <summary>
            Options for the device test suite.
            </summary>
        </member>
        <member name="M:NUnit.Runner.Services.TestOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.AutoRun">
            <summary>
            If True, the tests will run automatically when the app starts
            otherwise you must run them manually.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.TerminateAfterExecution">
            <summary>
            If True, the application will terminate automatically after running the tests.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.OnCompletedCallback">
            <summary>
            Gets or sets the callback that will be called after running the tests.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.TcpWriterParameters">
            <summary>
            Information about the tcp listener host and port.
            For now, send result as XML to the listening server.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.CreateXmlResultFile">
            <summary>
            Creates a NUnit Xml result file on the host file system using PCLStorage library.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.LogToOutput">
            <summary>
            If True, test results will be logged to the application output.
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.ResultFilePath">
            <summary>
            File path for the xml result file
            Default is [LocalStorage]/TestResults.xml
            </summary>
        </member>
        <member name="P:NUnit.Runner.Services.TestOptions.XmlTransformFile">
            <summary>
            Gets or sets the xslt transform file for the results.
            </summary>
        </member>
        <member name="M:NUnit.Runner.Services.XmlFileProcessor.CreateFolderRecursive(System.String)">
            <summary>
            Create a folder from the full folder path if it does not exist
            Throws exception if acess to the path is denied
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Runner.ViewModel.BaseViewModel.Navigation">
            <summary>
            So that we can navigate from within the view model
            </summary>
        </member>
        <member name="M:NUnit.Runner.ViewModel.ResultsViewModel.#ctor(System.Collections.Generic.IReadOnlyCollection{NUnit.Framework.Interfaces.ITestResult},System.Boolean)">
            <summary>
            Constructs the view model
            </summary>
            <param name="results">The package of all results in run</param>
            <param name="viewAll">If true, views all tests, otherwise only shows those
            that did not pass</param>
        </member>
        <member name="P:NUnit.Runner.ViewModel.ResultsViewModel.Results">
            <summary>
            A list of tests that did not pass
            </summary>
        </member>
        <member name="M:NUnit.Runner.ViewModel.ResultsViewModel.AddTestResults(NUnit.Framework.Interfaces.ITestResult,System.Boolean)">
            <summary>
            Add all tests that did not pass to the Results collection
            </summary>
            <param name="result"></param>
            <param name="viewAll"></param>
        </member>
        <member name="P:NUnit.Runner.ViewModel.ResultViewModel.Color">
            <summary>
            Gets the color for this result.
            </summary>
        </member>
        <member name="P:NUnit.Runner.ViewModel.SummaryViewModel.Options">
            <summary>
            User options for the test suite.
            </summary>
        </member>
        <member name="M:NUnit.Runner.ViewModel.SummaryViewModel.OnAppearing">
            <summary>
            Called from the view when the view is appearing
            </summary>
        </member>
        <member name="P:NUnit.Runner.ViewModel.SummaryViewModel.Results">
            <summary>
            The overall test results
            </summary>
        </member>
        <member name="P:NUnit.Runner.ViewModel.SummaryViewModel.Running">
            <summary>
            True if tests are currently running
            </summary>
        </member>
        <member name="P:NUnit.Runner.ViewModel.SummaryViewModel.HasResults">
            <summary>
            True if we have test results to display
            </summary>
        </member>
        <member name="M:NUnit.Runner.ViewModel.SummaryViewModel.AddTest(System.Reflection.Assembly)">
            <summary>
            Adds an assembly to be tested.
            </summary>
            <param name="testAssembly">The test assembly.</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Runner.ViewModel.TestDetailsViewModel.Color">
            <summary>
            Gets the color for this result.
            </summary>
        </member>
        <member name="T:NUnit.Runner.View.ResultsView">
            <summary>
            Xamarin.Forms view of a list of test results
            </summary>
        </member>
        <member name="T:NUnit.Runner.View.SummaryView">
            <summary>
            The main Xamarin.Forms view of the application
            </summary>
        </member>
        <member name="M:NUnit.Runner.View.SummaryView.OnAppearing">
            <summary>
            Called when the view is appearing
            </summary>
        </member>
        <member name="T:NUnit.Runner.View.TestView">
            <summary>
            Xamarin.Forms view of an individual test result
            </summary>
        </member>
        <member name="T:NUnit.Runner.View.ExploreView">
            <summary>
            A Xamarin.Forms view containing a collection of test cases/suites
            </summary>
        </member>
    </members>
</doc>
