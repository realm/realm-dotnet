// <auto-generated />
#nullable enable

using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using Realms;
using Realms.Schema;
using Realms.Tests;
using Realms.Tests.Database;
using Realms.Weaving;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestEmbeddedObject = Realms.IEmbeddedObject;
using TestRealmObject = Realms.IRealmObject;

namespace Realms.Tests
{
    [Generated]
    [Woven(typeof(DictionariesObjectObjectHelper)), Realms.Preserve(AllMembers = true)]
    public partial class DictionariesObject : IRealmObject, INotifyPropertyChanged, IReflectableType
    {

        [Realms.Preserve]
        static DictionariesObject()
        {
            Realms.Serialization.RealmObjectSerializer.Register(new DictionariesObjectSerializer());
        }

        /// <summary>
        /// Defines the schema for the <see cref="DictionariesObject"/> class.
        /// </summary>
        public static Realms.Schema.ObjectSchema RealmSchema = new Realms.Schema.ObjectSchema.Builder("DictionariesObject", ObjectSchema.ObjectType.RealmObject)
        {
            Realms.Schema.Property.PrimitiveDictionary("CharDictionary", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("ByteDictionary", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("Int16Dictionary", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("Int32Dictionary", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("Int64Dictionary", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("SingleDictionary", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "SingleDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("DoubleDictionary", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("BooleanDictionary", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("DecimalDictionary", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("Decimal128Dictionary", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("ObjectIdDictionary", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("StringDictionary", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableStringDictionary", Realms.RealmValueType.String, areElementsNullable: true, managedName: "NullableStringDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("ByteArrayDictionary", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("DateTimeOffsetDictionary", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableCharDictionary", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableCharDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableByteDictionary", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableByteDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt16Dictionary", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt16Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt32Dictionary", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt32Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt64Dictionary", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt64Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableSingleDictionary", Realms.RealmValueType.Float, areElementsNullable: true, managedName: "NullableSingleDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDoubleDictionary", Realms.RealmValueType.Double, areElementsNullable: true, managedName: "NullableDoubleDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableBooleanDictionary", Realms.RealmValueType.Bool, areElementsNullable: true, managedName: "NullableBooleanDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDateTimeOffsetDictionary", Realms.RealmValueType.Date, areElementsNullable: true, managedName: "NullableDateTimeOffsetDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDecimalDictionary", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimalDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDecimal128Dictionary", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimal128Dictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableObjectIdDictionary", Realms.RealmValueType.ObjectId, areElementsNullable: true, managedName: "NullableObjectIdDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("NullableBinaryDictionary", Realms.RealmValueType.Data, areElementsNullable: true, managedName: "NullableBinaryDictionary"),
            Realms.Schema.Property.PrimitiveDictionary("BinaryDictionary", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "BinaryDictionary"),
            Realms.Schema.Property.ObjectDictionary("ObjectDictionary", "IntPropertyObject", managedName: "ObjectDictionary"),
            Realms.Schema.Property.ObjectDictionary("EmbeddedObjectDictionary", "EmbeddedIntPropertyObject", managedName: "EmbeddedObjectDictionary"),
            Realms.Schema.Property.RealmValueDictionary("RealmValueDictionary", managedName: "RealmValueDictionary"),
        }.Build();

        #region IRealmObject implementation

        private IDictionariesObjectAccessor? _accessor;

        Realms.IRealmAccessor Realms.IRealmObjectBase.Accessor => Accessor;

        private IDictionariesObjectAccessor Accessor => _accessor ??= new DictionariesObjectUnmanagedAccessor(typeof(DictionariesObject));

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsManaged => Accessor.IsManaged;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsValid => Accessor.IsValid;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsFrozen => Accessor.IsFrozen;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Realm? Realm => Accessor.Realm;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Schema.ObjectSchema ObjectSchema => Accessor.ObjectSchema!;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.DynamicObjectApi DynamicApi => Accessor.DynamicApi;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public int BacklinksCount => Accessor.BacklinksCount;

        void ISettableManagedAccessor.SetManagedAccessor(Realms.IRealmAccessor managedAccessor, Realms.Weaving.IRealmObjectHelper? helper, bool update, bool skipDefaults)
        {
            var newAccessor = (IDictionariesObjectAccessor)managedAccessor;
            var oldAccessor = _accessor;
            _accessor = newAccessor;

            if (helper != null && oldAccessor != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharDictionary.Clear();
                    newAccessor.ByteDictionary.Clear();
                    newAccessor.Int16Dictionary.Clear();
                    newAccessor.Int32Dictionary.Clear();
                    newAccessor.Int64Dictionary.Clear();
                    newAccessor.SingleDictionary.Clear();
                    newAccessor.DoubleDictionary.Clear();
                    newAccessor.BooleanDictionary.Clear();
                    newAccessor.DecimalDictionary.Clear();
                    newAccessor.Decimal128Dictionary.Clear();
                    newAccessor.ObjectIdDictionary.Clear();
                    newAccessor.StringDictionary.Clear();
                    newAccessor.NullableStringDictionary.Clear();
                    newAccessor.ByteArrayDictionary.Clear();
                    newAccessor.DateTimeOffsetDictionary.Clear();
                    newAccessor.NullableCharDictionary.Clear();
                    newAccessor.NullableByteDictionary.Clear();
                    newAccessor.NullableInt16Dictionary.Clear();
                    newAccessor.NullableInt32Dictionary.Clear();
                    newAccessor.NullableInt64Dictionary.Clear();
                    newAccessor.NullableSingleDictionary.Clear();
                    newAccessor.NullableDoubleDictionary.Clear();
                    newAccessor.NullableBooleanDictionary.Clear();
                    newAccessor.NullableDateTimeOffsetDictionary.Clear();
                    newAccessor.NullableDecimalDictionary.Clear();
                    newAccessor.NullableDecimal128Dictionary.Clear();
                    newAccessor.NullableObjectIdDictionary.Clear();
                    newAccessor.NullableBinaryDictionary.Clear();
                    newAccessor.BinaryDictionary.Clear();
                    newAccessor.ObjectDictionary.Clear();
                    newAccessor.EmbeddedObjectDictionary.Clear();
                    newAccessor.RealmValueDictionary.Clear();
                }

                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharDictionary, newAccessor.CharDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteDictionary, newAccessor.ByteDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16Dictionary, newAccessor.Int16Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32Dictionary, newAccessor.Int32Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64Dictionary, newAccessor.Int64Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.SingleDictionary, newAccessor.SingleDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleDictionary, newAccessor.DoubleDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanDictionary, newAccessor.BooleanDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalDictionary, newAccessor.DecimalDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128Dictionary, newAccessor.Decimal128Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdDictionary, newAccessor.ObjectIdDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringDictionary, newAccessor.StringDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableStringDictionary, newAccessor.NullableStringDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayDictionary, newAccessor.ByteArrayDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetDictionary, newAccessor.DateTimeOffsetDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableCharDictionary, newAccessor.NullableCharDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteDictionary, newAccessor.NullableByteDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt16Dictionary, newAccessor.NullableInt16Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt32Dictionary, newAccessor.NullableInt32Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt64Dictionary, newAccessor.NullableInt64Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableSingleDictionary, newAccessor.NullableSingleDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDoubleDictionary, newAccessor.NullableDoubleDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBooleanDictionary, newAccessor.NullableBooleanDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDateTimeOffsetDictionary, newAccessor.NullableDateTimeOffsetDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimalDictionary, newAccessor.NullableDecimalDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimal128Dictionary, newAccessor.NullableDecimal128Dictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableObjectIdDictionary, newAccessor.NullableObjectIdDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBinaryDictionary, newAccessor.NullableBinaryDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BinaryDictionary, newAccessor.BinaryDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectDictionary, newAccessor.ObjectDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.EmbeddedObjectDictionary, newAccessor.EmbeddedObjectDictionary, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueDictionary, newAccessor.RealmValueDictionary, update, skipDefaults);
            }

            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }

            OnManaged();
        }

        #endregion

        /// <summary>
        /// Called when the object has been managed by a Realm.
        /// </summary>
        /// <remarks>
        /// This method will be called either when a managed object is materialized or when an unmanaged object has been
        /// added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
        /// it is not yet clear whether the object is managed or not.
        /// </remarks>
        partial void OnManaged();

        private event PropertyChangedEventHandler? _propertyChanged;

        /// <inheritdoc />
        public event PropertyChangedEventHandler? PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }

                _propertyChanged += value;
            }

            remove
            {
                _propertyChanged -= value;

                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }

        /// <summary>
        /// Called when a property has changed on this class.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        /// <remarks>
        /// For this method to be called, you need to have first subscribed to <see cref="PropertyChanged"/>.
        /// This can be used to react to changes to the current object, e.g. raising <see cref="PropertyChanged"/> for computed properties.
        /// </remarks>
        /// <example>
        /// <code>
        /// class MyClass : IRealmObject
        /// {
        ///     public int StatusCodeRaw { get; set; }
        ///     public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
        ///     partial void OnPropertyChanged(string propertyName)
        ///     {
        ///         if (propertyName == nameof(StatusCodeRaw))
        ///         {
        ///             RaisePropertyChanged(nameof(StatusCode));
        ///         }
        ///     }
        /// }
        /// </code>
        /// Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="PropertyChanged"/>
        /// subscribers that <c>StatusCode</c> has changed, we implement <see cref="OnPropertyChanged"/> and
        /// raise <see cref="PropertyChanged"/> manually by calling <see cref="RaisePropertyChanged"/>.
        /// </example>
        partial void OnPropertyChanged(string? propertyName);

        private void RaisePropertyChanged([CallerMemberName] string propertyName = "")
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }

        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }

        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }

        /// <summary>
        /// Converts a <see cref="Realms.RealmValue"/> to <see cref="DictionariesObject"/>. Equivalent to <see cref="Realms.RealmValue.AsNullableRealmObject{T}"/>.
        /// </summary>
        /// <param name="val">The <see cref="Realms.RealmValue"/> to convert.</param>
        /// <returns>The <see cref="DictionariesObject"/> stored in the <see cref="Realms.RealmValue"/>.</returns>
        public static explicit operator DictionariesObject?(Realms.RealmValue val) => val.Type == Realms.RealmValueType.Null ? null : val.AsRealmObject<DictionariesObject>();

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.RealmValue"/> from <see cref="DictionariesObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.RealmValue"/>.</param>
        /// <returns>A <see cref="Realms.RealmValue"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.RealmValue(DictionariesObject? val) => val == null ? Realms.RealmValue.Null : Realms.RealmValue.Object(val);

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.QueryArgument"/> from <see cref="DictionariesObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.QueryArgument"/>.</param>
        /// <returns>A <see cref="Realms.QueryArgument"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.QueryArgument(DictionariesObject? val) => (Realms.RealmValue)val;

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public TypeInfo GetTypeInfo() => Accessor.GetTypeInfo(this);

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj is InvalidObject)
            {
                return !IsValid;
            }

            if (!(obj is Realms.IRealmObjectBase iro))
            {
                return false;
            }

            return Accessor.Equals(iro.Accessor);
        }

        /// <inheritdoc />
        public override int GetHashCode() => IsManaged ? Accessor.GetHashCode() : base.GetHashCode();

        /// <inheritdoc />
        public override string? ToString() => Accessor.ToString();

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class DictionariesObjectObjectHelper : Realms.Weaving.IRealmObjectHelper
        {
            public void CopyToRealm(Realms.IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }

            public Realms.ManagedAccessor CreateAccessor() => new DictionariesObjectManagedAccessor();

            public Realms.IRealmObjectBase CreateInstance() => new DictionariesObject();

            public bool TryGetPrimaryKeyValue(Realms.IRealmObjectBase instance, out RealmValue value)
            {
                value = RealmValue.Null;
                return false;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        internal interface IDictionariesObjectAccessor : Realms.IRealmAccessor
        {
            System.Collections.Generic.IDictionary<string, char> CharDictionary { get; }

            System.Collections.Generic.IDictionary<string, byte> ByteDictionary { get; }

            System.Collections.Generic.IDictionary<string, short> Int16Dictionary { get; }

            System.Collections.Generic.IDictionary<string, int> Int32Dictionary { get; }

            System.Collections.Generic.IDictionary<string, long> Int64Dictionary { get; }

            System.Collections.Generic.IDictionary<string, float> SingleDictionary { get; }

            System.Collections.Generic.IDictionary<string, double> DoubleDictionary { get; }

            System.Collections.Generic.IDictionary<string, bool> BooleanDictionary { get; }

            System.Collections.Generic.IDictionary<string, decimal> DecimalDictionary { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dictionary { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDictionary { get; }

            System.Collections.Generic.IDictionary<string, string> StringDictionary { get; }

            System.Collections.Generic.IDictionary<string, string?> NullableStringDictionary { get; }

            System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDictionary { get; }

            System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDictionary { get; }

            System.Collections.Generic.IDictionary<string, char?> NullableCharDictionary { get; }

            System.Collections.Generic.IDictionary<string, byte?> NullableByteDictionary { get; }

            System.Collections.Generic.IDictionary<string, short?> NullableInt16Dictionary { get; }

            System.Collections.Generic.IDictionary<string, int?> NullableInt32Dictionary { get; }

            System.Collections.Generic.IDictionary<string, long?> NullableInt64Dictionary { get; }

            System.Collections.Generic.IDictionary<string, float?> NullableSingleDictionary { get; }

            System.Collections.Generic.IDictionary<string, double?> NullableDoubleDictionary { get; }

            System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDictionary { get; }

            System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDictionary { get; }

            System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDictionary { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dictionary { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDictionary { get; }

            System.Collections.Generic.IDictionary<string, byte[]?> NullableBinaryDictionary { get; }

            System.Collections.Generic.IDictionary<string, byte[]> BinaryDictionary { get; }

            System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDictionary { get; }

            System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDictionary { get; }

            System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDictionary { get; }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class DictionariesObjectManagedAccessor : Realms.ManagedAccessor, IDictionariesObjectAccessor
        {
            private System.Collections.Generic.IDictionary<string, char> _charDictionary = null!;
            public System.Collections.Generic.IDictionary<string, char> CharDictionary
            {
                get
                {
                    if (_charDictionary == null)
                    {
                        _charDictionary = GetDictionaryValue<char>("CharDictionary");
                    }

                    return _charDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte> _byteDictionary = null!;
            public System.Collections.Generic.IDictionary<string, byte> ByteDictionary
            {
                get
                {
                    if (_byteDictionary == null)
                    {
                        _byteDictionary = GetDictionaryValue<byte>("ByteDictionary");
                    }

                    return _byteDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, short> _int16Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, short> Int16Dictionary
            {
                get
                {
                    if (_int16Dictionary == null)
                    {
                        _int16Dictionary = GetDictionaryValue<short>("Int16Dictionary");
                    }

                    return _int16Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, int> _int32Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, int> Int32Dictionary
            {
                get
                {
                    if (_int32Dictionary == null)
                    {
                        _int32Dictionary = GetDictionaryValue<int>("Int32Dictionary");
                    }

                    return _int32Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, long> _int64Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, long> Int64Dictionary
            {
                get
                {
                    if (_int64Dictionary == null)
                    {
                        _int64Dictionary = GetDictionaryValue<long>("Int64Dictionary");
                    }

                    return _int64Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, float> _singleDictionary = null!;
            public System.Collections.Generic.IDictionary<string, float> SingleDictionary
            {
                get
                {
                    if (_singleDictionary == null)
                    {
                        _singleDictionary = GetDictionaryValue<float>("SingleDictionary");
                    }

                    return _singleDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, double> _doubleDictionary = null!;
            public System.Collections.Generic.IDictionary<string, double> DoubleDictionary
            {
                get
                {
                    if (_doubleDictionary == null)
                    {
                        _doubleDictionary = GetDictionaryValue<double>("DoubleDictionary");
                    }

                    return _doubleDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, bool> _booleanDictionary = null!;
            public System.Collections.Generic.IDictionary<string, bool> BooleanDictionary
            {
                get
                {
                    if (_booleanDictionary == null)
                    {
                        _booleanDictionary = GetDictionaryValue<bool>("BooleanDictionary");
                    }

                    return _booleanDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, decimal> _decimalDictionary = null!;
            public System.Collections.Generic.IDictionary<string, decimal> DecimalDictionary
            {
                get
                {
                    if (_decimalDictionary == null)
                    {
                        _decimalDictionary = GetDictionaryValue<decimal>("DecimalDictionary");
                    }

                    return _decimalDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> _decimal128Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dictionary
            {
                get
                {
                    if (_decimal128Dictionary == null)
                    {
                        _decimal128Dictionary = GetDictionaryValue<MongoDB.Bson.Decimal128>("Decimal128Dictionary");
                    }

                    return _decimal128Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> _objectIdDictionary = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDictionary
            {
                get
                {
                    if (_objectIdDictionary == null)
                    {
                        _objectIdDictionary = GetDictionaryValue<MongoDB.Bson.ObjectId>("ObjectIdDictionary");
                    }

                    return _objectIdDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, string> _stringDictionary = null!;
            public System.Collections.Generic.IDictionary<string, string> StringDictionary
            {
                get
                {
                    if (_stringDictionary == null)
                    {
                        _stringDictionary = GetDictionaryValue<string>("StringDictionary");
                    }

                    return _stringDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, string?> _nullableStringDictionary = null!;
            public System.Collections.Generic.IDictionary<string, string?> NullableStringDictionary
            {
                get
                {
                    if (_nullableStringDictionary == null)
                    {
                        _nullableStringDictionary = GetDictionaryValue<string?>("NullableStringDictionary");
                    }

                    return _nullableStringDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]> _byteArrayDictionary = null!;
            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDictionary
            {
                get
                {
                    if (_byteArrayDictionary == null)
                    {
                        _byteArrayDictionary = GetDictionaryValue<byte[]>("ByteArrayDictionary");
                    }

                    return _byteArrayDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, System.DateTimeOffset> _dateTimeOffsetDictionary = null!;
            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDictionary
            {
                get
                {
                    if (_dateTimeOffsetDictionary == null)
                    {
                        _dateTimeOffsetDictionary = GetDictionaryValue<System.DateTimeOffset>("DateTimeOffsetDictionary");
                    }

                    return _dateTimeOffsetDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, char?> _nullableCharDictionary = null!;
            public System.Collections.Generic.IDictionary<string, char?> NullableCharDictionary
            {
                get
                {
                    if (_nullableCharDictionary == null)
                    {
                        _nullableCharDictionary = GetDictionaryValue<char?>("NullableCharDictionary");
                    }

                    return _nullableCharDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte?> _nullableByteDictionary = null!;
            public System.Collections.Generic.IDictionary<string, byte?> NullableByteDictionary
            {
                get
                {
                    if (_nullableByteDictionary == null)
                    {
                        _nullableByteDictionary = GetDictionaryValue<byte?>("NullableByteDictionary");
                    }

                    return _nullableByteDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, short?> _nullableInt16Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, short?> NullableInt16Dictionary
            {
                get
                {
                    if (_nullableInt16Dictionary == null)
                    {
                        _nullableInt16Dictionary = GetDictionaryValue<short?>("NullableInt16Dictionary");
                    }

                    return _nullableInt16Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, int?> _nullableInt32Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, int?> NullableInt32Dictionary
            {
                get
                {
                    if (_nullableInt32Dictionary == null)
                    {
                        _nullableInt32Dictionary = GetDictionaryValue<int?>("NullableInt32Dictionary");
                    }

                    return _nullableInt32Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, long?> _nullableInt64Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, long?> NullableInt64Dictionary
            {
                get
                {
                    if (_nullableInt64Dictionary == null)
                    {
                        _nullableInt64Dictionary = GetDictionaryValue<long?>("NullableInt64Dictionary");
                    }

                    return _nullableInt64Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, float?> _nullableSingleDictionary = null!;
            public System.Collections.Generic.IDictionary<string, float?> NullableSingleDictionary
            {
                get
                {
                    if (_nullableSingleDictionary == null)
                    {
                        _nullableSingleDictionary = GetDictionaryValue<float?>("NullableSingleDictionary");
                    }

                    return _nullableSingleDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, double?> _nullableDoubleDictionary = null!;
            public System.Collections.Generic.IDictionary<string, double?> NullableDoubleDictionary
            {
                get
                {
                    if (_nullableDoubleDictionary == null)
                    {
                        _nullableDoubleDictionary = GetDictionaryValue<double?>("NullableDoubleDictionary");
                    }

                    return _nullableDoubleDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, bool?> _nullableBooleanDictionary = null!;
            public System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDictionary
            {
                get
                {
                    if (_nullableBooleanDictionary == null)
                    {
                        _nullableBooleanDictionary = GetDictionaryValue<bool?>("NullableBooleanDictionary");
                    }

                    return _nullableBooleanDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> _nullableDateTimeOffsetDictionary = null!;
            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDictionary
            {
                get
                {
                    if (_nullableDateTimeOffsetDictionary == null)
                    {
                        _nullableDateTimeOffsetDictionary = GetDictionaryValue<System.DateTimeOffset?>("NullableDateTimeOffsetDictionary");
                    }

                    return _nullableDateTimeOffsetDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, decimal?> _nullableDecimalDictionary = null!;
            public System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDictionary
            {
                get
                {
                    if (_nullableDecimalDictionary == null)
                    {
                        _nullableDecimalDictionary = GetDictionaryValue<decimal?>("NullableDecimalDictionary");
                    }

                    return _nullableDecimalDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> _nullableDecimal128Dictionary = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dictionary
            {
                get
                {
                    if (_nullableDecimal128Dictionary == null)
                    {
                        _nullableDecimal128Dictionary = GetDictionaryValue<MongoDB.Bson.Decimal128?>("NullableDecimal128Dictionary");
                    }

                    return _nullableDecimal128Dictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> _nullableObjectIdDictionary = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDictionary
            {
                get
                {
                    if (_nullableObjectIdDictionary == null)
                    {
                        _nullableObjectIdDictionary = GetDictionaryValue<MongoDB.Bson.ObjectId?>("NullableObjectIdDictionary");
                    }

                    return _nullableObjectIdDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]?> _nullableBinaryDictionary = null!;
            public System.Collections.Generic.IDictionary<string, byte[]?> NullableBinaryDictionary
            {
                get
                {
                    if (_nullableBinaryDictionary == null)
                    {
                        _nullableBinaryDictionary = GetDictionaryValue<byte[]?>("NullableBinaryDictionary");
                    }

                    return _nullableBinaryDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]> _binaryDictionary = null!;
            public System.Collections.Generic.IDictionary<string, byte[]> BinaryDictionary
            {
                get
                {
                    if (_binaryDictionary == null)
                    {
                        _binaryDictionary = GetDictionaryValue<byte[]>("BinaryDictionary");
                    }

                    return _binaryDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> _objectDictionary = null!;
            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDictionary
            {
                get
                {
                    if (_objectDictionary == null)
                    {
                        _objectDictionary = GetDictionaryValue<Realms.Tests.IntPropertyObject?>("ObjectDictionary");
                    }

                    return _objectDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> _embeddedObjectDictionary = null!;
            public System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDictionary
            {
                get
                {
                    if (_embeddedObjectDictionary == null)
                    {
                        _embeddedObjectDictionary = GetDictionaryValue<Realms.Tests.EmbeddedIntPropertyObject?>("EmbeddedObjectDictionary");
                    }

                    return _embeddedObjectDictionary;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.RealmValue> _realmValueDictionary = null!;
            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDictionary
            {
                get
                {
                    if (_realmValueDictionary == null)
                    {
                        _realmValueDictionary = GetDictionaryValue<Realms.RealmValue>("RealmValueDictionary");
                    }

                    return _realmValueDictionary;
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class DictionariesObjectUnmanagedAccessor : Realms.UnmanagedAccessor, IDictionariesObjectAccessor
        {
            public override ObjectSchema ObjectSchema => DictionariesObject.RealmSchema;

            public System.Collections.Generic.IDictionary<string, char> CharDictionary { get; } = new Dictionary<string, char>();

            public System.Collections.Generic.IDictionary<string, byte> ByteDictionary { get; } = new Dictionary<string, byte>();

            public System.Collections.Generic.IDictionary<string, short> Int16Dictionary { get; } = new Dictionary<string, short>();

            public System.Collections.Generic.IDictionary<string, int> Int32Dictionary { get; } = new Dictionary<string, int>();

            public System.Collections.Generic.IDictionary<string, long> Int64Dictionary { get; } = new Dictionary<string, long>();

            public System.Collections.Generic.IDictionary<string, float> SingleDictionary { get; } = new Dictionary<string, float>();

            public System.Collections.Generic.IDictionary<string, double> DoubleDictionary { get; } = new Dictionary<string, double>();

            public System.Collections.Generic.IDictionary<string, bool> BooleanDictionary { get; } = new Dictionary<string, bool>();

            public System.Collections.Generic.IDictionary<string, decimal> DecimalDictionary { get; } = new Dictionary<string, decimal>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dictionary { get; } = new Dictionary<string, MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDictionary { get; } = new Dictionary<string, MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IDictionary<string, string> StringDictionary { get; } = new Dictionary<string, string>();

            public System.Collections.Generic.IDictionary<string, string?> NullableStringDictionary { get; } = new Dictionary<string, string?>();

            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDictionary { get; } = new Dictionary<string, byte[]>();

            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDictionary { get; } = new Dictionary<string, System.DateTimeOffset>();

            public System.Collections.Generic.IDictionary<string, char?> NullableCharDictionary { get; } = new Dictionary<string, char?>();

            public System.Collections.Generic.IDictionary<string, byte?> NullableByteDictionary { get; } = new Dictionary<string, byte?>();

            public System.Collections.Generic.IDictionary<string, short?> NullableInt16Dictionary { get; } = new Dictionary<string, short?>();

            public System.Collections.Generic.IDictionary<string, int?> NullableInt32Dictionary { get; } = new Dictionary<string, int?>();

            public System.Collections.Generic.IDictionary<string, long?> NullableInt64Dictionary { get; } = new Dictionary<string, long?>();

            public System.Collections.Generic.IDictionary<string, float?> NullableSingleDictionary { get; } = new Dictionary<string, float?>();

            public System.Collections.Generic.IDictionary<string, double?> NullableDoubleDictionary { get; } = new Dictionary<string, double?>();

            public System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDictionary { get; } = new Dictionary<string, bool?>();

            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDictionary { get; } = new Dictionary<string, System.DateTimeOffset?>();

            public System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDictionary { get; } = new Dictionary<string, decimal?>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dictionary { get; } = new Dictionary<string, MongoDB.Bson.Decimal128?>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDictionary { get; } = new Dictionary<string, MongoDB.Bson.ObjectId?>();

            public System.Collections.Generic.IDictionary<string, byte[]?> NullableBinaryDictionary { get; } = new Dictionary<string, byte[]?>();

            public System.Collections.Generic.IDictionary<string, byte[]> BinaryDictionary { get; } = new Dictionary<string, byte[]>();

            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDictionary { get; } = new Dictionary<string, Realms.Tests.IntPropertyObject?>();

            public System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDictionary { get; } = new Dictionary<string, Realms.Tests.EmbeddedIntPropertyObject?>();

            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDictionary { get; } = new Dictionary<string, Realms.RealmValue>();

            public DictionariesObjectUnmanagedAccessor(Type objectType) : base(objectType)
            {
            }

            public override Realms.RealmValue GetValue(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}");
            }

            public override void SetValue(string propertyName, Realms.RealmValue val)
            {
                throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
            }

            public override void SetValueUnique(string propertyName, Realms.RealmValue val)
            {
                throw new InvalidOperationException("Cannot set the value of an non primary key property with SetValueUnique");
            }

            public override IList<T> GetListValue<T>(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}");
            }

            public override ISet<T> GetSetValue<T>(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}");
            }

            public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
            {
                return propertyName switch
                {
                    "CharDictionary" => (IDictionary<string, TValue>)CharDictionary,
                    "ByteDictionary" => (IDictionary<string, TValue>)ByteDictionary,
                    "Int16Dictionary" => (IDictionary<string, TValue>)Int16Dictionary,
                    "Int32Dictionary" => (IDictionary<string, TValue>)Int32Dictionary,
                    "Int64Dictionary" => (IDictionary<string, TValue>)Int64Dictionary,
                    "SingleDictionary" => (IDictionary<string, TValue>)SingleDictionary,
                    "DoubleDictionary" => (IDictionary<string, TValue>)DoubleDictionary,
                    "BooleanDictionary" => (IDictionary<string, TValue>)BooleanDictionary,
                    "DecimalDictionary" => (IDictionary<string, TValue>)DecimalDictionary,
                    "Decimal128Dictionary" => (IDictionary<string, TValue>)Decimal128Dictionary,
                    "ObjectIdDictionary" => (IDictionary<string, TValue>)ObjectIdDictionary,
                    "StringDictionary" => (IDictionary<string, TValue>)StringDictionary,
                    "NullableStringDictionary" => (IDictionary<string, TValue>)NullableStringDictionary,
                    "ByteArrayDictionary" => (IDictionary<string, TValue>)ByteArrayDictionary,
                    "DateTimeOffsetDictionary" => (IDictionary<string, TValue>)DateTimeOffsetDictionary,
                    "NullableCharDictionary" => (IDictionary<string, TValue>)NullableCharDictionary,
                    "NullableByteDictionary" => (IDictionary<string, TValue>)NullableByteDictionary,
                    "NullableInt16Dictionary" => (IDictionary<string, TValue>)NullableInt16Dictionary,
                    "NullableInt32Dictionary" => (IDictionary<string, TValue>)NullableInt32Dictionary,
                    "NullableInt64Dictionary" => (IDictionary<string, TValue>)NullableInt64Dictionary,
                    "NullableSingleDictionary" => (IDictionary<string, TValue>)NullableSingleDictionary,
                    "NullableDoubleDictionary" => (IDictionary<string, TValue>)NullableDoubleDictionary,
                    "NullableBooleanDictionary" => (IDictionary<string, TValue>)NullableBooleanDictionary,
                    "NullableDateTimeOffsetDictionary" => (IDictionary<string, TValue>)NullableDateTimeOffsetDictionary,
                    "NullableDecimalDictionary" => (IDictionary<string, TValue>)NullableDecimalDictionary,
                    "NullableDecimal128Dictionary" => (IDictionary<string, TValue>)NullableDecimal128Dictionary,
                    "NullableObjectIdDictionary" => (IDictionary<string, TValue>)NullableObjectIdDictionary,
                    "NullableBinaryDictionary" => (IDictionary<string, TValue>)NullableBinaryDictionary,
                    "BinaryDictionary" => (IDictionary<string, TValue>)BinaryDictionary,
                    "ObjectDictionary" => (IDictionary<string, TValue>)ObjectDictionary,
                    "EmbeddedObjectDictionary" => (IDictionary<string, TValue>)EmbeddedObjectDictionary,
                    "RealmValueDictionary" => (IDictionary<string, TValue>)RealmValueDictionary,
                    _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
                };
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class DictionariesObjectSerializer : Realms.Serialization.RealmObjectSerializerBase<DictionariesObject>
        {
            public override string SchemaName => "DictionariesObject";

            protected override void SerializeValue(MongoDB.Bson.Serialization.BsonSerializationContext context, BsonSerializationArgs args, DictionariesObject value)
            {
                context.Writer.WriteStartDocument();

                WriteDictionary(context, args, "CharDictionary", value.CharDictionary);
                WriteDictionary(context, args, "ByteDictionary", value.ByteDictionary);
                WriteDictionary(context, args, "Int16Dictionary", value.Int16Dictionary);
                WriteDictionary(context, args, "Int32Dictionary", value.Int32Dictionary);
                WriteDictionary(context, args, "Int64Dictionary", value.Int64Dictionary);
                WriteDictionary(context, args, "SingleDictionary", value.SingleDictionary);
                WriteDictionary(context, args, "DoubleDictionary", value.DoubleDictionary);
                WriteDictionary(context, args, "BooleanDictionary", value.BooleanDictionary);
                WriteDictionary(context, args, "DecimalDictionary", value.DecimalDictionary);
                WriteDictionary(context, args, "Decimal128Dictionary", value.Decimal128Dictionary);
                WriteDictionary(context, args, "ObjectIdDictionary", value.ObjectIdDictionary);
                WriteDictionary(context, args, "StringDictionary", value.StringDictionary);
                WriteDictionary(context, args, "NullableStringDictionary", value.NullableStringDictionary);
                WriteDictionary(context, args, "ByteArrayDictionary", value.ByteArrayDictionary);
                WriteDictionary(context, args, "DateTimeOffsetDictionary", value.DateTimeOffsetDictionary);
                WriteDictionary(context, args, "NullableCharDictionary", value.NullableCharDictionary);
                WriteDictionary(context, args, "NullableByteDictionary", value.NullableByteDictionary);
                WriteDictionary(context, args, "NullableInt16Dictionary", value.NullableInt16Dictionary);
                WriteDictionary(context, args, "NullableInt32Dictionary", value.NullableInt32Dictionary);
                WriteDictionary(context, args, "NullableInt64Dictionary", value.NullableInt64Dictionary);
                WriteDictionary(context, args, "NullableSingleDictionary", value.NullableSingleDictionary);
                WriteDictionary(context, args, "NullableDoubleDictionary", value.NullableDoubleDictionary);
                WriteDictionary(context, args, "NullableBooleanDictionary", value.NullableBooleanDictionary);
                WriteDictionary(context, args, "NullableDateTimeOffsetDictionary", value.NullableDateTimeOffsetDictionary);
                WriteDictionary(context, args, "NullableDecimalDictionary", value.NullableDecimalDictionary);
                WriteDictionary(context, args, "NullableDecimal128Dictionary", value.NullableDecimal128Dictionary);
                WriteDictionary(context, args, "NullableObjectIdDictionary", value.NullableObjectIdDictionary);
                WriteDictionary(context, args, "NullableBinaryDictionary", value.NullableBinaryDictionary);
                WriteDictionary(context, args, "BinaryDictionary", value.BinaryDictionary);
                WriteDictionary(context, args, "ObjectDictionary", value.ObjectDictionary);
                WriteDictionary(context, args, "EmbeddedObjectDictionary", value.EmbeddedObjectDictionary);
                WriteDictionary(context, args, "RealmValueDictionary", value.RealmValueDictionary);

                context.Writer.WriteEndDocument();
            }

            protected override DictionariesObject CreateInstance() => new DictionariesObject();

            protected override void ReadValue(DictionariesObject instance, string name, BsonDeserializationContext context)
            {
                switch (name)
                {
                    case "CharDictionary":
                    case "ByteDictionary":
                    case "Int16Dictionary":
                    case "Int32Dictionary":
                    case "Int64Dictionary":
                    case "SingleDictionary":
                    case "DoubleDictionary":
                    case "BooleanDictionary":
                    case "DecimalDictionary":
                    case "Decimal128Dictionary":
                    case "ObjectIdDictionary":
                    case "StringDictionary":
                    case "NullableStringDictionary":
                    case "ByteArrayDictionary":
                    case "DateTimeOffsetDictionary":
                    case "NullableCharDictionary":
                    case "NullableByteDictionary":
                    case "NullableInt16Dictionary":
                    case "NullableInt32Dictionary":
                    case "NullableInt64Dictionary":
                    case "NullableSingleDictionary":
                    case "NullableDoubleDictionary":
                    case "NullableBooleanDictionary":
                    case "NullableDateTimeOffsetDictionary":
                    case "NullableDecimalDictionary":
                    case "NullableDecimal128Dictionary":
                    case "NullableObjectIdDictionary":
                    case "NullableBinaryDictionary":
                    case "BinaryDictionary":
                    case "ObjectDictionary":
                    case "EmbeddedObjectDictionary":
                    case "RealmValueDictionary":
                        ReadDictionary(instance, name, context);
                        break;
                    default:
                        context.Reader.SkipValue();
                        break;
                }
            }

            protected override void ReadArrayElement(DictionariesObject instance, string name, BsonDeserializationContext context)
            {
                // No persisted list/set properties to deserialize
            }

            protected override void ReadDocumentField(DictionariesObject instance, string name, string fieldName, BsonDeserializationContext context)
            {
                switch (name)
                {
                    case "CharDictionary":
                        instance.CharDictionary[fieldName] = BsonSerializer.LookupSerializer<char>().Deserialize(context);
                        break;
                    case "ByteDictionary":
                        instance.ByteDictionary[fieldName] = BsonSerializer.LookupSerializer<byte>().Deserialize(context);
                        break;
                    case "Int16Dictionary":
                        instance.Int16Dictionary[fieldName] = BsonSerializer.LookupSerializer<short>().Deserialize(context);
                        break;
                    case "Int32Dictionary":
                        instance.Int32Dictionary[fieldName] = BsonSerializer.LookupSerializer<int>().Deserialize(context);
                        break;
                    case "Int64Dictionary":
                        instance.Int64Dictionary[fieldName] = BsonSerializer.LookupSerializer<long>().Deserialize(context);
                        break;
                    case "SingleDictionary":
                        instance.SingleDictionary[fieldName] = BsonSerializer.LookupSerializer<float>().Deserialize(context);
                        break;
                    case "DoubleDictionary":
                        instance.DoubleDictionary[fieldName] = BsonSerializer.LookupSerializer<double>().Deserialize(context);
                        break;
                    case "BooleanDictionary":
                        instance.BooleanDictionary[fieldName] = BsonSerializer.LookupSerializer<bool>().Deserialize(context);
                        break;
                    case "DecimalDictionary":
                        instance.DecimalDictionary[fieldName] = BsonSerializer.LookupSerializer<decimal>().Deserialize(context);
                        break;
                    case "Decimal128Dictionary":
                        instance.Decimal128Dictionary[fieldName] = BsonSerializer.LookupSerializer<MongoDB.Bson.Decimal128>().Deserialize(context);
                        break;
                    case "ObjectIdDictionary":
                        instance.ObjectIdDictionary[fieldName] = BsonSerializer.LookupSerializer<MongoDB.Bson.ObjectId>().Deserialize(context);
                        break;
                    case "StringDictionary":
                        instance.StringDictionary[fieldName] = BsonSerializer.LookupSerializer<string>().Deserialize(context);
                        break;
                    case "NullableStringDictionary":
                        instance.NullableStringDictionary[fieldName] = BsonSerializer.LookupSerializer<string?>().Deserialize(context);
                        break;
                    case "ByteArrayDictionary":
                        instance.ByteArrayDictionary[fieldName] = BsonSerializer.LookupSerializer<byte[]>().Deserialize(context);
                        break;
                    case "DateTimeOffsetDictionary":
                        instance.DateTimeOffsetDictionary[fieldName] = BsonSerializer.LookupSerializer<System.DateTimeOffset>().Deserialize(context);
                        break;
                    case "NullableCharDictionary":
                        instance.NullableCharDictionary[fieldName] = BsonSerializer.LookupSerializer<char?>().Deserialize(context);
                        break;
                    case "NullableByteDictionary":
                        instance.NullableByteDictionary[fieldName] = BsonSerializer.LookupSerializer<byte?>().Deserialize(context);
                        break;
                    case "NullableInt16Dictionary":
                        instance.NullableInt16Dictionary[fieldName] = BsonSerializer.LookupSerializer<short?>().Deserialize(context);
                        break;
                    case "NullableInt32Dictionary":
                        instance.NullableInt32Dictionary[fieldName] = BsonSerializer.LookupSerializer<int?>().Deserialize(context);
                        break;
                    case "NullableInt64Dictionary":
                        instance.NullableInt64Dictionary[fieldName] = BsonSerializer.LookupSerializer<long?>().Deserialize(context);
                        break;
                    case "NullableSingleDictionary":
                        instance.NullableSingleDictionary[fieldName] = BsonSerializer.LookupSerializer<float?>().Deserialize(context);
                        break;
                    case "NullableDoubleDictionary":
                        instance.NullableDoubleDictionary[fieldName] = BsonSerializer.LookupSerializer<double?>().Deserialize(context);
                        break;
                    case "NullableBooleanDictionary":
                        instance.NullableBooleanDictionary[fieldName] = BsonSerializer.LookupSerializer<bool?>().Deserialize(context);
                        break;
                    case "NullableDateTimeOffsetDictionary":
                        instance.NullableDateTimeOffsetDictionary[fieldName] = BsonSerializer.LookupSerializer<System.DateTimeOffset?>().Deserialize(context);
                        break;
                    case "NullableDecimalDictionary":
                        instance.NullableDecimalDictionary[fieldName] = BsonSerializer.LookupSerializer<decimal?>().Deserialize(context);
                        break;
                    case "NullableDecimal128Dictionary":
                        instance.NullableDecimal128Dictionary[fieldName] = BsonSerializer.LookupSerializer<MongoDB.Bson.Decimal128?>().Deserialize(context);
                        break;
                    case "NullableObjectIdDictionary":
                        instance.NullableObjectIdDictionary[fieldName] = BsonSerializer.LookupSerializer<MongoDB.Bson.ObjectId?>().Deserialize(context);
                        break;
                    case "NullableBinaryDictionary":
                        instance.NullableBinaryDictionary[fieldName] = BsonSerializer.LookupSerializer<byte[]?>().Deserialize(context);
                        break;
                    case "BinaryDictionary":
                        instance.BinaryDictionary[fieldName] = BsonSerializer.LookupSerializer<byte[]>().Deserialize(context);
                        break;
                    case "ObjectDictionary":
                        instance.ObjectDictionary[fieldName] = Realms.Serialization.RealmObjectSerializer.LookupSerializer<Realms.Tests.IntPropertyObject?>()!.DeserializeById(context)!;
                        break;
                    case "EmbeddedObjectDictionary":
                        instance.EmbeddedObjectDictionary[fieldName] = BsonSerializer.LookupSerializer<Realms.Tests.EmbeddedIntPropertyObject?>().Deserialize(context);
                        break;
                    case "RealmValueDictionary":
                        instance.RealmValueDictionary[fieldName] = BsonSerializer.LookupSerializer<Realms.RealmValue>().Deserialize(context);
                        break;
                }
            }
        }
    }
}
