// <auto-generated />
using Realms.Tests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using Realms;
using Realms.Weaving;
using Realms.Generated;
using Realms.Schema;
using MongoDB.Bson;

namespace Realms.Tests
{
    [Generated]
    [Woven(typeof(DictionariesObjectObjectHelper))]
    public partial class DictionariesObject : IRealmObject, INotifyPropertyChanged
    {
        public static ObjectSchema RealmSchema = new ObjectSchema.Builder("DictionariesObject", isEmbedded: false)
        {
            Property.PrimitiveDictionary("CharDictionary", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("ByteDictionary", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int16Dictionary", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int32Dictionary", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int64Dictionary", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("SingleDictionary", RealmValueType.Float, areElementsNullable: false),
            Property.PrimitiveDictionary("DoubleDictionary", RealmValueType.Double, areElementsNullable: false),
            Property.PrimitiveDictionary("BooleanDictionary", RealmValueType.Bool, areElementsNullable: false),
            Property.PrimitiveDictionary("DecimalDictionary", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveDictionary("Decimal128Dictionary", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveDictionary("ObjectIdDictionary", RealmValueType.ObjectId, areElementsNullable: false),
            Property.PrimitiveDictionary("StringDictionary", RealmValueType.String, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableStringDictionary", RealmValueType.String, areElementsNullable: true),
            Property.PrimitiveDictionary("ByteArrayDictionary", RealmValueType.Data, areElementsNullable: true),
            Property.PrimitiveDictionary("DateTimeOffsetDictionary", RealmValueType.Date, areElementsNullable: false),
            Property.PrimitiveDictionary("NullableCharDictionary", RealmValueType.Int, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableByteDictionary", RealmValueType.Int, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableInt16Dictionary", RealmValueType.Int, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableInt32Dictionary", RealmValueType.Int, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableInt64Dictionary", RealmValueType.Int, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableSingleDictionary", RealmValueType.Float, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableDoubleDictionary", RealmValueType.Double, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableBooleanDictionary", RealmValueType.Bool, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableDateTimeOffsetDictionary", RealmValueType.Date, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableDecimalDictionary", RealmValueType.Decimal128, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableDecimal128Dictionary", RealmValueType.Decimal128, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableObjectIdDictionary", RealmValueType.ObjectId, areElementsNullable: true),
            Property.PrimitiveDictionary("NullableBinaryDictionary", RealmValueType.Data, areElementsNullable: true),
            Property.PrimitiveDictionary("BinaryDictionary", RealmValueType.Data, areElementsNullable: true),
            Property.ObjectDictionary("ObjectDictionary", "IntPropertyObject"),
            Property.ObjectDictionary("EmbeddedObjectDictionary", "EmbeddedIntPropertyObject"),
            Property.RealmValueDictionary("RealmValueDictionary"),
        }.Build();
        
        #region IRealmObject implementation
        
        private IDictionariesObjectAccessor _accessor;
        
        IRealmAccessor IRealmObjectBase.Accessor => Accessor;
        
        internal IDictionariesObjectAccessor Accessor => _accessor = _accessor ?? new DictionariesObjectUnmanagedAccessor(typeof(DictionariesObject));
        
        public bool IsManaged => Accessor.IsManaged;
        
        public bool IsValid => Accessor.IsValid;
        
        public bool IsFrozen => Accessor.IsFrozen;
        
        public Realm Realm => Accessor.Realm;
        
        public ObjectSchema ObjectSchema => Accessor.ObjectSchema;
        
        public RealmObjectBase.Dynamic DynamicApi => Accessor.DynamicApi;
        
        
        
        public void SetManagedAccessor(IRealmAccessor managedAccessor, IRealmObjectHelper helper = null, bool update = false, bool skipDefaults = false)
        {
            var newAccessor = (IDictionariesObjectAccessor)managedAccessor;
            var oldAccessor = _accessor as IDictionariesObjectAccessor;
            _accessor = newAccessor;
        
            if (helper != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharDictionary.Clear();
                    newAccessor.ByteDictionary.Clear();
                    newAccessor.Int16Dictionary.Clear();
                    newAccessor.Int32Dictionary.Clear();
                    newAccessor.Int64Dictionary.Clear();
                    newAccessor.SingleDictionary.Clear();
                    newAccessor.DoubleDictionary.Clear();
                    newAccessor.BooleanDictionary.Clear();
                    newAccessor.DecimalDictionary.Clear();
                    newAccessor.Decimal128Dictionary.Clear();
                    newAccessor.ObjectIdDictionary.Clear();
                    newAccessor.StringDictionary.Clear();
                    newAccessor.NullableStringDictionary.Clear();
                    newAccessor.ByteArrayDictionary.Clear();
                    newAccessor.DateTimeOffsetDictionary.Clear();
                    newAccessor.NullableCharDictionary.Clear();
                    newAccessor.NullableByteDictionary.Clear();
                    newAccessor.NullableInt16Dictionary.Clear();
                    newAccessor.NullableInt32Dictionary.Clear();
                    newAccessor.NullableInt64Dictionary.Clear();
                    newAccessor.NullableSingleDictionary.Clear();
                    newAccessor.NullableDoubleDictionary.Clear();
                    newAccessor.NullableBooleanDictionary.Clear();
                    newAccessor.NullableDateTimeOffsetDictionary.Clear();
                    newAccessor.NullableDecimalDictionary.Clear();
                    newAccessor.NullableDecimal128Dictionary.Clear();
                    newAccessor.NullableObjectIdDictionary.Clear();
                    newAccessor.NullableBinaryDictionary.Clear();
                    newAccessor.BinaryDictionary.Clear();
                    newAccessor.ObjectDictionary.Clear();
                    newAccessor.EmbeddedObjectDictionary.Clear();
                    newAccessor.RealmValueDictionary.Clear();
                }
                
                foreach(var val in oldAccessor.CharDictionary)
                {
                    
                    newAccessor.CharDictionary.Add(val);
                }
                foreach(var val in oldAccessor.ByteDictionary)
                {
                    
                    newAccessor.ByteDictionary.Add(val);
                }
                foreach(var val in oldAccessor.Int16Dictionary)
                {
                    
                    newAccessor.Int16Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.Int32Dictionary)
                {
                    
                    newAccessor.Int32Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.Int64Dictionary)
                {
                    
                    newAccessor.Int64Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.SingleDictionary)
                {
                    
                    newAccessor.SingleDictionary.Add(val);
                }
                foreach(var val in oldAccessor.DoubleDictionary)
                {
                    
                    newAccessor.DoubleDictionary.Add(val);
                }
                foreach(var val in oldAccessor.BooleanDictionary)
                {
                    
                    newAccessor.BooleanDictionary.Add(val);
                }
                foreach(var val in oldAccessor.DecimalDictionary)
                {
                    
                    newAccessor.DecimalDictionary.Add(val);
                }
                foreach(var val in oldAccessor.Decimal128Dictionary)
                {
                    
                    newAccessor.Decimal128Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.ObjectIdDictionary)
                {
                    
                    newAccessor.ObjectIdDictionary.Add(val);
                }
                foreach(var val in oldAccessor.StringDictionary)
                {
                    
                    newAccessor.StringDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableStringDictionary)
                {
                    
                    newAccessor.NullableStringDictionary.Add(val);
                }
                foreach(var val in oldAccessor.ByteArrayDictionary)
                {
                    
                    newAccessor.ByteArrayDictionary.Add(val);
                }
                foreach(var val in oldAccessor.DateTimeOffsetDictionary)
                {
                    
                    newAccessor.DateTimeOffsetDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableCharDictionary)
                {
                    
                    newAccessor.NullableCharDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableByteDictionary)
                {
                    
                    newAccessor.NullableByteDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableInt16Dictionary)
                {
                    
                    newAccessor.NullableInt16Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableInt32Dictionary)
                {
                    
                    newAccessor.NullableInt32Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableInt64Dictionary)
                {
                    
                    newAccessor.NullableInt64Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableSingleDictionary)
                {
                    
                    newAccessor.NullableSingleDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableDoubleDictionary)
                {
                    
                    newAccessor.NullableDoubleDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableBooleanDictionary)
                {
                    
                    newAccessor.NullableBooleanDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableDateTimeOffsetDictionary)
                {
                    
                    newAccessor.NullableDateTimeOffsetDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableDecimalDictionary)
                {
                    
                    newAccessor.NullableDecimalDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableDecimal128Dictionary)
                {
                    
                    newAccessor.NullableDecimal128Dictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableObjectIdDictionary)
                {
                    
                    newAccessor.NullableObjectIdDictionary.Add(val);
                }
                foreach(var val in oldAccessor.NullableBinaryDictionary)
                {
                    
                    newAccessor.NullableBinaryDictionary.Add(val);
                }
                foreach(var val in oldAccessor.BinaryDictionary)
                {
                    
                    newAccessor.BinaryDictionary.Add(val);
                }
                foreach(var val in oldAccessor.ObjectDictionary)
                {
                    newAccessor.Realm.Add(val.Value, update);
                    newAccessor.ObjectDictionary.Add(val);
                }
                foreach(var val in oldAccessor.EmbeddedObjectDictionary)
                {
                    
                    newAccessor.EmbeddedObjectDictionary.Add(val);
                }
                foreach(var val in oldAccessor.RealmValueDictionary)
                {
                    
                    newAccessor.RealmValueDictionary.Add(val);
                }
            }
        
            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }
        
            OnManaged();
        }
        
        #endregion
        
        private event PropertyChangedEventHandler _propertyChanged;
        
        public event PropertyChangedEventHandler PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }
        
                _propertyChanged += value;
            }
        
            remove
            {
                _propertyChanged -= value;
        
                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }
        
        partial void OnPropertyChanged(string propertyName);
        
        private void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }
        
        partial void OnManaged();
        
        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }
        
        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }
        
        public static explicit operator DictionariesObject(RealmValue val) => val.AsRealmObject<DictionariesObject>();
        
        public static implicit operator RealmValue(DictionariesObject val) => RealmValue.Object(val);
        
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }
        
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
        
            if (obj is not IRealmObjectBase iro)
            {
                return false;
            }
        
            return Accessor.Equals(iro.Accessor);
        }
        
        public override int GetHashCode()
        {
            return IsManaged ? Accessor.GetHashCode() : base.GetHashCode();
        }
        
        /***
        public override string ToString()
        {
            return Accessor.ToString();
        }
        **/
        
    
        [EditorBrowsable(EditorBrowsableState.Never)]
        private class DictionariesObjectObjectHelper : IRealmObjectHelper
        {
            public void CopyToRealm(IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }
        
            public ManagedAccessor CreateAccessor() => new DictionariesObjectManagedAccessor();
        
            public IRealmObjectBase CreateInstance()
            {
                return new DictionariesObject();
            }
        
            public bool TryGetPrimaryKeyValue(IRealmObjectBase instance, out object value)
            {
                value = null;
                return false;
            }
        }
    }
}

namespace Realms.Generated
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal interface IDictionariesObjectAccessor : IRealmAccessor
    {
        IDictionary<string, char> CharDictionary { get; }
        
        IDictionary<string, byte> ByteDictionary { get; }
        
        IDictionary<string, short> Int16Dictionary { get; }
        
        IDictionary<string, int> Int32Dictionary { get; }
        
        IDictionary<string, long> Int64Dictionary { get; }
        
        IDictionary<string, float> SingleDictionary { get; }
        
        IDictionary<string, double> DoubleDictionary { get; }
        
        IDictionary<string, bool> BooleanDictionary { get; }
        
        IDictionary<string, decimal> DecimalDictionary { get; }
        
        IDictionary<string, Decimal128> Decimal128Dictionary { get; }
        
        IDictionary<string, ObjectId> ObjectIdDictionary { get; }
        
        IDictionary<string, string> StringDictionary { get; }
        
        IDictionary<string, string> NullableStringDictionary { get; }
        
        IDictionary<string, byte[]> ByteArrayDictionary { get; }
        
        IDictionary<string, DateTimeOffset> DateTimeOffsetDictionary { get; }
        
        IDictionary<string, char?> NullableCharDictionary { get; }
        
        IDictionary<string, byte?> NullableByteDictionary { get; }
        
        IDictionary<string, short?> NullableInt16Dictionary { get; }
        
        IDictionary<string, int?> NullableInt32Dictionary { get; }
        
        IDictionary<string, long?> NullableInt64Dictionary { get; }
        
        IDictionary<string, float?> NullableSingleDictionary { get; }
        
        IDictionary<string, double?> NullableDoubleDictionary { get; }
        
        IDictionary<string, bool?> NullableBooleanDictionary { get; }
        
        IDictionary<string, DateTimeOffset?> NullableDateTimeOffsetDictionary { get; }
        
        IDictionary<string, decimal?> NullableDecimalDictionary { get; }
        
        IDictionary<string, Decimal128?> NullableDecimal128Dictionary { get; }
        
        IDictionary<string, ObjectId?> NullableObjectIdDictionary { get; }
        
        IDictionary<string, byte[]> NullableBinaryDictionary { get; }
        
        IDictionary<string, byte[]> BinaryDictionary { get; }
        
        IDictionary<string, IntPropertyObject> ObjectDictionary { get; }
        
        IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDictionary { get; }
        
        IDictionary<string, RealmValue> RealmValueDictionary { get; }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    internal class DictionariesObjectManagedAccessor : ManagedAccessor, IDictionariesObjectAccessor
    {
        private IDictionary<string, char> _charDictionary;
        public IDictionary<string, char> CharDictionary
        {
            get
            {
                if (_charDictionary == null)
                {
                    _charDictionary = GetDictionaryValue<char>("CharDictionary");
                }
        
                return _charDictionary;
            }
        }
        
        private IDictionary<string, byte> _byteDictionary;
        public IDictionary<string, byte> ByteDictionary
        {
            get
            {
                if (_byteDictionary == null)
                {
                    _byteDictionary = GetDictionaryValue<byte>("ByteDictionary");
                }
        
                return _byteDictionary;
            }
        }
        
        private IDictionary<string, short> _int16Dictionary;
        public IDictionary<string, short> Int16Dictionary
        {
            get
            {
                if (_int16Dictionary == null)
                {
                    _int16Dictionary = GetDictionaryValue<short>("Int16Dictionary");
                }
        
                return _int16Dictionary;
            }
        }
        
        private IDictionary<string, int> _int32Dictionary;
        public IDictionary<string, int> Int32Dictionary
        {
            get
            {
                if (_int32Dictionary == null)
                {
                    _int32Dictionary = GetDictionaryValue<int>("Int32Dictionary");
                }
        
                return _int32Dictionary;
            }
        }
        
        private IDictionary<string, long> _int64Dictionary;
        public IDictionary<string, long> Int64Dictionary
        {
            get
            {
                if (_int64Dictionary == null)
                {
                    _int64Dictionary = GetDictionaryValue<long>("Int64Dictionary");
                }
        
                return _int64Dictionary;
            }
        }
        
        private IDictionary<string, float> _singleDictionary;
        public IDictionary<string, float> SingleDictionary
        {
            get
            {
                if (_singleDictionary == null)
                {
                    _singleDictionary = GetDictionaryValue<float>("SingleDictionary");
                }
        
                return _singleDictionary;
            }
        }
        
        private IDictionary<string, double> _doubleDictionary;
        public IDictionary<string, double> DoubleDictionary
        {
            get
            {
                if (_doubleDictionary == null)
                {
                    _doubleDictionary = GetDictionaryValue<double>("DoubleDictionary");
                }
        
                return _doubleDictionary;
            }
        }
        
        private IDictionary<string, bool> _booleanDictionary;
        public IDictionary<string, bool> BooleanDictionary
        {
            get
            {
                if (_booleanDictionary == null)
                {
                    _booleanDictionary = GetDictionaryValue<bool>("BooleanDictionary");
                }
        
                return _booleanDictionary;
            }
        }
        
        private IDictionary<string, decimal> _decimalDictionary;
        public IDictionary<string, decimal> DecimalDictionary
        {
            get
            {
                if (_decimalDictionary == null)
                {
                    _decimalDictionary = GetDictionaryValue<decimal>("DecimalDictionary");
                }
        
                return _decimalDictionary;
            }
        }
        
        private IDictionary<string, Decimal128> _decimal128Dictionary;
        public IDictionary<string, Decimal128> Decimal128Dictionary
        {
            get
            {
                if (_decimal128Dictionary == null)
                {
                    _decimal128Dictionary = GetDictionaryValue<Decimal128>("Decimal128Dictionary");
                }
        
                return _decimal128Dictionary;
            }
        }
        
        private IDictionary<string, ObjectId> _objectIdDictionary;
        public IDictionary<string, ObjectId> ObjectIdDictionary
        {
            get
            {
                if (_objectIdDictionary == null)
                {
                    _objectIdDictionary = GetDictionaryValue<ObjectId>("ObjectIdDictionary");
                }
        
                return _objectIdDictionary;
            }
        }
        
        private IDictionary<string, string> _stringDictionary;
        public IDictionary<string, string> StringDictionary
        {
            get
            {
                if (_stringDictionary == null)
                {
                    _stringDictionary = GetDictionaryValue<string>("StringDictionary");
                }
        
                return _stringDictionary;
            }
        }
        
        private IDictionary<string, string> _nullableStringDictionary;
        public IDictionary<string, string> NullableStringDictionary
        {
            get
            {
                if (_nullableStringDictionary == null)
                {
                    _nullableStringDictionary = GetDictionaryValue<string>("NullableStringDictionary");
                }
        
                return _nullableStringDictionary;
            }
        }
        
        private IDictionary<string, byte[]> _byteArrayDictionary;
        public IDictionary<string, byte[]> ByteArrayDictionary
        {
            get
            {
                if (_byteArrayDictionary == null)
                {
                    _byteArrayDictionary = GetDictionaryValue<byte[]>("ByteArrayDictionary");
                }
        
                return _byteArrayDictionary;
            }
        }
        
        private IDictionary<string, DateTimeOffset> _dateTimeOffsetDictionary;
        public IDictionary<string, DateTimeOffset> DateTimeOffsetDictionary
        {
            get
            {
                if (_dateTimeOffsetDictionary == null)
                {
                    _dateTimeOffsetDictionary = GetDictionaryValue<DateTimeOffset>("DateTimeOffsetDictionary");
                }
        
                return _dateTimeOffsetDictionary;
            }
        }
        
        private IDictionary<string, char?> _nullableCharDictionary;
        public IDictionary<string, char?> NullableCharDictionary
        {
            get
            {
                if (_nullableCharDictionary == null)
                {
                    _nullableCharDictionary = GetDictionaryValue<char?>("NullableCharDictionary");
                }
        
                return _nullableCharDictionary;
            }
        }
        
        private IDictionary<string, byte?> _nullableByteDictionary;
        public IDictionary<string, byte?> NullableByteDictionary
        {
            get
            {
                if (_nullableByteDictionary == null)
                {
                    _nullableByteDictionary = GetDictionaryValue<byte?>("NullableByteDictionary");
                }
        
                return _nullableByteDictionary;
            }
        }
        
        private IDictionary<string, short?> _nullableInt16Dictionary;
        public IDictionary<string, short?> NullableInt16Dictionary
        {
            get
            {
                if (_nullableInt16Dictionary == null)
                {
                    _nullableInt16Dictionary = GetDictionaryValue<short?>("NullableInt16Dictionary");
                }
        
                return _nullableInt16Dictionary;
            }
        }
        
        private IDictionary<string, int?> _nullableInt32Dictionary;
        public IDictionary<string, int?> NullableInt32Dictionary
        {
            get
            {
                if (_nullableInt32Dictionary == null)
                {
                    _nullableInt32Dictionary = GetDictionaryValue<int?>("NullableInt32Dictionary");
                }
        
                return _nullableInt32Dictionary;
            }
        }
        
        private IDictionary<string, long?> _nullableInt64Dictionary;
        public IDictionary<string, long?> NullableInt64Dictionary
        {
            get
            {
                if (_nullableInt64Dictionary == null)
                {
                    _nullableInt64Dictionary = GetDictionaryValue<long?>("NullableInt64Dictionary");
                }
        
                return _nullableInt64Dictionary;
            }
        }
        
        private IDictionary<string, float?> _nullableSingleDictionary;
        public IDictionary<string, float?> NullableSingleDictionary
        {
            get
            {
                if (_nullableSingleDictionary == null)
                {
                    _nullableSingleDictionary = GetDictionaryValue<float?>("NullableSingleDictionary");
                }
        
                return _nullableSingleDictionary;
            }
        }
        
        private IDictionary<string, double?> _nullableDoubleDictionary;
        public IDictionary<string, double?> NullableDoubleDictionary
        {
            get
            {
                if (_nullableDoubleDictionary == null)
                {
                    _nullableDoubleDictionary = GetDictionaryValue<double?>("NullableDoubleDictionary");
                }
        
                return _nullableDoubleDictionary;
            }
        }
        
        private IDictionary<string, bool?> _nullableBooleanDictionary;
        public IDictionary<string, bool?> NullableBooleanDictionary
        {
            get
            {
                if (_nullableBooleanDictionary == null)
                {
                    _nullableBooleanDictionary = GetDictionaryValue<bool?>("NullableBooleanDictionary");
                }
        
                return _nullableBooleanDictionary;
            }
        }
        
        private IDictionary<string, DateTimeOffset?> _nullableDateTimeOffsetDictionary;
        public IDictionary<string, DateTimeOffset?> NullableDateTimeOffsetDictionary
        {
            get
            {
                if (_nullableDateTimeOffsetDictionary == null)
                {
                    _nullableDateTimeOffsetDictionary = GetDictionaryValue<DateTimeOffset?>("NullableDateTimeOffsetDictionary");
                }
        
                return _nullableDateTimeOffsetDictionary;
            }
        }
        
        private IDictionary<string, decimal?> _nullableDecimalDictionary;
        public IDictionary<string, decimal?> NullableDecimalDictionary
        {
            get
            {
                if (_nullableDecimalDictionary == null)
                {
                    _nullableDecimalDictionary = GetDictionaryValue<decimal?>("NullableDecimalDictionary");
                }
        
                return _nullableDecimalDictionary;
            }
        }
        
        private IDictionary<string, Decimal128?> _nullableDecimal128Dictionary;
        public IDictionary<string, Decimal128?> NullableDecimal128Dictionary
        {
            get
            {
                if (_nullableDecimal128Dictionary == null)
                {
                    _nullableDecimal128Dictionary = GetDictionaryValue<Decimal128?>("NullableDecimal128Dictionary");
                }
        
                return _nullableDecimal128Dictionary;
            }
        }
        
        private IDictionary<string, ObjectId?> _nullableObjectIdDictionary;
        public IDictionary<string, ObjectId?> NullableObjectIdDictionary
        {
            get
            {
                if (_nullableObjectIdDictionary == null)
                {
                    _nullableObjectIdDictionary = GetDictionaryValue<ObjectId?>("NullableObjectIdDictionary");
                }
        
                return _nullableObjectIdDictionary;
            }
        }
        
        private IDictionary<string, byte[]> _nullableBinaryDictionary;
        public IDictionary<string, byte[]> NullableBinaryDictionary
        {
            get
            {
                if (_nullableBinaryDictionary == null)
                {
                    _nullableBinaryDictionary = GetDictionaryValue<byte[]>("NullableBinaryDictionary");
                }
        
                return _nullableBinaryDictionary;
            }
        }
        
        private IDictionary<string, byte[]> _binaryDictionary;
        public IDictionary<string, byte[]> BinaryDictionary
        {
            get
            {
                if (_binaryDictionary == null)
                {
                    _binaryDictionary = GetDictionaryValue<byte[]>("BinaryDictionary");
                }
        
                return _binaryDictionary;
            }
        }
        
        private IDictionary<string, IntPropertyObject> _objectDictionary;
        public IDictionary<string, IntPropertyObject> ObjectDictionary
        {
            get
            {
                if (_objectDictionary == null)
                {
                    _objectDictionary = GetDictionaryValue<IntPropertyObject>("ObjectDictionary");
                }
        
                return _objectDictionary;
            }
        }
        
        private IDictionary<string, EmbeddedIntPropertyObject> _embeddedObjectDictionary;
        public IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDictionary
        {
            get
            {
                if (_embeddedObjectDictionary == null)
                {
                    _embeddedObjectDictionary = GetDictionaryValue<EmbeddedIntPropertyObject>("EmbeddedObjectDictionary");
                }
        
                return _embeddedObjectDictionary;
            }
        }
        
        private IDictionary<string, RealmValue> _realmValueDictionary;
        public IDictionary<string, RealmValue> RealmValueDictionary
        {
            get
            {
                if (_realmValueDictionary == null)
                {
                    _realmValueDictionary = GetDictionaryValue<RealmValue>("RealmValueDictionary");
                }
        
                return _realmValueDictionary;
            }
        }
    }

    internal class DictionariesObjectUnmanagedAccessor : UnmanagedAccessor, IDictionariesObjectAccessor
    {
        public IDictionary<string, char> CharDictionary { get; } = new Dictionary<string, char>();
        
        public IDictionary<string, byte> ByteDictionary { get; } = new Dictionary<string, byte>();
        
        public IDictionary<string, short> Int16Dictionary { get; } = new Dictionary<string, short>();
        
        public IDictionary<string, int> Int32Dictionary { get; } = new Dictionary<string, int>();
        
        public IDictionary<string, long> Int64Dictionary { get; } = new Dictionary<string, long>();
        
        public IDictionary<string, float> SingleDictionary { get; } = new Dictionary<string, float>();
        
        public IDictionary<string, double> DoubleDictionary { get; } = new Dictionary<string, double>();
        
        public IDictionary<string, bool> BooleanDictionary { get; } = new Dictionary<string, bool>();
        
        public IDictionary<string, decimal> DecimalDictionary { get; } = new Dictionary<string, decimal>();
        
        public IDictionary<string, Decimal128> Decimal128Dictionary { get; } = new Dictionary<string, Decimal128>();
        
        public IDictionary<string, ObjectId> ObjectIdDictionary { get; } = new Dictionary<string, ObjectId>();
        
        public IDictionary<string, string> StringDictionary { get; } = new Dictionary<string, string>();
        
        public IDictionary<string, string> NullableStringDictionary { get; } = new Dictionary<string, string>();
        
        public IDictionary<string, byte[]> ByteArrayDictionary { get; } = new Dictionary<string, byte[]>();
        
        public IDictionary<string, DateTimeOffset> DateTimeOffsetDictionary { get; } = new Dictionary<string, DateTimeOffset>();
        
        public IDictionary<string, char?> NullableCharDictionary { get; } = new Dictionary<string, char?>();
        
        public IDictionary<string, byte?> NullableByteDictionary { get; } = new Dictionary<string, byte?>();
        
        public IDictionary<string, short?> NullableInt16Dictionary { get; } = new Dictionary<string, short?>();
        
        public IDictionary<string, int?> NullableInt32Dictionary { get; } = new Dictionary<string, int?>();
        
        public IDictionary<string, long?> NullableInt64Dictionary { get; } = new Dictionary<string, long?>();
        
        public IDictionary<string, float?> NullableSingleDictionary { get; } = new Dictionary<string, float?>();
        
        public IDictionary<string, double?> NullableDoubleDictionary { get; } = new Dictionary<string, double?>();
        
        public IDictionary<string, bool?> NullableBooleanDictionary { get; } = new Dictionary<string, bool?>();
        
        public IDictionary<string, DateTimeOffset?> NullableDateTimeOffsetDictionary { get; } = new Dictionary<string, DateTimeOffset?>();
        
        public IDictionary<string, decimal?> NullableDecimalDictionary { get; } = new Dictionary<string, decimal?>();
        
        public IDictionary<string, Decimal128?> NullableDecimal128Dictionary { get; } = new Dictionary<string, Decimal128?>();
        
        public IDictionary<string, ObjectId?> NullableObjectIdDictionary { get; } = new Dictionary<string, ObjectId?>();
        
        public IDictionary<string, byte[]> NullableBinaryDictionary { get; } = new Dictionary<string, byte[]>();
        
        public IDictionary<string, byte[]> BinaryDictionary { get; } = new Dictionary<string, byte[]>();
        
        public IDictionary<string, IntPropertyObject> ObjectDictionary { get; } = new Dictionary<string, IntPropertyObject>();
        
        public IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDictionary { get; } = new Dictionary<string, EmbeddedIntPropertyObject>();
        
        public IDictionary<string, RealmValue> RealmValueDictionary { get; } = new Dictionary<string, RealmValue>();
    
        public DictionariesObjectUnmanagedAccessor(Type objectType) : base(objectType)
        {
        }
    
        public override RealmValue GetValue(string propertyName)
        {
            throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}");
        }
    
        public override void SetValue(string propertyName, RealmValue val)
        {
            throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
        }
    
        public override void SetValueUnique(string propertyName, RealmValue val)
        {
            throw new InvalidOperationException("Cannot set the value of an non primary key property with SetValueUnique");
        }
    
        public override IList<T> GetListValue<T>(string propertyName)
        {
            throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}");
        }
    
        public override ISet<T> GetSetValue<T>(string propertyName)
        {
            throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}");
        }
    
        public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
        {
            return propertyName switch
            {
                "CharDictionary" => (IDictionary<string, TValue>)CharDictionary,
                "ByteDictionary" => (IDictionary<string, TValue>)ByteDictionary,
                "Int16Dictionary" => (IDictionary<string, TValue>)Int16Dictionary,
                "Int32Dictionary" => (IDictionary<string, TValue>)Int32Dictionary,
                "Int64Dictionary" => (IDictionary<string, TValue>)Int64Dictionary,
                "SingleDictionary" => (IDictionary<string, TValue>)SingleDictionary,
                "DoubleDictionary" => (IDictionary<string, TValue>)DoubleDictionary,
                "BooleanDictionary" => (IDictionary<string, TValue>)BooleanDictionary,
                "DecimalDictionary" => (IDictionary<string, TValue>)DecimalDictionary,
                "Decimal128Dictionary" => (IDictionary<string, TValue>)Decimal128Dictionary,
                "ObjectIdDictionary" => (IDictionary<string, TValue>)ObjectIdDictionary,
                "StringDictionary" => (IDictionary<string, TValue>)StringDictionary,
                "NullableStringDictionary" => (IDictionary<string, TValue>)NullableStringDictionary,
                "ByteArrayDictionary" => (IDictionary<string, TValue>)ByteArrayDictionary,
                "DateTimeOffsetDictionary" => (IDictionary<string, TValue>)DateTimeOffsetDictionary,
                "NullableCharDictionary" => (IDictionary<string, TValue>)NullableCharDictionary,
                "NullableByteDictionary" => (IDictionary<string, TValue>)NullableByteDictionary,
                "NullableInt16Dictionary" => (IDictionary<string, TValue>)NullableInt16Dictionary,
                "NullableInt32Dictionary" => (IDictionary<string, TValue>)NullableInt32Dictionary,
                "NullableInt64Dictionary" => (IDictionary<string, TValue>)NullableInt64Dictionary,
                "NullableSingleDictionary" => (IDictionary<string, TValue>)NullableSingleDictionary,
                "NullableDoubleDictionary" => (IDictionary<string, TValue>)NullableDoubleDictionary,
                "NullableBooleanDictionary" => (IDictionary<string, TValue>)NullableBooleanDictionary,
                "NullableDateTimeOffsetDictionary" => (IDictionary<string, TValue>)NullableDateTimeOffsetDictionary,
                "NullableDecimalDictionary" => (IDictionary<string, TValue>)NullableDecimalDictionary,
                "NullableDecimal128Dictionary" => (IDictionary<string, TValue>)NullableDecimal128Dictionary,
                "NullableObjectIdDictionary" => (IDictionary<string, TValue>)NullableObjectIdDictionary,
                "NullableBinaryDictionary" => (IDictionary<string, TValue>)NullableBinaryDictionary,
                "BinaryDictionary" => (IDictionary<string, TValue>)BinaryDictionary,
                "ObjectDictionary" => (IDictionary<string, TValue>)ObjectDictionary,
                "EmbeddedObjectDictionary" => (IDictionary<string, TValue>)EmbeddedObjectDictionary,
                "RealmValueDictionary" => (IDictionary<string, TValue>)RealmValueDictionary,
                _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
            };
        }
    }
}

