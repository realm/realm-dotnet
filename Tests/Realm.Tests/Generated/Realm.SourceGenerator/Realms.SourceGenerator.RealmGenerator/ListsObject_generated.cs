// <auto-generated />
#nullable enable

using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using Realms;
using Realms.Schema;
using Realms.Tests;
using Realms.Tests.Database;
using Realms.Weaving;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestEmbeddedObject = Realms.IEmbeddedObject;
using TestRealmObject = Realms.IRealmObject;

namespace Realms.Tests
{
    [Generated]
    [Woven(typeof(ListsObjectObjectHelper)), Realms.Preserve(AllMembers = true)]
    public partial class ListsObject : IRealmObject, INotifyPropertyChanged, IReflectableType
    {

        [Realms.Preserve]
        static ListsObject()
        {
            Realms.Serialization.RealmObjectSerializer.Register(new ListsObjectSerializer());
        }

        /// <summary>
        /// Defines the schema for the <see cref="ListsObject"/> class.
        /// </summary>
        [System.Reflection.Obfuscation]
        public static Realms.Schema.ObjectSchema RealmSchema = new Realms.Schema.ObjectSchema.Builder("ListsObject", ObjectSchema.ObjectType.RealmObject)
        {
            Realms.Schema.Property.PrimitiveList("CharList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharList"),
            Realms.Schema.Property.PrimitiveList("ByteList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteList"),
            Realms.Schema.Property.PrimitiveList("Int16List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16List"),
            Realms.Schema.Property.PrimitiveList("Int32List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32List"),
            Realms.Schema.Property.PrimitiveList("Int64List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64List"),
            Realms.Schema.Property.PrimitiveList("SingleList", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "SingleList"),
            Realms.Schema.Property.PrimitiveList("DoubleList", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleList"),
            Realms.Schema.Property.PrimitiveList("BooleanList", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanList"),
            Realms.Schema.Property.PrimitiveList("DecimalList", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalList"),
            Realms.Schema.Property.PrimitiveList("Decimal128List", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128List"),
            Realms.Schema.Property.PrimitiveList("ObjectIdList", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdList"),
            Realms.Schema.Property.PrimitiveList("GuidList", Realms.RealmValueType.Guid, areElementsNullable: false, managedName: "GuidList"),
            Realms.Schema.Property.PrimitiveList("StringList", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringList"),
            Realms.Schema.Property.PrimitiveList("ByteArrayList", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayList"),
            Realms.Schema.Property.PrimitiveList("DateTimeOffsetList", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetList"),
            Realms.Schema.Property.PrimitiveList("NullableCharList", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableCharList"),
            Realms.Schema.Property.PrimitiveList("NullableByteList", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableByteList"),
            Realms.Schema.Property.PrimitiveList("NullableInt16List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt16List"),
            Realms.Schema.Property.PrimitiveList("NullableInt32List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt32List"),
            Realms.Schema.Property.PrimitiveList("NullableInt64List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt64List"),
            Realms.Schema.Property.PrimitiveList("NullableSingleList", Realms.RealmValueType.Float, areElementsNullable: true, managedName: "NullableSingleList"),
            Realms.Schema.Property.PrimitiveList("NullableDoubleList", Realms.RealmValueType.Double, areElementsNullable: true, managedName: "NullableDoubleList"),
            Realms.Schema.Property.PrimitiveList("NullableBooleanList", Realms.RealmValueType.Bool, areElementsNullable: true, managedName: "NullableBooleanList"),
            Realms.Schema.Property.PrimitiveList("NullableDateTimeOffsetList", Realms.RealmValueType.Date, areElementsNullable: true, managedName: "NullableDateTimeOffsetList"),
            Realms.Schema.Property.PrimitiveList("NullableDecimalList", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimalList"),
            Realms.Schema.Property.PrimitiveList("NullableDecimal128List", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimal128List"),
            Realms.Schema.Property.PrimitiveList("NullableObjectIdList", Realms.RealmValueType.ObjectId, areElementsNullable: true, managedName: "NullableObjectIdList"),
            Realms.Schema.Property.PrimitiveList("NullableGuidList", Realms.RealmValueType.Guid, areElementsNullable: true, managedName: "NullableGuidList"),
            Realms.Schema.Property.PrimitiveList("NullableStringList", Realms.RealmValueType.String, areElementsNullable: true, managedName: "NullableStringList"),
            Realms.Schema.Property.PrimitiveList("NullableByteArrayList", Realms.RealmValueType.Data, areElementsNullable: true, managedName: "NullableByteArrayList"),
            Realms.Schema.Property.RealmValueList("RealmValueList", managedName: "RealmValueList"),
        }.Build();

        #region IRealmObject implementation

        private IListsObjectAccessor? _accessor;

        Realms.IRealmAccessor Realms.IRealmObjectBase.Accessor => Accessor;

        private IListsObjectAccessor Accessor => _accessor ??= new ListsObjectUnmanagedAccessor(typeof(ListsObject));

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsManaged => Accessor.IsManaged;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsValid => Accessor.IsValid;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsFrozen => Accessor.IsFrozen;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Realm? Realm => Accessor.Realm;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Schema.ObjectSchema ObjectSchema => Accessor.ObjectSchema!;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.DynamicObjectApi DynamicApi => Accessor.DynamicApi;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public int BacklinksCount => Accessor.BacklinksCount;

        void ISettableManagedAccessor.SetManagedAccessor(Realms.IRealmAccessor managedAccessor, Realms.Weaving.IRealmObjectHelper? helper, bool update, bool skipDefaults)
        {
            var newAccessor = (IListsObjectAccessor)managedAccessor;
            var oldAccessor = _accessor;
            _accessor = newAccessor;

            if (helper != null && oldAccessor != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharList.Clear();
                    newAccessor.ByteList.Clear();
                    newAccessor.Int16List.Clear();
                    newAccessor.Int32List.Clear();
                    newAccessor.Int64List.Clear();
                    newAccessor.SingleList.Clear();
                    newAccessor.DoubleList.Clear();
                    newAccessor.BooleanList.Clear();
                    newAccessor.DecimalList.Clear();
                    newAccessor.Decimal128List.Clear();
                    newAccessor.ObjectIdList.Clear();
                    newAccessor.GuidList.Clear();
                    newAccessor.StringList.Clear();
                    newAccessor.ByteArrayList.Clear();
                    newAccessor.DateTimeOffsetList.Clear();
                    newAccessor.NullableCharList.Clear();
                    newAccessor.NullableByteList.Clear();
                    newAccessor.NullableInt16List.Clear();
                    newAccessor.NullableInt32List.Clear();
                    newAccessor.NullableInt64List.Clear();
                    newAccessor.NullableSingleList.Clear();
                    newAccessor.NullableDoubleList.Clear();
                    newAccessor.NullableBooleanList.Clear();
                    newAccessor.NullableDateTimeOffsetList.Clear();
                    newAccessor.NullableDecimalList.Clear();
                    newAccessor.NullableDecimal128List.Clear();
                    newAccessor.NullableObjectIdList.Clear();
                    newAccessor.NullableGuidList.Clear();
                    newAccessor.NullableStringList.Clear();
                    newAccessor.NullableByteArrayList.Clear();
                    newAccessor.RealmValueList.Clear();
                }

                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharList, newAccessor.CharList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteList, newAccessor.ByteList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16List, newAccessor.Int16List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32List, newAccessor.Int32List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64List, newAccessor.Int64List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.SingleList, newAccessor.SingleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleList, newAccessor.DoubleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanList, newAccessor.BooleanList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalList, newAccessor.DecimalList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128List, newAccessor.Decimal128List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdList, newAccessor.ObjectIdList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.GuidList, newAccessor.GuidList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringList, newAccessor.StringList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayList, newAccessor.ByteArrayList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetList, newAccessor.DateTimeOffsetList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableCharList, newAccessor.NullableCharList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteList, newAccessor.NullableByteList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt16List, newAccessor.NullableInt16List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt32List, newAccessor.NullableInt32List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt64List, newAccessor.NullableInt64List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableSingleList, newAccessor.NullableSingleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDoubleList, newAccessor.NullableDoubleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBooleanList, newAccessor.NullableBooleanList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDateTimeOffsetList, newAccessor.NullableDateTimeOffsetList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimalList, newAccessor.NullableDecimalList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimal128List, newAccessor.NullableDecimal128List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableObjectIdList, newAccessor.NullableObjectIdList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableGuidList, newAccessor.NullableGuidList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableStringList, newAccessor.NullableStringList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteArrayList, newAccessor.NullableByteArrayList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueList, newAccessor.RealmValueList, update, skipDefaults);
            }

            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }

            OnManaged();
        }

        #endregion

        /// <summary>
        /// Called when the object has been managed by a Realm.
        /// </summary>
        /// <remarks>
        /// This method will be called either when a managed object is materialized or when an unmanaged object has been
        /// added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
        /// it is not yet clear whether the object is managed or not.
        /// </remarks>
        partial void OnManaged();

        private event PropertyChangedEventHandler? _propertyChanged;

        /// <inheritdoc />
        public event PropertyChangedEventHandler? PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }

                _propertyChanged += value;
            }

            remove
            {
                _propertyChanged -= value;

                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }

        /// <summary>
        /// Called when a property has changed on this class.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        /// <remarks>
        /// For this method to be called, you need to have first subscribed to <see cref="PropertyChanged"/>.
        /// This can be used to react to changes to the current object, e.g. raising <see cref="PropertyChanged"/> for computed properties.
        /// </remarks>
        /// <example>
        /// <code>
        /// class MyClass : IRealmObject
        /// {
        ///     public int StatusCodeRaw { get; set; }
        ///     public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
        ///     partial void OnPropertyChanged(string propertyName)
        ///     {
        ///         if (propertyName == nameof(StatusCodeRaw))
        ///         {
        ///             RaisePropertyChanged(nameof(StatusCode));
        ///         }
        ///     }
        /// }
        /// </code>
        /// Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="PropertyChanged"/>
        /// subscribers that <c>StatusCode</c> has changed, we implement <see cref="OnPropertyChanged"/> and
        /// raise <see cref="PropertyChanged"/> manually by calling <see cref="RaisePropertyChanged"/>.
        /// </example>
        partial void OnPropertyChanged(string? propertyName);

        private void RaisePropertyChanged([CallerMemberName] string propertyName = "")
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }

        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }

        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }

        /// <summary>
        /// Converts a <see cref="Realms.RealmValue"/> to <see cref="ListsObject"/>. Equivalent to <see cref="Realms.RealmValue.AsNullableRealmObject{T}"/>.
        /// </summary>
        /// <param name="val">The <see cref="Realms.RealmValue"/> to convert.</param>
        /// <returns>The <see cref="ListsObject"/> stored in the <see cref="Realms.RealmValue"/>.</returns>
        public static explicit operator ListsObject?(Realms.RealmValue val) => val.Type == Realms.RealmValueType.Null ? null : val.AsRealmObject<ListsObject>();

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.RealmValue"/> from <see cref="ListsObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.RealmValue"/>.</param>
        /// <returns>A <see cref="Realms.RealmValue"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.RealmValue(ListsObject? val) => val == null ? Realms.RealmValue.Null : Realms.RealmValue.Object(val);

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.QueryArgument"/> from <see cref="ListsObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.QueryArgument"/>.</param>
        /// <returns>A <see cref="Realms.QueryArgument"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.QueryArgument(ListsObject? val) => (Realms.RealmValue)val;

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public TypeInfo GetTypeInfo() => Accessor.GetTypeInfo(this);

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj is InvalidObject)
            {
                return !IsValid;
            }

            if (!(obj is Realms.IRealmObjectBase iro))
            {
                return false;
            }

            return Accessor.Equals(iro.Accessor);
        }

        /// <inheritdoc />
        public override int GetHashCode() => IsManaged ? Accessor.GetHashCode() : base.GetHashCode();

        /// <inheritdoc />
        public override string? ToString() => Accessor.ToString();

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class ListsObjectObjectHelper : Realms.Weaving.IRealmObjectHelper
        {
            public void CopyToRealm(Realms.IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }

            public Realms.ManagedAccessor CreateAccessor() => new ListsObjectManagedAccessor();

            public Realms.IRealmObjectBase CreateInstance() => new ListsObject();

            public bool TryGetPrimaryKeyValue(Realms.IRealmObjectBase instance, out RealmValue value)
            {
                value = RealmValue.Null;
                return false;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        internal interface IListsObjectAccessor : Realms.IRealmAccessor
        {
            System.Collections.Generic.IList<char> CharList { get; }

            System.Collections.Generic.IList<byte> ByteList { get; }

            System.Collections.Generic.IList<short> Int16List { get; }

            System.Collections.Generic.IList<int> Int32List { get; }

            System.Collections.Generic.IList<long> Int64List { get; }

            System.Collections.Generic.IList<float> SingleList { get; }

            System.Collections.Generic.IList<double> DoubleList { get; }

            System.Collections.Generic.IList<bool> BooleanList { get; }

            System.Collections.Generic.IList<decimal> DecimalList { get; }

            System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; }

            System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; }

            System.Collections.Generic.IList<System.Guid> GuidList { get; }

            System.Collections.Generic.IList<string> StringList { get; }

            System.Collections.Generic.IList<byte[]> ByteArrayList { get; }

            System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; }

            System.Collections.Generic.IList<char?> NullableCharList { get; }

            System.Collections.Generic.IList<byte?> NullableByteList { get; }

            System.Collections.Generic.IList<short?> NullableInt16List { get; }

            System.Collections.Generic.IList<int?> NullableInt32List { get; }

            System.Collections.Generic.IList<long?> NullableInt64List { get; }

            System.Collections.Generic.IList<float?> NullableSingleList { get; }

            System.Collections.Generic.IList<double?> NullableDoubleList { get; }

            System.Collections.Generic.IList<bool?> NullableBooleanList { get; }

            System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList { get; }

            System.Collections.Generic.IList<decimal?> NullableDecimalList { get; }

            System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List { get; }

            System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList { get; }

            System.Collections.Generic.IList<System.Guid?> NullableGuidList { get; }

            System.Collections.Generic.IList<string?> NullableStringList { get; }

            System.Collections.Generic.IList<byte[]?> NullableByteArrayList { get; }

            System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class ListsObjectManagedAccessor : Realms.ManagedAccessor, IListsObjectAccessor
        {
            private System.Collections.Generic.IList<char> _charList = null!;
            public System.Collections.Generic.IList<char> CharList
            {
                get
                {
                    if (_charList == null)
                    {
                        _charList = GetListValue<char>("CharList");
                    }

                    return _charList;
                }
            }

            private System.Collections.Generic.IList<byte> _byteList = null!;
            public System.Collections.Generic.IList<byte> ByteList
            {
                get
                {
                    if (_byteList == null)
                    {
                        _byteList = GetListValue<byte>("ByteList");
                    }

                    return _byteList;
                }
            }

            private System.Collections.Generic.IList<short> _int16List = null!;
            public System.Collections.Generic.IList<short> Int16List
            {
                get
                {
                    if (_int16List == null)
                    {
                        _int16List = GetListValue<short>("Int16List");
                    }

                    return _int16List;
                }
            }

            private System.Collections.Generic.IList<int> _int32List = null!;
            public System.Collections.Generic.IList<int> Int32List
            {
                get
                {
                    if (_int32List == null)
                    {
                        _int32List = GetListValue<int>("Int32List");
                    }

                    return _int32List;
                }
            }

            private System.Collections.Generic.IList<long> _int64List = null!;
            public System.Collections.Generic.IList<long> Int64List
            {
                get
                {
                    if (_int64List == null)
                    {
                        _int64List = GetListValue<long>("Int64List");
                    }

                    return _int64List;
                }
            }

            private System.Collections.Generic.IList<float> _singleList = null!;
            public System.Collections.Generic.IList<float> SingleList
            {
                get
                {
                    if (_singleList == null)
                    {
                        _singleList = GetListValue<float>("SingleList");
                    }

                    return _singleList;
                }
            }

            private System.Collections.Generic.IList<double> _doubleList = null!;
            public System.Collections.Generic.IList<double> DoubleList
            {
                get
                {
                    if (_doubleList == null)
                    {
                        _doubleList = GetListValue<double>("DoubleList");
                    }

                    return _doubleList;
                }
            }

            private System.Collections.Generic.IList<bool> _booleanList = null!;
            public System.Collections.Generic.IList<bool> BooleanList
            {
                get
                {
                    if (_booleanList == null)
                    {
                        _booleanList = GetListValue<bool>("BooleanList");
                    }

                    return _booleanList;
                }
            }

            private System.Collections.Generic.IList<decimal> _decimalList = null!;
            public System.Collections.Generic.IList<decimal> DecimalList
            {
                get
                {
                    if (_decimalList == null)
                    {
                        _decimalList = GetListValue<decimal>("DecimalList");
                    }

                    return _decimalList;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.Decimal128> _decimal128List = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List
            {
                get
                {
                    if (_decimal128List == null)
                    {
                        _decimal128List = GetListValue<MongoDB.Bson.Decimal128>("Decimal128List");
                    }

                    return _decimal128List;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.ObjectId> _objectIdList = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList
            {
                get
                {
                    if (_objectIdList == null)
                    {
                        _objectIdList = GetListValue<MongoDB.Bson.ObjectId>("ObjectIdList");
                    }

                    return _objectIdList;
                }
            }

            private System.Collections.Generic.IList<System.Guid> _guidList = null!;
            public System.Collections.Generic.IList<System.Guid> GuidList
            {
                get
                {
                    if (_guidList == null)
                    {
                        _guidList = GetListValue<System.Guid>("GuidList");
                    }

                    return _guidList;
                }
            }

            private System.Collections.Generic.IList<string> _stringList = null!;
            public System.Collections.Generic.IList<string> StringList
            {
                get
                {
                    if (_stringList == null)
                    {
                        _stringList = GetListValue<string>("StringList");
                    }

                    return _stringList;
                }
            }

            private System.Collections.Generic.IList<byte[]> _byteArrayList = null!;
            public System.Collections.Generic.IList<byte[]> ByteArrayList
            {
                get
                {
                    if (_byteArrayList == null)
                    {
                        _byteArrayList = GetListValue<byte[]>("ByteArrayList");
                    }

                    return _byteArrayList;
                }
            }

            private System.Collections.Generic.IList<System.DateTimeOffset> _dateTimeOffsetList = null!;
            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList
            {
                get
                {
                    if (_dateTimeOffsetList == null)
                    {
                        _dateTimeOffsetList = GetListValue<System.DateTimeOffset>("DateTimeOffsetList");
                    }

                    return _dateTimeOffsetList;
                }
            }

            private System.Collections.Generic.IList<char?> _nullableCharList = null!;
            public System.Collections.Generic.IList<char?> NullableCharList
            {
                get
                {
                    if (_nullableCharList == null)
                    {
                        _nullableCharList = GetListValue<char?>("NullableCharList");
                    }

                    return _nullableCharList;
                }
            }

            private System.Collections.Generic.IList<byte?> _nullableByteList = null!;
            public System.Collections.Generic.IList<byte?> NullableByteList
            {
                get
                {
                    if (_nullableByteList == null)
                    {
                        _nullableByteList = GetListValue<byte?>("NullableByteList");
                    }

                    return _nullableByteList;
                }
            }

            private System.Collections.Generic.IList<short?> _nullableInt16List = null!;
            public System.Collections.Generic.IList<short?> NullableInt16List
            {
                get
                {
                    if (_nullableInt16List == null)
                    {
                        _nullableInt16List = GetListValue<short?>("NullableInt16List");
                    }

                    return _nullableInt16List;
                }
            }

            private System.Collections.Generic.IList<int?> _nullableInt32List = null!;
            public System.Collections.Generic.IList<int?> NullableInt32List
            {
                get
                {
                    if (_nullableInt32List == null)
                    {
                        _nullableInt32List = GetListValue<int?>("NullableInt32List");
                    }

                    return _nullableInt32List;
                }
            }

            private System.Collections.Generic.IList<long?> _nullableInt64List = null!;
            public System.Collections.Generic.IList<long?> NullableInt64List
            {
                get
                {
                    if (_nullableInt64List == null)
                    {
                        _nullableInt64List = GetListValue<long?>("NullableInt64List");
                    }

                    return _nullableInt64List;
                }
            }

            private System.Collections.Generic.IList<float?> _nullableSingleList = null!;
            public System.Collections.Generic.IList<float?> NullableSingleList
            {
                get
                {
                    if (_nullableSingleList == null)
                    {
                        _nullableSingleList = GetListValue<float?>("NullableSingleList");
                    }

                    return _nullableSingleList;
                }
            }

            private System.Collections.Generic.IList<double?> _nullableDoubleList = null!;
            public System.Collections.Generic.IList<double?> NullableDoubleList
            {
                get
                {
                    if (_nullableDoubleList == null)
                    {
                        _nullableDoubleList = GetListValue<double?>("NullableDoubleList");
                    }

                    return _nullableDoubleList;
                }
            }

            private System.Collections.Generic.IList<bool?> _nullableBooleanList = null!;
            public System.Collections.Generic.IList<bool?> NullableBooleanList
            {
                get
                {
                    if (_nullableBooleanList == null)
                    {
                        _nullableBooleanList = GetListValue<bool?>("NullableBooleanList");
                    }

                    return _nullableBooleanList;
                }
            }

            private System.Collections.Generic.IList<System.DateTimeOffset?> _nullableDateTimeOffsetList = null!;
            public System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList
            {
                get
                {
                    if (_nullableDateTimeOffsetList == null)
                    {
                        _nullableDateTimeOffsetList = GetListValue<System.DateTimeOffset?>("NullableDateTimeOffsetList");
                    }

                    return _nullableDateTimeOffsetList;
                }
            }

            private System.Collections.Generic.IList<decimal?> _nullableDecimalList = null!;
            public System.Collections.Generic.IList<decimal?> NullableDecimalList
            {
                get
                {
                    if (_nullableDecimalList == null)
                    {
                        _nullableDecimalList = GetListValue<decimal?>("NullableDecimalList");
                    }

                    return _nullableDecimalList;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> _nullableDecimal128List = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List
            {
                get
                {
                    if (_nullableDecimal128List == null)
                    {
                        _nullableDecimal128List = GetListValue<MongoDB.Bson.Decimal128?>("NullableDecimal128List");
                    }

                    return _nullableDecimal128List;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> _nullableObjectIdList = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList
            {
                get
                {
                    if (_nullableObjectIdList == null)
                    {
                        _nullableObjectIdList = GetListValue<MongoDB.Bson.ObjectId?>("NullableObjectIdList");
                    }

                    return _nullableObjectIdList;
                }
            }

            private System.Collections.Generic.IList<System.Guid?> _nullableGuidList = null!;
            public System.Collections.Generic.IList<System.Guid?> NullableGuidList
            {
                get
                {
                    if (_nullableGuidList == null)
                    {
                        _nullableGuidList = GetListValue<System.Guid?>("NullableGuidList");
                    }

                    return _nullableGuidList;
                }
            }

            private System.Collections.Generic.IList<string?> _nullableStringList = null!;
            public System.Collections.Generic.IList<string?> NullableStringList
            {
                get
                {
                    if (_nullableStringList == null)
                    {
                        _nullableStringList = GetListValue<string?>("NullableStringList");
                    }

                    return _nullableStringList;
                }
            }

            private System.Collections.Generic.IList<byte[]?> _nullableByteArrayList = null!;
            public System.Collections.Generic.IList<byte[]?> NullableByteArrayList
            {
                get
                {
                    if (_nullableByteArrayList == null)
                    {
                        _nullableByteArrayList = GetListValue<byte[]?>("NullableByteArrayList");
                    }

                    return _nullableByteArrayList;
                }
            }

            private System.Collections.Generic.IList<Realms.RealmValue> _realmValueList = null!;
            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList
            {
                get
                {
                    if (_realmValueList == null)
                    {
                        _realmValueList = GetListValue<Realms.RealmValue>("RealmValueList");
                    }

                    return _realmValueList;
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class ListsObjectUnmanagedAccessor : Realms.UnmanagedAccessor, IListsObjectAccessor
        {
            public override ObjectSchema ObjectSchema => ListsObject.RealmSchema;

            public System.Collections.Generic.IList<char> CharList { get; } = new List<char>();

            public System.Collections.Generic.IList<byte> ByteList { get; } = new List<byte>();

            public System.Collections.Generic.IList<short> Int16List { get; } = new List<short>();

            public System.Collections.Generic.IList<int> Int32List { get; } = new List<int>();

            public System.Collections.Generic.IList<long> Int64List { get; } = new List<long>();

            public System.Collections.Generic.IList<float> SingleList { get; } = new List<float>();

            public System.Collections.Generic.IList<double> DoubleList { get; } = new List<double>();

            public System.Collections.Generic.IList<bool> BooleanList { get; } = new List<bool>();

            public System.Collections.Generic.IList<decimal> DecimalList { get; } = new List<decimal>();

            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; } = new List<MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; } = new List<MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IList<System.Guid> GuidList { get; } = new List<System.Guid>();

            public System.Collections.Generic.IList<string> StringList { get; } = new List<string>();

            public System.Collections.Generic.IList<byte[]> ByteArrayList { get; } = new List<byte[]>();

            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; } = new List<System.DateTimeOffset>();

            public System.Collections.Generic.IList<char?> NullableCharList { get; } = new List<char?>();

            public System.Collections.Generic.IList<byte?> NullableByteList { get; } = new List<byte?>();

            public System.Collections.Generic.IList<short?> NullableInt16List { get; } = new List<short?>();

            public System.Collections.Generic.IList<int?> NullableInt32List { get; } = new List<int?>();

            public System.Collections.Generic.IList<long?> NullableInt64List { get; } = new List<long?>();

            public System.Collections.Generic.IList<float?> NullableSingleList { get; } = new List<float?>();

            public System.Collections.Generic.IList<double?> NullableDoubleList { get; } = new List<double?>();

            public System.Collections.Generic.IList<bool?> NullableBooleanList { get; } = new List<bool?>();

            public System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList { get; } = new List<System.DateTimeOffset?>();

            public System.Collections.Generic.IList<decimal?> NullableDecimalList { get; } = new List<decimal?>();

            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List { get; } = new List<MongoDB.Bson.Decimal128?>();

            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList { get; } = new List<MongoDB.Bson.ObjectId?>();

            public System.Collections.Generic.IList<System.Guid?> NullableGuidList { get; } = new List<System.Guid?>();

            public System.Collections.Generic.IList<string?> NullableStringList { get; } = new List<string?>();

            public System.Collections.Generic.IList<byte[]?> NullableByteArrayList { get; } = new List<byte[]?>();

            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; } = new List<Realms.RealmValue>();

            public ListsObjectUnmanagedAccessor(Type objectType) : base(objectType)
            {
            }

            public override Realms.RealmValue GetValue(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}");
            }

            public override void SetValue(string propertyName, Realms.RealmValue val)
            {
                throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
            }

            public override void SetValueUnique(string propertyName, Realms.RealmValue val)
            {
                throw new InvalidOperationException("Cannot set the value of an non primary key property with SetValueUnique");
            }

            public override IList<T> GetListValue<T>(string propertyName)
            {
                return propertyName switch
                {
                    "CharList" => (IList<T>)CharList,
                    "ByteList" => (IList<T>)ByteList,
                    "Int16List" => (IList<T>)Int16List,
                    "Int32List" => (IList<T>)Int32List,
                    "Int64List" => (IList<T>)Int64List,
                    "SingleList" => (IList<T>)SingleList,
                    "DoubleList" => (IList<T>)DoubleList,
                    "BooleanList" => (IList<T>)BooleanList,
                    "DecimalList" => (IList<T>)DecimalList,
                    "Decimal128List" => (IList<T>)Decimal128List,
                    "ObjectIdList" => (IList<T>)ObjectIdList,
                    "GuidList" => (IList<T>)GuidList,
                    "StringList" => (IList<T>)StringList,
                    "ByteArrayList" => (IList<T>)ByteArrayList,
                    "DateTimeOffsetList" => (IList<T>)DateTimeOffsetList,
                    "NullableCharList" => (IList<T>)NullableCharList,
                    "NullableByteList" => (IList<T>)NullableByteList,
                    "NullableInt16List" => (IList<T>)NullableInt16List,
                    "NullableInt32List" => (IList<T>)NullableInt32List,
                    "NullableInt64List" => (IList<T>)NullableInt64List,
                    "NullableSingleList" => (IList<T>)NullableSingleList,
                    "NullableDoubleList" => (IList<T>)NullableDoubleList,
                    "NullableBooleanList" => (IList<T>)NullableBooleanList,
                    "NullableDateTimeOffsetList" => (IList<T>)NullableDateTimeOffsetList,
                    "NullableDecimalList" => (IList<T>)NullableDecimalList,
                    "NullableDecimal128List" => (IList<T>)NullableDecimal128List,
                    "NullableObjectIdList" => (IList<T>)NullableObjectIdList,
                    "NullableGuidList" => (IList<T>)NullableGuidList,
                    "NullableStringList" => (IList<T>)NullableStringList,
                    "NullableByteArrayList" => (IList<T>)NullableByteArrayList,
                    "RealmValueList" => (IList<T>)RealmValueList,
                    _ => throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}"),
                };
            }

            public override ISet<T> GetSetValue<T>(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}");
            }

            public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}");
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class ListsObjectSerializer : Realms.Serialization.RealmObjectSerializerBase<ListsObject>
        {
            public override string SchemaName => "ListsObject";

            protected override void SerializeValue(MongoDB.Bson.Serialization.BsonSerializationContext context, BsonSerializationArgs args, ListsObject value)
            {
                context.Writer.WriteStartDocument();

                WriteList(context, args, "CharList", value.CharList);
                WriteList(context, args, "ByteList", value.ByteList);
                WriteList(context, args, "Int16List", value.Int16List);
                WriteList(context, args, "Int32List", value.Int32List);
                WriteList(context, args, "Int64List", value.Int64List);
                WriteList(context, args, "SingleList", value.SingleList);
                WriteList(context, args, "DoubleList", value.DoubleList);
                WriteList(context, args, "BooleanList", value.BooleanList);
                WriteList(context, args, "DecimalList", value.DecimalList);
                WriteList(context, args, "Decimal128List", value.Decimal128List);
                WriteList(context, args, "ObjectIdList", value.ObjectIdList);
                WriteList(context, args, "GuidList", value.GuidList);
                WriteList(context, args, "StringList", value.StringList);
                WriteList(context, args, "ByteArrayList", value.ByteArrayList);
                WriteList(context, args, "DateTimeOffsetList", value.DateTimeOffsetList);
                WriteList(context, args, "NullableCharList", value.NullableCharList);
                WriteList(context, args, "NullableByteList", value.NullableByteList);
                WriteList(context, args, "NullableInt16List", value.NullableInt16List);
                WriteList(context, args, "NullableInt32List", value.NullableInt32List);
                WriteList(context, args, "NullableInt64List", value.NullableInt64List);
                WriteList(context, args, "NullableSingleList", value.NullableSingleList);
                WriteList(context, args, "NullableDoubleList", value.NullableDoubleList);
                WriteList(context, args, "NullableBooleanList", value.NullableBooleanList);
                WriteList(context, args, "NullableDateTimeOffsetList", value.NullableDateTimeOffsetList);
                WriteList(context, args, "NullableDecimalList", value.NullableDecimalList);
                WriteList(context, args, "NullableDecimal128List", value.NullableDecimal128List);
                WriteList(context, args, "NullableObjectIdList", value.NullableObjectIdList);
                WriteList(context, args, "NullableGuidList", value.NullableGuidList);
                WriteList(context, args, "NullableStringList", value.NullableStringList);
                WriteList(context, args, "NullableByteArrayList", value.NullableByteArrayList);
                WriteList(context, args, "RealmValueList", value.RealmValueList);

                context.Writer.WriteEndDocument();
            }

            protected override ListsObject CreateInstance() => new ListsObject();

            protected override void ReadValue(ListsObject instance, string name, BsonDeserializationContext context)
            {
                switch (name)
                {
                    case "CharList":
                    case "ByteList":
                    case "Int16List":
                    case "Int32List":
                    case "Int64List":
                    case "SingleList":
                    case "DoubleList":
                    case "BooleanList":
                    case "DecimalList":
                    case "Decimal128List":
                    case "ObjectIdList":
                    case "GuidList":
                    case "StringList":
                    case "ByteArrayList":
                    case "DateTimeOffsetList":
                    case "NullableCharList":
                    case "NullableByteList":
                    case "NullableInt16List":
                    case "NullableInt32List":
                    case "NullableInt64List":
                    case "NullableSingleList":
                    case "NullableDoubleList":
                    case "NullableBooleanList":
                    case "NullableDateTimeOffsetList":
                    case "NullableDecimalList":
                    case "NullableDecimal128List":
                    case "NullableObjectIdList":
                    case "NullableGuidList":
                    case "NullableStringList":
                    case "NullableByteArrayList":
                    case "RealmValueList":
                        ReadArray(instance, name, context);
                        break;
                    default:
                        context.Reader.SkipValue();
                        break;
                }
            }

            protected override void ReadArrayElement(ListsObject instance, string name, BsonDeserializationContext context)
            {
                switch (name)
                {
                    case "CharList":
                        instance.CharList.Add(BsonSerializer.LookupSerializer<char>().Deserialize(context));
                        break;
                    case "ByteList":
                        instance.ByteList.Add(BsonSerializer.LookupSerializer<byte>().Deserialize(context));
                        break;
                    case "Int16List":
                        instance.Int16List.Add(BsonSerializer.LookupSerializer<short>().Deserialize(context));
                        break;
                    case "Int32List":
                        instance.Int32List.Add(BsonSerializer.LookupSerializer<int>().Deserialize(context));
                        break;
                    case "Int64List":
                        instance.Int64List.Add(BsonSerializer.LookupSerializer<long>().Deserialize(context));
                        break;
                    case "SingleList":
                        instance.SingleList.Add(BsonSerializer.LookupSerializer<float>().Deserialize(context));
                        break;
                    case "DoubleList":
                        instance.DoubleList.Add(BsonSerializer.LookupSerializer<double>().Deserialize(context));
                        break;
                    case "BooleanList":
                        instance.BooleanList.Add(BsonSerializer.LookupSerializer<bool>().Deserialize(context));
                        break;
                    case "DecimalList":
                        instance.DecimalList.Add(BsonSerializer.LookupSerializer<decimal>().Deserialize(context));
                        break;
                    case "Decimal128List":
                        instance.Decimal128List.Add(BsonSerializer.LookupSerializer<MongoDB.Bson.Decimal128>().Deserialize(context));
                        break;
                    case "ObjectIdList":
                        instance.ObjectIdList.Add(BsonSerializer.LookupSerializer<MongoDB.Bson.ObjectId>().Deserialize(context));
                        break;
                    case "GuidList":
                        instance.GuidList.Add(BsonSerializer.LookupSerializer<System.Guid>().Deserialize(context));
                        break;
                    case "StringList":
                        instance.StringList.Add(BsonSerializer.LookupSerializer<string>().Deserialize(context));
                        break;
                    case "ByteArrayList":
                        instance.ByteArrayList.Add(BsonSerializer.LookupSerializer<byte[]>().Deserialize(context));
                        break;
                    case "DateTimeOffsetList":
                        instance.DateTimeOffsetList.Add(BsonSerializer.LookupSerializer<System.DateTimeOffset>().Deserialize(context));
                        break;
                    case "NullableCharList":
                        instance.NullableCharList.Add(BsonSerializer.LookupSerializer<char?>().Deserialize(context));
                        break;
                    case "NullableByteList":
                        instance.NullableByteList.Add(BsonSerializer.LookupSerializer<byte?>().Deserialize(context));
                        break;
                    case "NullableInt16List":
                        instance.NullableInt16List.Add(BsonSerializer.LookupSerializer<short?>().Deserialize(context));
                        break;
                    case "NullableInt32List":
                        instance.NullableInt32List.Add(BsonSerializer.LookupSerializer<int?>().Deserialize(context));
                        break;
                    case "NullableInt64List":
                        instance.NullableInt64List.Add(BsonSerializer.LookupSerializer<long?>().Deserialize(context));
                        break;
                    case "NullableSingleList":
                        instance.NullableSingleList.Add(BsonSerializer.LookupSerializer<float?>().Deserialize(context));
                        break;
                    case "NullableDoubleList":
                        instance.NullableDoubleList.Add(BsonSerializer.LookupSerializer<double?>().Deserialize(context));
                        break;
                    case "NullableBooleanList":
                        instance.NullableBooleanList.Add(BsonSerializer.LookupSerializer<bool?>().Deserialize(context));
                        break;
                    case "NullableDateTimeOffsetList":
                        instance.NullableDateTimeOffsetList.Add(BsonSerializer.LookupSerializer<System.DateTimeOffset?>().Deserialize(context));
                        break;
                    case "NullableDecimalList":
                        instance.NullableDecimalList.Add(BsonSerializer.LookupSerializer<decimal?>().Deserialize(context));
                        break;
                    case "NullableDecimal128List":
                        instance.NullableDecimal128List.Add(BsonSerializer.LookupSerializer<MongoDB.Bson.Decimal128?>().Deserialize(context));
                        break;
                    case "NullableObjectIdList":
                        instance.NullableObjectIdList.Add(BsonSerializer.LookupSerializer<MongoDB.Bson.ObjectId?>().Deserialize(context));
                        break;
                    case "NullableGuidList":
                        instance.NullableGuidList.Add(BsonSerializer.LookupSerializer<System.Guid?>().Deserialize(context));
                        break;
                    case "NullableStringList":
                        instance.NullableStringList.Add(BsonSerializer.LookupSerializer<string?>().Deserialize(context));
                        break;
                    case "NullableByteArrayList":
                        instance.NullableByteArrayList.Add(BsonSerializer.LookupSerializer<byte[]?>().Deserialize(context));
                        break;
                    case "RealmValueList":
                        instance.RealmValueList.Add(BsonSerializer.LookupSerializer<Realms.RealmValue>().Deserialize(context));
                        break;
                }
            }

            protected override void ReadDocumentField(ListsObject instance, string name, string fieldName, BsonDeserializationContext context)
            {
                // No persisted dictionary properties to deserialize
            }
        }
    }
}
