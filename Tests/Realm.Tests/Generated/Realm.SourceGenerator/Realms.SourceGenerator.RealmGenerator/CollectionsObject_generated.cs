// <auto-generated />
#nullable enable

using MongoDB.Bson;
using Realms;
using Realms.Schema;
using Realms.Tests;
using Realms.Tests.Database;
using Realms.Weaving;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestAsymmetricObject = Realms.IAsymmetricObject;
using TestEmbeddedObject = Realms.IEmbeddedObject;
using TestRealmObject = Realms.IRealmObject;

namespace Realms.Tests
{
    [Generated]
    [Woven(typeof(CollectionsObjectObjectHelper))]
    public partial class CollectionsObject : IRealmObject, INotifyPropertyChanged, IReflectableType
    {
        public static Realms.Schema.ObjectSchema RealmSchema = new Realms.Schema.ObjectSchema.Builder("CollectionsObject", ObjectSchema.ObjectType.RealmObject)
        {
            Realms.Schema.Property.PrimitiveSet("CharSet", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharSet"),
            Realms.Schema.Property.PrimitiveSet("ByteSet", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteSet"),
            Realms.Schema.Property.PrimitiveSet("Int16Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16Set"),
            Realms.Schema.Property.PrimitiveSet("Int32Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32Set"),
            Realms.Schema.Property.PrimitiveSet("Int64Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64Set"),
            Realms.Schema.Property.PrimitiveSet("SingleSet", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "SingleSet"),
            Realms.Schema.Property.PrimitiveSet("DoubleSet", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleSet"),
            Realms.Schema.Property.PrimitiveSet("BooleanSet", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanSet"),
            Realms.Schema.Property.PrimitiveSet("DecimalSet", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalSet"),
            Realms.Schema.Property.PrimitiveSet("Decimal128Set", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128Set"),
            Realms.Schema.Property.PrimitiveSet("ObjectIdSet", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdSet"),
            Realms.Schema.Property.PrimitiveSet("StringSet", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringSet"),
            Realms.Schema.Property.PrimitiveSet("NullableStringSet", Realms.RealmValueType.String, areElementsNullable: true, managedName: "NullableStringSet"),
            Realms.Schema.Property.PrimitiveSet("ByteArraySet", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArraySet"),
            Realms.Schema.Property.PrimitiveSet("NullableByteArraySet", Realms.RealmValueType.Data, areElementsNullable: true, managedName: "NullableByteArraySet"),
            Realms.Schema.Property.PrimitiveSet("DateTimeOffsetSet", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetSet"),
            Realms.Schema.Property.PrimitiveSet("NullableCharSet", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableCharSet"),
            Realms.Schema.Property.PrimitiveSet("NullableByteSet", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableByteSet"),
            Realms.Schema.Property.PrimitiveSet("NullableInt16Set", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt16Set"),
            Realms.Schema.Property.PrimitiveSet("NullableInt32Set", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt32Set"),
            Realms.Schema.Property.PrimitiveSet("NullableInt64Set", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt64Set"),
            Realms.Schema.Property.PrimitiveSet("NullableSingleSet", Realms.RealmValueType.Float, areElementsNullable: true, managedName: "NullableSingleSet"),
            Realms.Schema.Property.PrimitiveSet("NullableDoubleSet", Realms.RealmValueType.Double, areElementsNullable: true, managedName: "NullableDoubleSet"),
            Realms.Schema.Property.PrimitiveSet("NullableBooleanSet", Realms.RealmValueType.Bool, areElementsNullable: true, managedName: "NullableBooleanSet"),
            Realms.Schema.Property.PrimitiveSet("NullableDateTimeOffsetSet", Realms.RealmValueType.Date, areElementsNullable: true, managedName: "NullableDateTimeOffsetSet"),
            Realms.Schema.Property.PrimitiveSet("NullableDecimalSet", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimalSet"),
            Realms.Schema.Property.PrimitiveSet("NullableDecimal128Set", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimal128Set"),
            Realms.Schema.Property.PrimitiveSet("NullableObjectIdSet", Realms.RealmValueType.ObjectId, areElementsNullable: true, managedName: "NullableObjectIdSet"),
            Realms.Schema.Property.ObjectSet("ObjectSet", "IntPropertyObject", managedName: "ObjectSet"),
            Realms.Schema.Property.RealmValueSet("RealmValueSet", managedName: "RealmValueSet"),
            Realms.Schema.Property.PrimitiveList("CharList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharList"),
            Realms.Schema.Property.PrimitiveList("ByteList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteList"),
            Realms.Schema.Property.PrimitiveList("Int16List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16List"),
            Realms.Schema.Property.PrimitiveList("Int32List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32List"),
            Realms.Schema.Property.PrimitiveList("Int64List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64List"),
            Realms.Schema.Property.PrimitiveList("SingleList", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "SingleList"),
            Realms.Schema.Property.PrimitiveList("DoubleList", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleList"),
            Realms.Schema.Property.PrimitiveList("BooleanList", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanList"),
            Realms.Schema.Property.PrimitiveList("DecimalList", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalList"),
            Realms.Schema.Property.PrimitiveList("Decimal128List", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128List"),
            Realms.Schema.Property.PrimitiveList("ObjectIdList", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdList"),
            Realms.Schema.Property.PrimitiveList("StringList", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringList"),
            Realms.Schema.Property.PrimitiveList("NullableStringList", Realms.RealmValueType.String, areElementsNullable: true, managedName: "NullableStringList"),
            Realms.Schema.Property.PrimitiveList("ByteArrayList", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayList"),
            Realms.Schema.Property.PrimitiveList("NullableByteArrayList", Realms.RealmValueType.Data, areElementsNullable: true, managedName: "NullableByteArrayList"),
            Realms.Schema.Property.PrimitiveList("DateTimeOffsetList", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetList"),
            Realms.Schema.Property.PrimitiveList("NullableCharList", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableCharList"),
            Realms.Schema.Property.PrimitiveList("NullableByteList", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableByteList"),
            Realms.Schema.Property.PrimitiveList("NullableInt16List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt16List"),
            Realms.Schema.Property.PrimitiveList("NullableInt32List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt32List"),
            Realms.Schema.Property.PrimitiveList("NullableInt64List", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt64List"),
            Realms.Schema.Property.PrimitiveList("NullableSingleList", Realms.RealmValueType.Float, areElementsNullable: true, managedName: "NullableSingleList"),
            Realms.Schema.Property.PrimitiveList("NullableDoubleList", Realms.RealmValueType.Double, areElementsNullable: true, managedName: "NullableDoubleList"),
            Realms.Schema.Property.PrimitiveList("NullableBooleanList", Realms.RealmValueType.Bool, areElementsNullable: true, managedName: "NullableBooleanList"),
            Realms.Schema.Property.PrimitiveList("NullableDateTimeOffsetList", Realms.RealmValueType.Date, areElementsNullable: true, managedName: "NullableDateTimeOffsetList"),
            Realms.Schema.Property.PrimitiveList("NullableDecimalList", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimalList"),
            Realms.Schema.Property.PrimitiveList("NullableDecimal128List", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimal128List"),
            Realms.Schema.Property.PrimitiveList("NullableObjectIdList", Realms.RealmValueType.ObjectId, areElementsNullable: true, managedName: "NullableObjectIdList"),
            Realms.Schema.Property.ObjectList("ObjectList", "IntPropertyObject", managedName: "ObjectList"),
            Realms.Schema.Property.ObjectList("EmbeddedObjectList", "EmbeddedIntPropertyObject", managedName: "EmbeddedObjectList"),
            Realms.Schema.Property.RealmValueList("RealmValueList", managedName: "RealmValueList"),
            Realms.Schema.Property.PrimitiveDictionary("CharDict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharDict"),
            Realms.Schema.Property.PrimitiveDictionary("ByteDict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteDict"),
            Realms.Schema.Property.PrimitiveDictionary("Int16Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16Dict"),
            Realms.Schema.Property.PrimitiveDictionary("Int32Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32Dict"),
            Realms.Schema.Property.PrimitiveDictionary("Int64Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64Dict"),
            Realms.Schema.Property.PrimitiveDictionary("SingleDict", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "SingleDict"),
            Realms.Schema.Property.PrimitiveDictionary("DoubleDict", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleDict"),
            Realms.Schema.Property.PrimitiveDictionary("BooleanDict", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanDict"),
            Realms.Schema.Property.PrimitiveDictionary("DecimalDict", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalDict"),
            Realms.Schema.Property.PrimitiveDictionary("Decimal128Dict", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128Dict"),
            Realms.Schema.Property.PrimitiveDictionary("ObjectIdDict", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdDict"),
            Realms.Schema.Property.PrimitiveDictionary("StringDict", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableStringDict", Realms.RealmValueType.String, areElementsNullable: true, managedName: "NullableStringDict"),
            Realms.Schema.Property.PrimitiveDictionary("ByteArrayDict", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableByteArrayDict", Realms.RealmValueType.Data, areElementsNullable: true, managedName: "NullableByteArrayDict"),
            Realms.Schema.Property.PrimitiveDictionary("DateTimeOffsetDict", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableCharDict", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableCharDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableByteDict", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableByteDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt16Dict", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt16Dict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt32Dict", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt32Dict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableInt64Dict", Realms.RealmValueType.Int, areElementsNullable: true, managedName: "NullableInt64Dict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableSingleDict", Realms.RealmValueType.Float, areElementsNullable: true, managedName: "NullableSingleDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDoubleDict", Realms.RealmValueType.Double, areElementsNullable: true, managedName: "NullableDoubleDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableBooleanDict", Realms.RealmValueType.Bool, areElementsNullable: true, managedName: "NullableBooleanDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDateTimeOffsetDict", Realms.RealmValueType.Date, areElementsNullable: true, managedName: "NullableDateTimeOffsetDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDecimalDict", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimalDict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableDecimal128Dict", Realms.RealmValueType.Decimal128, areElementsNullable: true, managedName: "NullableDecimal128Dict"),
            Realms.Schema.Property.PrimitiveDictionary("NullableObjectIdDict", Realms.RealmValueType.ObjectId, areElementsNullable: true, managedName: "NullableObjectIdDict"),
            Realms.Schema.Property.ObjectDictionary("ObjectDict", "IntPropertyObject", managedName: "ObjectDict"),
            Realms.Schema.Property.RealmValueDictionary("RealmValueDict", managedName: "RealmValueDict"),
        }.Build();

        #region IRealmObject implementation

        private ICollectionsObjectAccessor? _accessor;

        Realms.IRealmAccessor Realms.IRealmObjectBase.Accessor => Accessor;

        internal ICollectionsObjectAccessor Accessor => _accessor ??= new CollectionsObjectUnmanagedAccessor(typeof(CollectionsObject));

        [IgnoreDataMember, XmlIgnore]
        public bool IsManaged => Accessor.IsManaged;

        [IgnoreDataMember, XmlIgnore]
        public bool IsValid => Accessor.IsValid;

        [IgnoreDataMember, XmlIgnore]
        public bool IsFrozen => Accessor.IsFrozen;

        [IgnoreDataMember, XmlIgnore]
        public Realms.Realm Realm => Accessor.Realm;

        [IgnoreDataMember, XmlIgnore]
        public Realms.Schema.ObjectSchema ObjectSchema => Accessor.ObjectSchema;

        [IgnoreDataMember, XmlIgnore]
        public Realms.DynamicObjectApi DynamicApi => Accessor.DynamicApi;

        [IgnoreDataMember, XmlIgnore]
        public int BacklinksCount => Accessor.BacklinksCount;

        public void SetManagedAccessor(Realms.IRealmAccessor managedAccessor, Realms.Weaving.IRealmObjectHelper? helper = null, bool update = false, bool skipDefaults = false)
        {
            var newAccessor = (ICollectionsObjectAccessor)managedAccessor;
            var oldAccessor = _accessor;
            _accessor = newAccessor;

            if (helper != null && oldAccessor != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharSet.Clear();
                    newAccessor.ByteSet.Clear();
                    newAccessor.Int16Set.Clear();
                    newAccessor.Int32Set.Clear();
                    newAccessor.Int64Set.Clear();
                    newAccessor.SingleSet.Clear();
                    newAccessor.DoubleSet.Clear();
                    newAccessor.BooleanSet.Clear();
                    newAccessor.DecimalSet.Clear();
                    newAccessor.Decimal128Set.Clear();
                    newAccessor.ObjectIdSet.Clear();
                    newAccessor.StringSet.Clear();
                    newAccessor.NullableStringSet.Clear();
                    newAccessor.ByteArraySet.Clear();
                    newAccessor.NullableByteArraySet.Clear();
                    newAccessor.DateTimeOffsetSet.Clear();
                    newAccessor.NullableCharSet.Clear();
                    newAccessor.NullableByteSet.Clear();
                    newAccessor.NullableInt16Set.Clear();
                    newAccessor.NullableInt32Set.Clear();
                    newAccessor.NullableInt64Set.Clear();
                    newAccessor.NullableSingleSet.Clear();
                    newAccessor.NullableDoubleSet.Clear();
                    newAccessor.NullableBooleanSet.Clear();
                    newAccessor.NullableDateTimeOffsetSet.Clear();
                    newAccessor.NullableDecimalSet.Clear();
                    newAccessor.NullableDecimal128Set.Clear();
                    newAccessor.NullableObjectIdSet.Clear();
                    newAccessor.ObjectSet.Clear();
                    newAccessor.RealmValueSet.Clear();
                    newAccessor.CharList.Clear();
                    newAccessor.ByteList.Clear();
                    newAccessor.Int16List.Clear();
                    newAccessor.Int32List.Clear();
                    newAccessor.Int64List.Clear();
                    newAccessor.SingleList.Clear();
                    newAccessor.DoubleList.Clear();
                    newAccessor.BooleanList.Clear();
                    newAccessor.DecimalList.Clear();
                    newAccessor.Decimal128List.Clear();
                    newAccessor.ObjectIdList.Clear();
                    newAccessor.StringList.Clear();
                    newAccessor.NullableStringList.Clear();
                    newAccessor.ByteArrayList.Clear();
                    newAccessor.NullableByteArrayList.Clear();
                    newAccessor.DateTimeOffsetList.Clear();
                    newAccessor.NullableCharList.Clear();
                    newAccessor.NullableByteList.Clear();
                    newAccessor.NullableInt16List.Clear();
                    newAccessor.NullableInt32List.Clear();
                    newAccessor.NullableInt64List.Clear();
                    newAccessor.NullableSingleList.Clear();
                    newAccessor.NullableDoubleList.Clear();
                    newAccessor.NullableBooleanList.Clear();
                    newAccessor.NullableDateTimeOffsetList.Clear();
                    newAccessor.NullableDecimalList.Clear();
                    newAccessor.NullableDecimal128List.Clear();
                    newAccessor.NullableObjectIdList.Clear();
                    newAccessor.ObjectList.Clear();
                    newAccessor.EmbeddedObjectList.Clear();
                    newAccessor.RealmValueList.Clear();
                    newAccessor.CharDict.Clear();
                    newAccessor.ByteDict.Clear();
                    newAccessor.Int16Dict.Clear();
                    newAccessor.Int32Dict.Clear();
                    newAccessor.Int64Dict.Clear();
                    newAccessor.SingleDict.Clear();
                    newAccessor.DoubleDict.Clear();
                    newAccessor.BooleanDict.Clear();
                    newAccessor.DecimalDict.Clear();
                    newAccessor.Decimal128Dict.Clear();
                    newAccessor.ObjectIdDict.Clear();
                    newAccessor.StringDict.Clear();
                    newAccessor.NullableStringDict.Clear();
                    newAccessor.ByteArrayDict.Clear();
                    newAccessor.NullableByteArrayDict.Clear();
                    newAccessor.DateTimeOffsetDict.Clear();
                    newAccessor.NullableCharDict.Clear();
                    newAccessor.NullableByteDict.Clear();
                    newAccessor.NullableInt16Dict.Clear();
                    newAccessor.NullableInt32Dict.Clear();
                    newAccessor.NullableInt64Dict.Clear();
                    newAccessor.NullableSingleDict.Clear();
                    newAccessor.NullableDoubleDict.Clear();
                    newAccessor.NullableBooleanDict.Clear();
                    newAccessor.NullableDateTimeOffsetDict.Clear();
                    newAccessor.NullableDecimalDict.Clear();
                    newAccessor.NullableDecimal128Dict.Clear();
                    newAccessor.NullableObjectIdDict.Clear();
                    newAccessor.ObjectDict.Clear();
                    newAccessor.RealmValueDict.Clear();
                }

                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharSet, newAccessor.CharSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteSet, newAccessor.ByteSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16Set, newAccessor.Int16Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32Set, newAccessor.Int32Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64Set, newAccessor.Int64Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.SingleSet, newAccessor.SingleSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleSet, newAccessor.DoubleSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanSet, newAccessor.BooleanSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalSet, newAccessor.DecimalSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128Set, newAccessor.Decimal128Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdSet, newAccessor.ObjectIdSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringSet, newAccessor.StringSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableStringSet, newAccessor.NullableStringSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArraySet, newAccessor.ByteArraySet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteArraySet, newAccessor.NullableByteArraySet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetSet, newAccessor.DateTimeOffsetSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableCharSet, newAccessor.NullableCharSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteSet, newAccessor.NullableByteSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt16Set, newAccessor.NullableInt16Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt32Set, newAccessor.NullableInt32Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt64Set, newAccessor.NullableInt64Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableSingleSet, newAccessor.NullableSingleSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDoubleSet, newAccessor.NullableDoubleSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBooleanSet, newAccessor.NullableBooleanSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDateTimeOffsetSet, newAccessor.NullableDateTimeOffsetSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimalSet, newAccessor.NullableDecimalSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimal128Set, newAccessor.NullableDecimal128Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableObjectIdSet, newAccessor.NullableObjectIdSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectSet, newAccessor.ObjectSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueSet, newAccessor.RealmValueSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharList, newAccessor.CharList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteList, newAccessor.ByteList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16List, newAccessor.Int16List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32List, newAccessor.Int32List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64List, newAccessor.Int64List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.SingleList, newAccessor.SingleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleList, newAccessor.DoubleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanList, newAccessor.BooleanList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalList, newAccessor.DecimalList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128List, newAccessor.Decimal128List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdList, newAccessor.ObjectIdList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringList, newAccessor.StringList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableStringList, newAccessor.NullableStringList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayList, newAccessor.ByteArrayList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteArrayList, newAccessor.NullableByteArrayList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetList, newAccessor.DateTimeOffsetList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableCharList, newAccessor.NullableCharList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteList, newAccessor.NullableByteList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt16List, newAccessor.NullableInt16List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt32List, newAccessor.NullableInt32List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt64List, newAccessor.NullableInt64List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableSingleList, newAccessor.NullableSingleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDoubleList, newAccessor.NullableDoubleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBooleanList, newAccessor.NullableBooleanList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDateTimeOffsetList, newAccessor.NullableDateTimeOffsetList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimalList, newAccessor.NullableDecimalList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimal128List, newAccessor.NullableDecimal128List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableObjectIdList, newAccessor.NullableObjectIdList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectList, newAccessor.ObjectList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.EmbeddedObjectList, newAccessor.EmbeddedObjectList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueList, newAccessor.RealmValueList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharDict, newAccessor.CharDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteDict, newAccessor.ByteDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16Dict, newAccessor.Int16Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32Dict, newAccessor.Int32Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64Dict, newAccessor.Int64Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.SingleDict, newAccessor.SingleDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleDict, newAccessor.DoubleDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanDict, newAccessor.BooleanDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalDict, newAccessor.DecimalDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128Dict, newAccessor.Decimal128Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdDict, newAccessor.ObjectIdDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringDict, newAccessor.StringDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableStringDict, newAccessor.NullableStringDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayDict, newAccessor.ByteArrayDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteArrayDict, newAccessor.NullableByteArrayDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetDict, newAccessor.DateTimeOffsetDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableCharDict, newAccessor.NullableCharDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableByteDict, newAccessor.NullableByteDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt16Dict, newAccessor.NullableInt16Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt32Dict, newAccessor.NullableInt32Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableInt64Dict, newAccessor.NullableInt64Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableSingleDict, newAccessor.NullableSingleDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDoubleDict, newAccessor.NullableDoubleDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableBooleanDict, newAccessor.NullableBooleanDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDateTimeOffsetDict, newAccessor.NullableDateTimeOffsetDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimalDict, newAccessor.NullableDecimalDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableDecimal128Dict, newAccessor.NullableDecimal128Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.NullableObjectIdDict, newAccessor.NullableObjectIdDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectDict, newAccessor.ObjectDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueDict, newAccessor.RealmValueDict, update, skipDefaults);
            }

            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }

            OnManaged();
        }

        #endregion

        /// <summary>
        /// Called when the object has been managed by a Realm.
        /// </summary>
        /// <remarks>
        /// This method will be called either when a managed object is materialized or when an unmanaged object has been
        /// added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
        /// it is not yet clear whether the object is managed or not.
        /// </remarks>
        partial void OnManaged();

        private event PropertyChangedEventHandler? _propertyChanged;

        public event PropertyChangedEventHandler? PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }

                _propertyChanged += value;
            }

            remove
            {
                _propertyChanged -= value;

                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }

        /// <summary>
        /// Called when a property has changed on this class.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        /// <remarks>
        /// For this method to be called, you need to have first subscribed to <see cref="PropertyChanged"/>.
        /// This can be used to react to changes to the current object, e.g. raising <see cref="PropertyChanged"/> for computed properties.
        /// </remarks>
        /// <example>
        /// <code>
        /// class MyClass : IRealmObject
        /// {
        ///     public int StatusCodeRaw { get; set; }
        ///     public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
        ///     partial void OnPropertyChanged(string propertyName)
        ///     {
        ///         if (propertyName == nameof(StatusCodeRaw))
        ///         {
        ///             RaisePropertyChanged(nameof(StatusCode));
        ///         }
        ///     }
        /// }
        /// </code>
        /// Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="PropertyChanged"/>
        /// subscribers that <c>StatusCode</c> has changed, we implement <see cref="OnPropertyChanged"/> and
        /// raise <see cref="PropertyChanged"/> manually by calling <see cref="RaisePropertyChanged"/>.
        /// </example>
        partial void OnPropertyChanged(string? propertyName);

        private void RaisePropertyChanged([CallerMemberName] string propertyName = "")
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }

        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }

        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }

        public static explicit operator CollectionsObject(Realms.RealmValue val) => val.AsRealmObject<CollectionsObject>();

        public static implicit operator Realms.RealmValue(CollectionsObject? val) => val == null ? Realms.RealmValue.Null : Realms.RealmValue.Object(val);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public TypeInfo GetTypeInfo() => Accessor.GetTypeInfo(this);

        public override bool Equals(object? obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj is InvalidObject)
            {
                return !IsValid;
            }

            if (obj is not Realms.IRealmObjectBase iro)
            {
                return false;
            }

            return Accessor.Equals(iro.Accessor);
        }

        public override int GetHashCode() => IsManaged ? Accessor.GetHashCode() : base.GetHashCode();

        public override string? ToString() => Accessor.ToString();

        [EditorBrowsable(EditorBrowsableState.Never)]
        private class CollectionsObjectObjectHelper : Realms.Weaving.IRealmObjectHelper
        {
            public void CopyToRealm(Realms.IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }

            public Realms.ManagedAccessor CreateAccessor() => new CollectionsObjectManagedAccessor();

            public Realms.IRealmObjectBase CreateInstance() => new CollectionsObject();

            public bool TryGetPrimaryKeyValue(Realms.IRealmObjectBase instance, out object? value)
            {
                value = null;
                return false;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal interface ICollectionsObjectAccessor : Realms.IRealmAccessor
        {
            System.Collections.Generic.ISet<char> CharSet { get; }

            System.Collections.Generic.ISet<byte> ByteSet { get; }

            System.Collections.Generic.ISet<short> Int16Set { get; }

            System.Collections.Generic.ISet<int> Int32Set { get; }

            System.Collections.Generic.ISet<long> Int64Set { get; }

            System.Collections.Generic.ISet<float> SingleSet { get; }

            System.Collections.Generic.ISet<double> DoubleSet { get; }

            System.Collections.Generic.ISet<bool> BooleanSet { get; }

            System.Collections.Generic.ISet<decimal> DecimalSet { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet { get; }

            System.Collections.Generic.ISet<string> StringSet { get; }

            System.Collections.Generic.ISet<string?> NullableStringSet { get; }

            System.Collections.Generic.ISet<byte[]> ByteArraySet { get; }

            System.Collections.Generic.ISet<byte[]?> NullableByteArraySet { get; }

            System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet { get; }

            System.Collections.Generic.ISet<char?> NullableCharSet { get; }

            System.Collections.Generic.ISet<byte?> NullableByteSet { get; }

            System.Collections.Generic.ISet<short?> NullableInt16Set { get; }

            System.Collections.Generic.ISet<int?> NullableInt32Set { get; }

            System.Collections.Generic.ISet<long?> NullableInt64Set { get; }

            System.Collections.Generic.ISet<float?> NullableSingleSet { get; }

            System.Collections.Generic.ISet<double?> NullableDoubleSet { get; }

            System.Collections.Generic.ISet<bool?> NullableBooleanSet { get; }

            System.Collections.Generic.ISet<System.DateTimeOffset?> NullableDateTimeOffsetSet { get; }

            System.Collections.Generic.ISet<decimal?> NullableDecimalSet { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.Decimal128?> NullableDecimal128Set { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.ObjectId?> NullableObjectIdSet { get; }

            System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet { get; }

            System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet { get; }

            System.Collections.Generic.IList<char> CharList { get; }

            System.Collections.Generic.IList<byte> ByteList { get; }

            System.Collections.Generic.IList<short> Int16List { get; }

            System.Collections.Generic.IList<int> Int32List { get; }

            System.Collections.Generic.IList<long> Int64List { get; }

            System.Collections.Generic.IList<float> SingleList { get; }

            System.Collections.Generic.IList<double> DoubleList { get; }

            System.Collections.Generic.IList<bool> BooleanList { get; }

            System.Collections.Generic.IList<decimal> DecimalList { get; }

            System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; }

            System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; }

            System.Collections.Generic.IList<string> StringList { get; }

            System.Collections.Generic.IList<string?> NullableStringList { get; }

            System.Collections.Generic.IList<byte[]> ByteArrayList { get; }

            System.Collections.Generic.IList<byte[]?> NullableByteArrayList { get; }

            System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; }

            System.Collections.Generic.IList<char?> NullableCharList { get; }

            System.Collections.Generic.IList<byte?> NullableByteList { get; }

            System.Collections.Generic.IList<short?> NullableInt16List { get; }

            System.Collections.Generic.IList<int?> NullableInt32List { get; }

            System.Collections.Generic.IList<long?> NullableInt64List { get; }

            System.Collections.Generic.IList<float?> NullableSingleList { get; }

            System.Collections.Generic.IList<double?> NullableDoubleList { get; }

            System.Collections.Generic.IList<bool?> NullableBooleanList { get; }

            System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList { get; }

            System.Collections.Generic.IList<decimal?> NullableDecimalList { get; }

            System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List { get; }

            System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList { get; }

            System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList { get; }

            System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList { get; }

            System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; }

            System.Collections.Generic.IDictionary<string, char> CharDict { get; }

            System.Collections.Generic.IDictionary<string, byte> ByteDict { get; }

            System.Collections.Generic.IDictionary<string, short> Int16Dict { get; }

            System.Collections.Generic.IDictionary<string, int> Int32Dict { get; }

            System.Collections.Generic.IDictionary<string, long> Int64Dict { get; }

            System.Collections.Generic.IDictionary<string, float> SingleDict { get; }

            System.Collections.Generic.IDictionary<string, double> DoubleDict { get; }

            System.Collections.Generic.IDictionary<string, bool> BooleanDict { get; }

            System.Collections.Generic.IDictionary<string, decimal> DecimalDict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict { get; }

            System.Collections.Generic.IDictionary<string, string> StringDict { get; }

            System.Collections.Generic.IDictionary<string, string?> NullableStringDict { get; }

            System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict { get; }

            System.Collections.Generic.IDictionary<string, byte[]?> NullableByteArrayDict { get; }

            System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict { get; }

            System.Collections.Generic.IDictionary<string, char?> NullableCharDict { get; }

            System.Collections.Generic.IDictionary<string, byte?> NullableByteDict { get; }

            System.Collections.Generic.IDictionary<string, short?> NullableInt16Dict { get; }

            System.Collections.Generic.IDictionary<string, int?> NullableInt32Dict { get; }

            System.Collections.Generic.IDictionary<string, long?> NullableInt64Dict { get; }

            System.Collections.Generic.IDictionary<string, float?> NullableSingleDict { get; }

            System.Collections.Generic.IDictionary<string, double?> NullableDoubleDict { get; }

            System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDict { get; }

            System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDict { get; }

            System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDict { get; }

            System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict { get; }

            System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict { get; }
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal class CollectionsObjectManagedAccessor : Realms.ManagedAccessor, ICollectionsObjectAccessor
        {
            private System.Collections.Generic.ISet<char> _charSet = null!;
            public System.Collections.Generic.ISet<char> CharSet
            {
                get
                {
                    if (_charSet == null)
                    {
                        _charSet = GetSetValue<char>("CharSet");
                    }

                    return _charSet;
                }
            }

            private System.Collections.Generic.ISet<byte> _byteSet = null!;
            public System.Collections.Generic.ISet<byte> ByteSet
            {
                get
                {
                    if (_byteSet == null)
                    {
                        _byteSet = GetSetValue<byte>("ByteSet");
                    }

                    return _byteSet;
                }
            }

            private System.Collections.Generic.ISet<short> _int16Set = null!;
            public System.Collections.Generic.ISet<short> Int16Set
            {
                get
                {
                    if (_int16Set == null)
                    {
                        _int16Set = GetSetValue<short>("Int16Set");
                    }

                    return _int16Set;
                }
            }

            private System.Collections.Generic.ISet<int> _int32Set = null!;
            public System.Collections.Generic.ISet<int> Int32Set
            {
                get
                {
                    if (_int32Set == null)
                    {
                        _int32Set = GetSetValue<int>("Int32Set");
                    }

                    return _int32Set;
                }
            }

            private System.Collections.Generic.ISet<long> _int64Set = null!;
            public System.Collections.Generic.ISet<long> Int64Set
            {
                get
                {
                    if (_int64Set == null)
                    {
                        _int64Set = GetSetValue<long>("Int64Set");
                    }

                    return _int64Set;
                }
            }

            private System.Collections.Generic.ISet<float> _singleSet = null!;
            public System.Collections.Generic.ISet<float> SingleSet
            {
                get
                {
                    if (_singleSet == null)
                    {
                        _singleSet = GetSetValue<float>("SingleSet");
                    }

                    return _singleSet;
                }
            }

            private System.Collections.Generic.ISet<double> _doubleSet = null!;
            public System.Collections.Generic.ISet<double> DoubleSet
            {
                get
                {
                    if (_doubleSet == null)
                    {
                        _doubleSet = GetSetValue<double>("DoubleSet");
                    }

                    return _doubleSet;
                }
            }

            private System.Collections.Generic.ISet<bool> _booleanSet = null!;
            public System.Collections.Generic.ISet<bool> BooleanSet
            {
                get
                {
                    if (_booleanSet == null)
                    {
                        _booleanSet = GetSetValue<bool>("BooleanSet");
                    }

                    return _booleanSet;
                }
            }

            private System.Collections.Generic.ISet<decimal> _decimalSet = null!;
            public System.Collections.Generic.ISet<decimal> DecimalSet
            {
                get
                {
                    if (_decimalSet == null)
                    {
                        _decimalSet = GetSetValue<decimal>("DecimalSet");
                    }

                    return _decimalSet;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> _decimal128Set = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set
            {
                get
                {
                    if (_decimal128Set == null)
                    {
                        _decimal128Set = GetSetValue<MongoDB.Bson.Decimal128>("Decimal128Set");
                    }

                    return _decimal128Set;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> _objectIdSet = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet
            {
                get
                {
                    if (_objectIdSet == null)
                    {
                        _objectIdSet = GetSetValue<MongoDB.Bson.ObjectId>("ObjectIdSet");
                    }

                    return _objectIdSet;
                }
            }

            private System.Collections.Generic.ISet<string> _stringSet = null!;
            public System.Collections.Generic.ISet<string> StringSet
            {
                get
                {
                    if (_stringSet == null)
                    {
                        _stringSet = GetSetValue<string>("StringSet");
                    }

                    return _stringSet;
                }
            }

            private System.Collections.Generic.ISet<string?> _nullableStringSet = null!;
            public System.Collections.Generic.ISet<string?> NullableStringSet
            {
                get
                {
                    if (_nullableStringSet == null)
                    {
                        _nullableStringSet = GetSetValue<string?>("NullableStringSet");
                    }

                    return _nullableStringSet;
                }
            }

            private System.Collections.Generic.ISet<byte[]> _byteArraySet = null!;
            public System.Collections.Generic.ISet<byte[]> ByteArraySet
            {
                get
                {
                    if (_byteArraySet == null)
                    {
                        _byteArraySet = GetSetValue<byte[]>("ByteArraySet");
                    }

                    return _byteArraySet;
                }
            }

            private System.Collections.Generic.ISet<byte[]?> _nullableByteArraySet = null!;
            public System.Collections.Generic.ISet<byte[]?> NullableByteArraySet
            {
                get
                {
                    if (_nullableByteArraySet == null)
                    {
                        _nullableByteArraySet = GetSetValue<byte[]?>("NullableByteArraySet");
                    }

                    return _nullableByteArraySet;
                }
            }

            private System.Collections.Generic.ISet<System.DateTimeOffset> _dateTimeOffsetSet = null!;
            public System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet
            {
                get
                {
                    if (_dateTimeOffsetSet == null)
                    {
                        _dateTimeOffsetSet = GetSetValue<System.DateTimeOffset>("DateTimeOffsetSet");
                    }

                    return _dateTimeOffsetSet;
                }
            }

            private System.Collections.Generic.ISet<char?> _nullableCharSet = null!;
            public System.Collections.Generic.ISet<char?> NullableCharSet
            {
                get
                {
                    if (_nullableCharSet == null)
                    {
                        _nullableCharSet = GetSetValue<char?>("NullableCharSet");
                    }

                    return _nullableCharSet;
                }
            }

            private System.Collections.Generic.ISet<byte?> _nullableByteSet = null!;
            public System.Collections.Generic.ISet<byte?> NullableByteSet
            {
                get
                {
                    if (_nullableByteSet == null)
                    {
                        _nullableByteSet = GetSetValue<byte?>("NullableByteSet");
                    }

                    return _nullableByteSet;
                }
            }

            private System.Collections.Generic.ISet<short?> _nullableInt16Set = null!;
            public System.Collections.Generic.ISet<short?> NullableInt16Set
            {
                get
                {
                    if (_nullableInt16Set == null)
                    {
                        _nullableInt16Set = GetSetValue<short?>("NullableInt16Set");
                    }

                    return _nullableInt16Set;
                }
            }

            private System.Collections.Generic.ISet<int?> _nullableInt32Set = null!;
            public System.Collections.Generic.ISet<int?> NullableInt32Set
            {
                get
                {
                    if (_nullableInt32Set == null)
                    {
                        _nullableInt32Set = GetSetValue<int?>("NullableInt32Set");
                    }

                    return _nullableInt32Set;
                }
            }

            private System.Collections.Generic.ISet<long?> _nullableInt64Set = null!;
            public System.Collections.Generic.ISet<long?> NullableInt64Set
            {
                get
                {
                    if (_nullableInt64Set == null)
                    {
                        _nullableInt64Set = GetSetValue<long?>("NullableInt64Set");
                    }

                    return _nullableInt64Set;
                }
            }

            private System.Collections.Generic.ISet<float?> _nullableSingleSet = null!;
            public System.Collections.Generic.ISet<float?> NullableSingleSet
            {
                get
                {
                    if (_nullableSingleSet == null)
                    {
                        _nullableSingleSet = GetSetValue<float?>("NullableSingleSet");
                    }

                    return _nullableSingleSet;
                }
            }

            private System.Collections.Generic.ISet<double?> _nullableDoubleSet = null!;
            public System.Collections.Generic.ISet<double?> NullableDoubleSet
            {
                get
                {
                    if (_nullableDoubleSet == null)
                    {
                        _nullableDoubleSet = GetSetValue<double?>("NullableDoubleSet");
                    }

                    return _nullableDoubleSet;
                }
            }

            private System.Collections.Generic.ISet<bool?> _nullableBooleanSet = null!;
            public System.Collections.Generic.ISet<bool?> NullableBooleanSet
            {
                get
                {
                    if (_nullableBooleanSet == null)
                    {
                        _nullableBooleanSet = GetSetValue<bool?>("NullableBooleanSet");
                    }

                    return _nullableBooleanSet;
                }
            }

            private System.Collections.Generic.ISet<System.DateTimeOffset?> _nullableDateTimeOffsetSet = null!;
            public System.Collections.Generic.ISet<System.DateTimeOffset?> NullableDateTimeOffsetSet
            {
                get
                {
                    if (_nullableDateTimeOffsetSet == null)
                    {
                        _nullableDateTimeOffsetSet = GetSetValue<System.DateTimeOffset?>("NullableDateTimeOffsetSet");
                    }

                    return _nullableDateTimeOffsetSet;
                }
            }

            private System.Collections.Generic.ISet<decimal?> _nullableDecimalSet = null!;
            public System.Collections.Generic.ISet<decimal?> NullableDecimalSet
            {
                get
                {
                    if (_nullableDecimalSet == null)
                    {
                        _nullableDecimalSet = GetSetValue<decimal?>("NullableDecimalSet");
                    }

                    return _nullableDecimalSet;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.Decimal128?> _nullableDecimal128Set = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128?> NullableDecimal128Set
            {
                get
                {
                    if (_nullableDecimal128Set == null)
                    {
                        _nullableDecimal128Set = GetSetValue<MongoDB.Bson.Decimal128?>("NullableDecimal128Set");
                    }

                    return _nullableDecimal128Set;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.ObjectId?> _nullableObjectIdSet = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId?> NullableObjectIdSet
            {
                get
                {
                    if (_nullableObjectIdSet == null)
                    {
                        _nullableObjectIdSet = GetSetValue<MongoDB.Bson.ObjectId?>("NullableObjectIdSet");
                    }

                    return _nullableObjectIdSet;
                }
            }

            private System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> _objectSet = null!;
            public System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet
            {
                get
                {
                    if (_objectSet == null)
                    {
                        _objectSet = GetSetValue<Realms.Tests.IntPropertyObject>("ObjectSet");
                    }

                    return _objectSet;
                }
            }

            private System.Collections.Generic.ISet<Realms.RealmValue> _realmValueSet = null!;
            public System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet
            {
                get
                {
                    if (_realmValueSet == null)
                    {
                        _realmValueSet = GetSetValue<Realms.RealmValue>("RealmValueSet");
                    }

                    return _realmValueSet;
                }
            }

            private System.Collections.Generic.IList<char> _charList = null!;
            public System.Collections.Generic.IList<char> CharList
            {
                get
                {
                    if (_charList == null)
                    {
                        _charList = GetListValue<char>("CharList");
                    }

                    return _charList;
                }
            }

            private System.Collections.Generic.IList<byte> _byteList = null!;
            public System.Collections.Generic.IList<byte> ByteList
            {
                get
                {
                    if (_byteList == null)
                    {
                        _byteList = GetListValue<byte>("ByteList");
                    }

                    return _byteList;
                }
            }

            private System.Collections.Generic.IList<short> _int16List = null!;
            public System.Collections.Generic.IList<short> Int16List
            {
                get
                {
                    if (_int16List == null)
                    {
                        _int16List = GetListValue<short>("Int16List");
                    }

                    return _int16List;
                }
            }

            private System.Collections.Generic.IList<int> _int32List = null!;
            public System.Collections.Generic.IList<int> Int32List
            {
                get
                {
                    if (_int32List == null)
                    {
                        _int32List = GetListValue<int>("Int32List");
                    }

                    return _int32List;
                }
            }

            private System.Collections.Generic.IList<long> _int64List = null!;
            public System.Collections.Generic.IList<long> Int64List
            {
                get
                {
                    if (_int64List == null)
                    {
                        _int64List = GetListValue<long>("Int64List");
                    }

                    return _int64List;
                }
            }

            private System.Collections.Generic.IList<float> _singleList = null!;
            public System.Collections.Generic.IList<float> SingleList
            {
                get
                {
                    if (_singleList == null)
                    {
                        _singleList = GetListValue<float>("SingleList");
                    }

                    return _singleList;
                }
            }

            private System.Collections.Generic.IList<double> _doubleList = null!;
            public System.Collections.Generic.IList<double> DoubleList
            {
                get
                {
                    if (_doubleList == null)
                    {
                        _doubleList = GetListValue<double>("DoubleList");
                    }

                    return _doubleList;
                }
            }

            private System.Collections.Generic.IList<bool> _booleanList = null!;
            public System.Collections.Generic.IList<bool> BooleanList
            {
                get
                {
                    if (_booleanList == null)
                    {
                        _booleanList = GetListValue<bool>("BooleanList");
                    }

                    return _booleanList;
                }
            }

            private System.Collections.Generic.IList<decimal> _decimalList = null!;
            public System.Collections.Generic.IList<decimal> DecimalList
            {
                get
                {
                    if (_decimalList == null)
                    {
                        _decimalList = GetListValue<decimal>("DecimalList");
                    }

                    return _decimalList;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.Decimal128> _decimal128List = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List
            {
                get
                {
                    if (_decimal128List == null)
                    {
                        _decimal128List = GetListValue<MongoDB.Bson.Decimal128>("Decimal128List");
                    }

                    return _decimal128List;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.ObjectId> _objectIdList = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList
            {
                get
                {
                    if (_objectIdList == null)
                    {
                        _objectIdList = GetListValue<MongoDB.Bson.ObjectId>("ObjectIdList");
                    }

                    return _objectIdList;
                }
            }

            private System.Collections.Generic.IList<string> _stringList = null!;
            public System.Collections.Generic.IList<string> StringList
            {
                get
                {
                    if (_stringList == null)
                    {
                        _stringList = GetListValue<string>("StringList");
                    }

                    return _stringList;
                }
            }

            private System.Collections.Generic.IList<string?> _nullableStringList = null!;
            public System.Collections.Generic.IList<string?> NullableStringList
            {
                get
                {
                    if (_nullableStringList == null)
                    {
                        _nullableStringList = GetListValue<string?>("NullableStringList");
                    }

                    return _nullableStringList;
                }
            }

            private System.Collections.Generic.IList<byte[]> _byteArrayList = null!;
            public System.Collections.Generic.IList<byte[]> ByteArrayList
            {
                get
                {
                    if (_byteArrayList == null)
                    {
                        _byteArrayList = GetListValue<byte[]>("ByteArrayList");
                    }

                    return _byteArrayList;
                }
            }

            private System.Collections.Generic.IList<byte[]?> _nullableByteArrayList = null!;
            public System.Collections.Generic.IList<byte[]?> NullableByteArrayList
            {
                get
                {
                    if (_nullableByteArrayList == null)
                    {
                        _nullableByteArrayList = GetListValue<byte[]?>("NullableByteArrayList");
                    }

                    return _nullableByteArrayList;
                }
            }

            private System.Collections.Generic.IList<System.DateTimeOffset> _dateTimeOffsetList = null!;
            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList
            {
                get
                {
                    if (_dateTimeOffsetList == null)
                    {
                        _dateTimeOffsetList = GetListValue<System.DateTimeOffset>("DateTimeOffsetList");
                    }

                    return _dateTimeOffsetList;
                }
            }

            private System.Collections.Generic.IList<char?> _nullableCharList = null!;
            public System.Collections.Generic.IList<char?> NullableCharList
            {
                get
                {
                    if (_nullableCharList == null)
                    {
                        _nullableCharList = GetListValue<char?>("NullableCharList");
                    }

                    return _nullableCharList;
                }
            }

            private System.Collections.Generic.IList<byte?> _nullableByteList = null!;
            public System.Collections.Generic.IList<byte?> NullableByteList
            {
                get
                {
                    if (_nullableByteList == null)
                    {
                        _nullableByteList = GetListValue<byte?>("NullableByteList");
                    }

                    return _nullableByteList;
                }
            }

            private System.Collections.Generic.IList<short?> _nullableInt16List = null!;
            public System.Collections.Generic.IList<short?> NullableInt16List
            {
                get
                {
                    if (_nullableInt16List == null)
                    {
                        _nullableInt16List = GetListValue<short?>("NullableInt16List");
                    }

                    return _nullableInt16List;
                }
            }

            private System.Collections.Generic.IList<int?> _nullableInt32List = null!;
            public System.Collections.Generic.IList<int?> NullableInt32List
            {
                get
                {
                    if (_nullableInt32List == null)
                    {
                        _nullableInt32List = GetListValue<int?>("NullableInt32List");
                    }

                    return _nullableInt32List;
                }
            }

            private System.Collections.Generic.IList<long?> _nullableInt64List = null!;
            public System.Collections.Generic.IList<long?> NullableInt64List
            {
                get
                {
                    if (_nullableInt64List == null)
                    {
                        _nullableInt64List = GetListValue<long?>("NullableInt64List");
                    }

                    return _nullableInt64List;
                }
            }

            private System.Collections.Generic.IList<float?> _nullableSingleList = null!;
            public System.Collections.Generic.IList<float?> NullableSingleList
            {
                get
                {
                    if (_nullableSingleList == null)
                    {
                        _nullableSingleList = GetListValue<float?>("NullableSingleList");
                    }

                    return _nullableSingleList;
                }
            }

            private System.Collections.Generic.IList<double?> _nullableDoubleList = null!;
            public System.Collections.Generic.IList<double?> NullableDoubleList
            {
                get
                {
                    if (_nullableDoubleList == null)
                    {
                        _nullableDoubleList = GetListValue<double?>("NullableDoubleList");
                    }

                    return _nullableDoubleList;
                }
            }

            private System.Collections.Generic.IList<bool?> _nullableBooleanList = null!;
            public System.Collections.Generic.IList<bool?> NullableBooleanList
            {
                get
                {
                    if (_nullableBooleanList == null)
                    {
                        _nullableBooleanList = GetListValue<bool?>("NullableBooleanList");
                    }

                    return _nullableBooleanList;
                }
            }

            private System.Collections.Generic.IList<System.DateTimeOffset?> _nullableDateTimeOffsetList = null!;
            public System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList
            {
                get
                {
                    if (_nullableDateTimeOffsetList == null)
                    {
                        _nullableDateTimeOffsetList = GetListValue<System.DateTimeOffset?>("NullableDateTimeOffsetList");
                    }

                    return _nullableDateTimeOffsetList;
                }
            }

            private System.Collections.Generic.IList<decimal?> _nullableDecimalList = null!;
            public System.Collections.Generic.IList<decimal?> NullableDecimalList
            {
                get
                {
                    if (_nullableDecimalList == null)
                    {
                        _nullableDecimalList = GetListValue<decimal?>("NullableDecimalList");
                    }

                    return _nullableDecimalList;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> _nullableDecimal128List = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List
            {
                get
                {
                    if (_nullableDecimal128List == null)
                    {
                        _nullableDecimal128List = GetListValue<MongoDB.Bson.Decimal128?>("NullableDecimal128List");
                    }

                    return _nullableDecimal128List;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> _nullableObjectIdList = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList
            {
                get
                {
                    if (_nullableObjectIdList == null)
                    {
                        _nullableObjectIdList = GetListValue<MongoDB.Bson.ObjectId?>("NullableObjectIdList");
                    }

                    return _nullableObjectIdList;
                }
            }

            private System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> _objectList = null!;
            public System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList
            {
                get
                {
                    if (_objectList == null)
                    {
                        _objectList = GetListValue<Realms.Tests.IntPropertyObject>("ObjectList");
                    }

                    return _objectList;
                }
            }

            private System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> _embeddedObjectList = null!;
            public System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList
            {
                get
                {
                    if (_embeddedObjectList == null)
                    {
                        _embeddedObjectList = GetListValue<Realms.Tests.EmbeddedIntPropertyObject>("EmbeddedObjectList");
                    }

                    return _embeddedObjectList;
                }
            }

            private System.Collections.Generic.IList<Realms.RealmValue> _realmValueList = null!;
            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList
            {
                get
                {
                    if (_realmValueList == null)
                    {
                        _realmValueList = GetListValue<Realms.RealmValue>("RealmValueList");
                    }

                    return _realmValueList;
                }
            }

            private System.Collections.Generic.IDictionary<string, char> _charDict = null!;
            public System.Collections.Generic.IDictionary<string, char> CharDict
            {
                get
                {
                    if (_charDict == null)
                    {
                        _charDict = GetDictionaryValue<char>("CharDict");
                    }

                    return _charDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte> _byteDict = null!;
            public System.Collections.Generic.IDictionary<string, byte> ByteDict
            {
                get
                {
                    if (_byteDict == null)
                    {
                        _byteDict = GetDictionaryValue<byte>("ByteDict");
                    }

                    return _byteDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, short> _int16Dict = null!;
            public System.Collections.Generic.IDictionary<string, short> Int16Dict
            {
                get
                {
                    if (_int16Dict == null)
                    {
                        _int16Dict = GetDictionaryValue<short>("Int16Dict");
                    }

                    return _int16Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, int> _int32Dict = null!;
            public System.Collections.Generic.IDictionary<string, int> Int32Dict
            {
                get
                {
                    if (_int32Dict == null)
                    {
                        _int32Dict = GetDictionaryValue<int>("Int32Dict");
                    }

                    return _int32Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, long> _int64Dict = null!;
            public System.Collections.Generic.IDictionary<string, long> Int64Dict
            {
                get
                {
                    if (_int64Dict == null)
                    {
                        _int64Dict = GetDictionaryValue<long>("Int64Dict");
                    }

                    return _int64Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, float> _singleDict = null!;
            public System.Collections.Generic.IDictionary<string, float> SingleDict
            {
                get
                {
                    if (_singleDict == null)
                    {
                        _singleDict = GetDictionaryValue<float>("SingleDict");
                    }

                    return _singleDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, double> _doubleDict = null!;
            public System.Collections.Generic.IDictionary<string, double> DoubleDict
            {
                get
                {
                    if (_doubleDict == null)
                    {
                        _doubleDict = GetDictionaryValue<double>("DoubleDict");
                    }

                    return _doubleDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, bool> _booleanDict = null!;
            public System.Collections.Generic.IDictionary<string, bool> BooleanDict
            {
                get
                {
                    if (_booleanDict == null)
                    {
                        _booleanDict = GetDictionaryValue<bool>("BooleanDict");
                    }

                    return _booleanDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, decimal> _decimalDict = null!;
            public System.Collections.Generic.IDictionary<string, decimal> DecimalDict
            {
                get
                {
                    if (_decimalDict == null)
                    {
                        _decimalDict = GetDictionaryValue<decimal>("DecimalDict");
                    }

                    return _decimalDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> _decimal128Dict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict
            {
                get
                {
                    if (_decimal128Dict == null)
                    {
                        _decimal128Dict = GetDictionaryValue<MongoDB.Bson.Decimal128>("Decimal128Dict");
                    }

                    return _decimal128Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> _objectIdDict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict
            {
                get
                {
                    if (_objectIdDict == null)
                    {
                        _objectIdDict = GetDictionaryValue<MongoDB.Bson.ObjectId>("ObjectIdDict");
                    }

                    return _objectIdDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, string> _stringDict = null!;
            public System.Collections.Generic.IDictionary<string, string> StringDict
            {
                get
                {
                    if (_stringDict == null)
                    {
                        _stringDict = GetDictionaryValue<string>("StringDict");
                    }

                    return _stringDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, string?> _nullableStringDict = null!;
            public System.Collections.Generic.IDictionary<string, string?> NullableStringDict
            {
                get
                {
                    if (_nullableStringDict == null)
                    {
                        _nullableStringDict = GetDictionaryValue<string?>("NullableStringDict");
                    }

                    return _nullableStringDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]> _byteArrayDict = null!;
            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict
            {
                get
                {
                    if (_byteArrayDict == null)
                    {
                        _byteArrayDict = GetDictionaryValue<byte[]>("ByteArrayDict");
                    }

                    return _byteArrayDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]?> _nullableByteArrayDict = null!;
            public System.Collections.Generic.IDictionary<string, byte[]?> NullableByteArrayDict
            {
                get
                {
                    if (_nullableByteArrayDict == null)
                    {
                        _nullableByteArrayDict = GetDictionaryValue<byte[]?>("NullableByteArrayDict");
                    }

                    return _nullableByteArrayDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, System.DateTimeOffset> _dateTimeOffsetDict = null!;
            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict
            {
                get
                {
                    if (_dateTimeOffsetDict == null)
                    {
                        _dateTimeOffsetDict = GetDictionaryValue<System.DateTimeOffset>("DateTimeOffsetDict");
                    }

                    return _dateTimeOffsetDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, char?> _nullableCharDict = null!;
            public System.Collections.Generic.IDictionary<string, char?> NullableCharDict
            {
                get
                {
                    if (_nullableCharDict == null)
                    {
                        _nullableCharDict = GetDictionaryValue<char?>("NullableCharDict");
                    }

                    return _nullableCharDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte?> _nullableByteDict = null!;
            public System.Collections.Generic.IDictionary<string, byte?> NullableByteDict
            {
                get
                {
                    if (_nullableByteDict == null)
                    {
                        _nullableByteDict = GetDictionaryValue<byte?>("NullableByteDict");
                    }

                    return _nullableByteDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, short?> _nullableInt16Dict = null!;
            public System.Collections.Generic.IDictionary<string, short?> NullableInt16Dict
            {
                get
                {
                    if (_nullableInt16Dict == null)
                    {
                        _nullableInt16Dict = GetDictionaryValue<short?>("NullableInt16Dict");
                    }

                    return _nullableInt16Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, int?> _nullableInt32Dict = null!;
            public System.Collections.Generic.IDictionary<string, int?> NullableInt32Dict
            {
                get
                {
                    if (_nullableInt32Dict == null)
                    {
                        _nullableInt32Dict = GetDictionaryValue<int?>("NullableInt32Dict");
                    }

                    return _nullableInt32Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, long?> _nullableInt64Dict = null!;
            public System.Collections.Generic.IDictionary<string, long?> NullableInt64Dict
            {
                get
                {
                    if (_nullableInt64Dict == null)
                    {
                        _nullableInt64Dict = GetDictionaryValue<long?>("NullableInt64Dict");
                    }

                    return _nullableInt64Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, float?> _nullableSingleDict = null!;
            public System.Collections.Generic.IDictionary<string, float?> NullableSingleDict
            {
                get
                {
                    if (_nullableSingleDict == null)
                    {
                        _nullableSingleDict = GetDictionaryValue<float?>("NullableSingleDict");
                    }

                    return _nullableSingleDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, double?> _nullableDoubleDict = null!;
            public System.Collections.Generic.IDictionary<string, double?> NullableDoubleDict
            {
                get
                {
                    if (_nullableDoubleDict == null)
                    {
                        _nullableDoubleDict = GetDictionaryValue<double?>("NullableDoubleDict");
                    }

                    return _nullableDoubleDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, bool?> _nullableBooleanDict = null!;
            public System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDict
            {
                get
                {
                    if (_nullableBooleanDict == null)
                    {
                        _nullableBooleanDict = GetDictionaryValue<bool?>("NullableBooleanDict");
                    }

                    return _nullableBooleanDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> _nullableDateTimeOffsetDict = null!;
            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDict
            {
                get
                {
                    if (_nullableDateTimeOffsetDict == null)
                    {
                        _nullableDateTimeOffsetDict = GetDictionaryValue<System.DateTimeOffset?>("NullableDateTimeOffsetDict");
                    }

                    return _nullableDateTimeOffsetDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, decimal?> _nullableDecimalDict = null!;
            public System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDict
            {
                get
                {
                    if (_nullableDecimalDict == null)
                    {
                        _nullableDecimalDict = GetDictionaryValue<decimal?>("NullableDecimalDict");
                    }

                    return _nullableDecimalDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> _nullableDecimal128Dict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dict
            {
                get
                {
                    if (_nullableDecimal128Dict == null)
                    {
                        _nullableDecimal128Dict = GetDictionaryValue<MongoDB.Bson.Decimal128?>("NullableDecimal128Dict");
                    }

                    return _nullableDecimal128Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> _nullableObjectIdDict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDict
            {
                get
                {
                    if (_nullableObjectIdDict == null)
                    {
                        _nullableObjectIdDict = GetDictionaryValue<MongoDB.Bson.ObjectId?>("NullableObjectIdDict");
                    }

                    return _nullableObjectIdDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> _objectDict = null!;
            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict
            {
                get
                {
                    if (_objectDict == null)
                    {
                        _objectDict = GetDictionaryValue<Realms.Tests.IntPropertyObject?>("ObjectDict");
                    }

                    return _objectDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.RealmValue> _realmValueDict = null!;
            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict
            {
                get
                {
                    if (_realmValueDict == null)
                    {
                        _realmValueDict = GetDictionaryValue<Realms.RealmValue>("RealmValueDict");
                    }

                    return _realmValueDict;
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal class CollectionsObjectUnmanagedAccessor : Realms.UnmanagedAccessor, ICollectionsObjectAccessor
        {
            public override ObjectSchema ObjectSchema => CollectionsObject.RealmSchema;

            public System.Collections.Generic.ISet<char> CharSet { get; } = new HashSet<char>(RealmSet<char>.Comparer);

            public System.Collections.Generic.ISet<byte> ByteSet { get; } = new HashSet<byte>(RealmSet<byte>.Comparer);

            public System.Collections.Generic.ISet<short> Int16Set { get; } = new HashSet<short>(RealmSet<short>.Comparer);

            public System.Collections.Generic.ISet<int> Int32Set { get; } = new HashSet<int>(RealmSet<int>.Comparer);

            public System.Collections.Generic.ISet<long> Int64Set { get; } = new HashSet<long>(RealmSet<long>.Comparer);

            public System.Collections.Generic.ISet<float> SingleSet { get; } = new HashSet<float>(RealmSet<float>.Comparer);

            public System.Collections.Generic.ISet<double> DoubleSet { get; } = new HashSet<double>(RealmSet<double>.Comparer);

            public System.Collections.Generic.ISet<bool> BooleanSet { get; } = new HashSet<bool>(RealmSet<bool>.Comparer);

            public System.Collections.Generic.ISet<decimal> DecimalSet { get; } = new HashSet<decimal>(RealmSet<decimal>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set { get; } = new HashSet<MongoDB.Bson.Decimal128>(RealmSet<MongoDB.Bson.Decimal128>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet { get; } = new HashSet<MongoDB.Bson.ObjectId>(RealmSet<MongoDB.Bson.ObjectId>.Comparer);

            public System.Collections.Generic.ISet<string> StringSet { get; } = new HashSet<string>(RealmSet<string>.Comparer);

            public System.Collections.Generic.ISet<string?> NullableStringSet { get; } = new HashSet<string?>(RealmSet<string?>.Comparer);

            public System.Collections.Generic.ISet<byte[]> ByteArraySet { get; } = new HashSet<byte[]>(RealmSet<byte[]>.Comparer);

            public System.Collections.Generic.ISet<byte[]?> NullableByteArraySet { get; } = new HashSet<byte[]?>(RealmSet<byte[]?>.Comparer);

            public System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet { get; } = new HashSet<System.DateTimeOffset>(RealmSet<System.DateTimeOffset>.Comparer);

            public System.Collections.Generic.ISet<char?> NullableCharSet { get; } = new HashSet<char?>(RealmSet<char?>.Comparer);

            public System.Collections.Generic.ISet<byte?> NullableByteSet { get; } = new HashSet<byte?>(RealmSet<byte?>.Comparer);

            public System.Collections.Generic.ISet<short?> NullableInt16Set { get; } = new HashSet<short?>(RealmSet<short?>.Comparer);

            public System.Collections.Generic.ISet<int?> NullableInt32Set { get; } = new HashSet<int?>(RealmSet<int?>.Comparer);

            public System.Collections.Generic.ISet<long?> NullableInt64Set { get; } = new HashSet<long?>(RealmSet<long?>.Comparer);

            public System.Collections.Generic.ISet<float?> NullableSingleSet { get; } = new HashSet<float?>(RealmSet<float?>.Comparer);

            public System.Collections.Generic.ISet<double?> NullableDoubleSet { get; } = new HashSet<double?>(RealmSet<double?>.Comparer);

            public System.Collections.Generic.ISet<bool?> NullableBooleanSet { get; } = new HashSet<bool?>(RealmSet<bool?>.Comparer);

            public System.Collections.Generic.ISet<System.DateTimeOffset?> NullableDateTimeOffsetSet { get; } = new HashSet<System.DateTimeOffset?>(RealmSet<System.DateTimeOffset?>.Comparer);

            public System.Collections.Generic.ISet<decimal?> NullableDecimalSet { get; } = new HashSet<decimal?>(RealmSet<decimal?>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128?> NullableDecimal128Set { get; } = new HashSet<MongoDB.Bson.Decimal128?>(RealmSet<MongoDB.Bson.Decimal128?>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId?> NullableObjectIdSet { get; } = new HashSet<MongoDB.Bson.ObjectId?>(RealmSet<MongoDB.Bson.ObjectId?>.Comparer);

            public System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet { get; } = new HashSet<Realms.Tests.IntPropertyObject>(RealmSet<Realms.Tests.IntPropertyObject>.Comparer);

            public System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet { get; } = new HashSet<Realms.RealmValue>(RealmSet<Realms.RealmValue>.Comparer);

            public System.Collections.Generic.IList<char> CharList { get; } = new List<char>();

            public System.Collections.Generic.IList<byte> ByteList { get; } = new List<byte>();

            public System.Collections.Generic.IList<short> Int16List { get; } = new List<short>();

            public System.Collections.Generic.IList<int> Int32List { get; } = new List<int>();

            public System.Collections.Generic.IList<long> Int64List { get; } = new List<long>();

            public System.Collections.Generic.IList<float> SingleList { get; } = new List<float>();

            public System.Collections.Generic.IList<double> DoubleList { get; } = new List<double>();

            public System.Collections.Generic.IList<bool> BooleanList { get; } = new List<bool>();

            public System.Collections.Generic.IList<decimal> DecimalList { get; } = new List<decimal>();

            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; } = new List<MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; } = new List<MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IList<string> StringList { get; } = new List<string>();

            public System.Collections.Generic.IList<string?> NullableStringList { get; } = new List<string?>();

            public System.Collections.Generic.IList<byte[]> ByteArrayList { get; } = new List<byte[]>();

            public System.Collections.Generic.IList<byte[]?> NullableByteArrayList { get; } = new List<byte[]?>();

            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; } = new List<System.DateTimeOffset>();

            public System.Collections.Generic.IList<char?> NullableCharList { get; } = new List<char?>();

            public System.Collections.Generic.IList<byte?> NullableByteList { get; } = new List<byte?>();

            public System.Collections.Generic.IList<short?> NullableInt16List { get; } = new List<short?>();

            public System.Collections.Generic.IList<int?> NullableInt32List { get; } = new List<int?>();

            public System.Collections.Generic.IList<long?> NullableInt64List { get; } = new List<long?>();

            public System.Collections.Generic.IList<float?> NullableSingleList { get; } = new List<float?>();

            public System.Collections.Generic.IList<double?> NullableDoubleList { get; } = new List<double?>();

            public System.Collections.Generic.IList<bool?> NullableBooleanList { get; } = new List<bool?>();

            public System.Collections.Generic.IList<System.DateTimeOffset?> NullableDateTimeOffsetList { get; } = new List<System.DateTimeOffset?>();

            public System.Collections.Generic.IList<decimal?> NullableDecimalList { get; } = new List<decimal?>();

            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128?> NullableDecimal128List { get; } = new List<MongoDB.Bson.Decimal128?>();

            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId?> NullableObjectIdList { get; } = new List<MongoDB.Bson.ObjectId?>();

            public System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList { get; } = new List<Realms.Tests.IntPropertyObject>();

            public System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList { get; } = new List<Realms.Tests.EmbeddedIntPropertyObject>();

            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; } = new List<Realms.RealmValue>();

            public System.Collections.Generic.IDictionary<string, char> CharDict { get; } = new Dictionary<string, char>();

            public System.Collections.Generic.IDictionary<string, byte> ByteDict { get; } = new Dictionary<string, byte>();

            public System.Collections.Generic.IDictionary<string, short> Int16Dict { get; } = new Dictionary<string, short>();

            public System.Collections.Generic.IDictionary<string, int> Int32Dict { get; } = new Dictionary<string, int>();

            public System.Collections.Generic.IDictionary<string, long> Int64Dict { get; } = new Dictionary<string, long>();

            public System.Collections.Generic.IDictionary<string, float> SingleDict { get; } = new Dictionary<string, float>();

            public System.Collections.Generic.IDictionary<string, double> DoubleDict { get; } = new Dictionary<string, double>();

            public System.Collections.Generic.IDictionary<string, bool> BooleanDict { get; } = new Dictionary<string, bool>();

            public System.Collections.Generic.IDictionary<string, decimal> DecimalDict { get; } = new Dictionary<string, decimal>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict { get; } = new Dictionary<string, MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict { get; } = new Dictionary<string, MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IDictionary<string, string> StringDict { get; } = new Dictionary<string, string>();

            public System.Collections.Generic.IDictionary<string, string?> NullableStringDict { get; } = new Dictionary<string, string?>();

            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict { get; } = new Dictionary<string, byte[]>();

            public System.Collections.Generic.IDictionary<string, byte[]?> NullableByteArrayDict { get; } = new Dictionary<string, byte[]?>();

            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict { get; } = new Dictionary<string, System.DateTimeOffset>();

            public System.Collections.Generic.IDictionary<string, char?> NullableCharDict { get; } = new Dictionary<string, char?>();

            public System.Collections.Generic.IDictionary<string, byte?> NullableByteDict { get; } = new Dictionary<string, byte?>();

            public System.Collections.Generic.IDictionary<string, short?> NullableInt16Dict { get; } = new Dictionary<string, short?>();

            public System.Collections.Generic.IDictionary<string, int?> NullableInt32Dict { get; } = new Dictionary<string, int?>();

            public System.Collections.Generic.IDictionary<string, long?> NullableInt64Dict { get; } = new Dictionary<string, long?>();

            public System.Collections.Generic.IDictionary<string, float?> NullableSingleDict { get; } = new Dictionary<string, float?>();

            public System.Collections.Generic.IDictionary<string, double?> NullableDoubleDict { get; } = new Dictionary<string, double?>();

            public System.Collections.Generic.IDictionary<string, bool?> NullableBooleanDict { get; } = new Dictionary<string, bool?>();

            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset?> NullableDateTimeOffsetDict { get; } = new Dictionary<string, System.DateTimeOffset?>();

            public System.Collections.Generic.IDictionary<string, decimal?> NullableDecimalDict { get; } = new Dictionary<string, decimal?>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128?> NullableDecimal128Dict { get; } = new Dictionary<string, MongoDB.Bson.Decimal128?>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId?> NullableObjectIdDict { get; } = new Dictionary<string, MongoDB.Bson.ObjectId?>();

            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict { get; } = new Dictionary<string, Realms.Tests.IntPropertyObject?>();

            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict { get; } = new Dictionary<string, Realms.RealmValue>();

            public CollectionsObjectUnmanagedAccessor(Type objectType) : base(objectType)
            {
            }

            public override Realms.RealmValue GetValue(string propertyName)
            {
                throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}");
            }

            public override void SetValue(string propertyName, Realms.RealmValue val)
            {
                throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
            }

            public override void SetValueUnique(string propertyName, Realms.RealmValue val)
            {
                throw new InvalidOperationException("Cannot set the value of an non primary key property with SetValueUnique");
            }

            public override IList<T> GetListValue<T>(string propertyName)
            {
                return propertyName switch
                            {
                "CharList" => (IList<T>)CharList,
                "ByteList" => (IList<T>)ByteList,
                "Int16List" => (IList<T>)Int16List,
                "Int32List" => (IList<T>)Int32List,
                "Int64List" => (IList<T>)Int64List,
                "SingleList" => (IList<T>)SingleList,
                "DoubleList" => (IList<T>)DoubleList,
                "BooleanList" => (IList<T>)BooleanList,
                "DecimalList" => (IList<T>)DecimalList,
                "Decimal128List" => (IList<T>)Decimal128List,
                "ObjectIdList" => (IList<T>)ObjectIdList,
                "StringList" => (IList<T>)StringList,
                "NullableStringList" => (IList<T>)NullableStringList,
                "ByteArrayList" => (IList<T>)ByteArrayList,
                "NullableByteArrayList" => (IList<T>)NullableByteArrayList,
                "DateTimeOffsetList" => (IList<T>)DateTimeOffsetList,
                "NullableCharList" => (IList<T>)NullableCharList,
                "NullableByteList" => (IList<T>)NullableByteList,
                "NullableInt16List" => (IList<T>)NullableInt16List,
                "NullableInt32List" => (IList<T>)NullableInt32List,
                "NullableInt64List" => (IList<T>)NullableInt64List,
                "NullableSingleList" => (IList<T>)NullableSingleList,
                "NullableDoubleList" => (IList<T>)NullableDoubleList,
                "NullableBooleanList" => (IList<T>)NullableBooleanList,
                "NullableDateTimeOffsetList" => (IList<T>)NullableDateTimeOffsetList,
                "NullableDecimalList" => (IList<T>)NullableDecimalList,
                "NullableDecimal128List" => (IList<T>)NullableDecimal128List,
                "NullableObjectIdList" => (IList<T>)NullableObjectIdList,
                "ObjectList" => (IList<T>)ObjectList,
                "EmbeddedObjectList" => (IList<T>)EmbeddedObjectList,
                "RealmValueList" => (IList<T>)RealmValueList,

                                _ => throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}"),
                            };
            }

            public override ISet<T> GetSetValue<T>(string propertyName)
            {
                return propertyName switch
                            {
                "CharSet" => (ISet<T>)CharSet,
                "ByteSet" => (ISet<T>)ByteSet,
                "Int16Set" => (ISet<T>)Int16Set,
                "Int32Set" => (ISet<T>)Int32Set,
                "Int64Set" => (ISet<T>)Int64Set,
                "SingleSet" => (ISet<T>)SingleSet,
                "DoubleSet" => (ISet<T>)DoubleSet,
                "BooleanSet" => (ISet<T>)BooleanSet,
                "DecimalSet" => (ISet<T>)DecimalSet,
                "Decimal128Set" => (ISet<T>)Decimal128Set,
                "ObjectIdSet" => (ISet<T>)ObjectIdSet,
                "StringSet" => (ISet<T>)StringSet,
                "NullableStringSet" => (ISet<T>)NullableStringSet,
                "ByteArraySet" => (ISet<T>)ByteArraySet,
                "NullableByteArraySet" => (ISet<T>)NullableByteArraySet,
                "DateTimeOffsetSet" => (ISet<T>)DateTimeOffsetSet,
                "NullableCharSet" => (ISet<T>)NullableCharSet,
                "NullableByteSet" => (ISet<T>)NullableByteSet,
                "NullableInt16Set" => (ISet<T>)NullableInt16Set,
                "NullableInt32Set" => (ISet<T>)NullableInt32Set,
                "NullableInt64Set" => (ISet<T>)NullableInt64Set,
                "NullableSingleSet" => (ISet<T>)NullableSingleSet,
                "NullableDoubleSet" => (ISet<T>)NullableDoubleSet,
                "NullableBooleanSet" => (ISet<T>)NullableBooleanSet,
                "NullableDateTimeOffsetSet" => (ISet<T>)NullableDateTimeOffsetSet,
                "NullableDecimalSet" => (ISet<T>)NullableDecimalSet,
                "NullableDecimal128Set" => (ISet<T>)NullableDecimal128Set,
                "NullableObjectIdSet" => (ISet<T>)NullableObjectIdSet,
                "ObjectSet" => (ISet<T>)ObjectSet,
                "RealmValueSet" => (ISet<T>)RealmValueSet,

                                _ => throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}"),
                            };
            }

            public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
            {
                return propertyName switch
                {
                    "CharDict" => (IDictionary<string, TValue>)CharDict,
                    "ByteDict" => (IDictionary<string, TValue>)ByteDict,
                    "Int16Dict" => (IDictionary<string, TValue>)Int16Dict,
                    "Int32Dict" => (IDictionary<string, TValue>)Int32Dict,
                    "Int64Dict" => (IDictionary<string, TValue>)Int64Dict,
                    "SingleDict" => (IDictionary<string, TValue>)SingleDict,
                    "DoubleDict" => (IDictionary<string, TValue>)DoubleDict,
                    "BooleanDict" => (IDictionary<string, TValue>)BooleanDict,
                    "DecimalDict" => (IDictionary<string, TValue>)DecimalDict,
                    "Decimal128Dict" => (IDictionary<string, TValue>)Decimal128Dict,
                    "ObjectIdDict" => (IDictionary<string, TValue>)ObjectIdDict,
                    "StringDict" => (IDictionary<string, TValue>)StringDict,
                    "NullableStringDict" => (IDictionary<string, TValue>)NullableStringDict,
                    "ByteArrayDict" => (IDictionary<string, TValue>)ByteArrayDict,
                    "NullableByteArrayDict" => (IDictionary<string, TValue>)NullableByteArrayDict,
                    "DateTimeOffsetDict" => (IDictionary<string, TValue>)DateTimeOffsetDict,
                    "NullableCharDict" => (IDictionary<string, TValue>)NullableCharDict,
                    "NullableByteDict" => (IDictionary<string, TValue>)NullableByteDict,
                    "NullableInt16Dict" => (IDictionary<string, TValue>)NullableInt16Dict,
                    "NullableInt32Dict" => (IDictionary<string, TValue>)NullableInt32Dict,
                    "NullableInt64Dict" => (IDictionary<string, TValue>)NullableInt64Dict,
                    "NullableSingleDict" => (IDictionary<string, TValue>)NullableSingleDict,
                    "NullableDoubleDict" => (IDictionary<string, TValue>)NullableDoubleDict,
                    "NullableBooleanDict" => (IDictionary<string, TValue>)NullableBooleanDict,
                    "NullableDateTimeOffsetDict" => (IDictionary<string, TValue>)NullableDateTimeOffsetDict,
                    "NullableDecimalDict" => (IDictionary<string, TValue>)NullableDecimalDict,
                    "NullableDecimal128Dict" => (IDictionary<string, TValue>)NullableDecimal128Dict,
                    "NullableObjectIdDict" => (IDictionary<string, TValue>)NullableObjectIdDict,
                    "ObjectDict" => (IDictionary<string, TValue>)ObjectDict,
                    "RealmValueDict" => (IDictionary<string, TValue>)RealmValueDict,
                    _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
                };
            }
        }
    }
}
