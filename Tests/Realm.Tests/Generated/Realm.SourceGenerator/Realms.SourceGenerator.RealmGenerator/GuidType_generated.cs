// <auto-generated />
using Realms.Tests.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using Realms;
using Realms.Weaving;
using Realms.Generated;
using Realms.Schema;

namespace Realms.Tests.Database
{
    [Generated("IGuidTypeAccessor")]
    [Woven(typeof(GuidTypeObjectHelper))]
    public partial class GuidType : IRealmObject, INotifyPropertyChanged
    {
        public static ObjectSchema RealmSchema = new ObjectSchema.Builder("GuidType", isEmbedded: false)
        {
            Property.Primitive("_id", RealmValueType.Guid, isPrimaryKey: true, isIndexed: false, isNullable: false),
            Property.Primitive("RegularProperty", RealmValueType.Guid, isPrimaryKey: false, isIndexed: false, isNullable: false),
            Property.PrimitiveList("GuidList", RealmValueType.Guid, areElementsNullable: false),
            Property.PrimitiveSet("GuidSet", RealmValueType.Guid, areElementsNullable: false),
            Property.PrimitiveDictionary("GuidDict", RealmValueType.Guid, areElementsNullable: false),
            Property.Primitive("OptionalProperty", RealmValueType.Guid, isPrimaryKey: false, isIndexed: false, isNullable: true),
            Property.PrimitiveList("OptionalList", RealmValueType.Guid, areElementsNullable: true),
            Property.PrimitiveSet("OptionalSet", RealmValueType.Guid, areElementsNullable: true),
            Property.PrimitiveDictionary("OptionalDict", RealmValueType.Guid, areElementsNullable: true),
            Property.Object("LinkProperty", "GuidType"),
            Property.RealmValue("MixedProperty"),
            Property.RealmValueList("MixedList"),
            Property.RealmValueSet("MixedSet"),
            Property.RealmValueDictionary("MixedDict"),
            Property.Object("EmbeddedProperty", "EmbeddedGuidType"),
        }.Build();
        
        #region IRealmObject implementation
        
        private IGuidTypeAccessor _accessor;
        
        IRealmAccessor IRealmObjectBase.Accessor => Accessor;
        
        internal IGuidTypeAccessor Accessor => _accessor = _accessor ?? new GuidTypeUnmanagedAccessor(typeof(GuidType));
        
        public bool IsManaged => Accessor.IsManaged;
        
        public bool IsValid => Accessor.IsValid;
        
        public bool IsFrozen => Accessor.IsFrozen;
        
        public Realm Realm => Accessor.Realm;
        
        public ObjectSchema ObjectSchema => Accessor.ObjectSchema;
        
        public RealmObjectBase.Dynamic DynamicApi => Accessor.DynamicApi;
        
        public int BacklinksCount => Accessor.BacklinksCount;
        
        
        
        public void SetManagedAccessor(IRealmAccessor managedAccessor, IRealmObjectHelper helper = null, bool update = false, bool skipDefaults = false)
        {
            var newAccessor = (IGuidTypeAccessor)managedAccessor;
            var oldAccessor = _accessor as IGuidTypeAccessor;
            _accessor = newAccessor;
        
            if (helper != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.GuidList.Clear();
                    newAccessor.GuidSet.Clear();
                    newAccessor.GuidDict.Clear();
                    newAccessor.OptionalList.Clear();
                    newAccessor.OptionalSet.Clear();
                    newAccessor.OptionalDict.Clear();
                    newAccessor.MixedList.Clear();
                    newAccessor.MixedSet.Clear();
                    newAccessor.MixedDict.Clear();
                }
                
                newAccessor.Id = oldAccessor.Id;
                newAccessor.RegularProperty = oldAccessor.RegularProperty;
                foreach(var val in oldAccessor.GuidList)
                {
                    
                    newAccessor.GuidList.Add(val);
                }
                foreach(var val in oldAccessor.GuidSet)
                {
                    
                    newAccessor.GuidSet.Add(val);
                }
                foreach(var val in oldAccessor.GuidDict)
                {
                    
                    newAccessor.GuidDict.Add(val);
                }
                newAccessor.OptionalProperty = oldAccessor.OptionalProperty;
                foreach(var val in oldAccessor.OptionalList)
                {
                    
                    newAccessor.OptionalList.Add(val);
                }
                foreach(var val in oldAccessor.OptionalSet)
                {
                    
                    newAccessor.OptionalSet.Add(val);
                }
                foreach(var val in oldAccessor.OptionalDict)
                {
                    
                    newAccessor.OptionalDict.Add(val);
                }
                if(oldAccessor.LinkProperty != null)
                {
                    newAccessor.Realm.Add(oldAccessor.LinkProperty, update);
                }
                newAccessor.LinkProperty = oldAccessor.LinkProperty;
                newAccessor.MixedProperty = oldAccessor.MixedProperty;
                foreach(var val in oldAccessor.MixedList)
                {
                    
                    newAccessor.MixedList.Add(val);
                }
                foreach(var val in oldAccessor.MixedSet)
                {
                    
                    newAccessor.MixedSet.Add(val);
                }
                foreach(var val in oldAccessor.MixedDict)
                {
                    
                    newAccessor.MixedDict.Add(val);
                }
                newAccessor.EmbeddedProperty = oldAccessor.EmbeddedProperty;
            }
        
            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }
        
            OnManaged();
        }
        
        #endregion
        
        private event PropertyChangedEventHandler _propertyChanged;
        
        public event PropertyChangedEventHandler PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }
        
                _propertyChanged += value;
            }
        
            remove
            {
                _propertyChanged -= value;
        
                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }
        
        partial void OnPropertyChanged(string propertyName);
        
        private void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }
        
        partial void OnManaged();
        
        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }
        
        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }
        
        public static explicit operator GuidType(RealmValue val) => val.AsRealmObject<GuidType>();
        
        public static implicit operator RealmValue(GuidType val) => RealmValue.Object(val);
        
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }
        
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
        
            if (obj is not IRealmObjectBase iro)
            {
                return false;
            }
        
            return Accessor.Equals(iro.Accessor);
        }
        
        public override int GetHashCode()
        {
            return IsManaged ? Accessor.GetHashCode() : base.GetHashCode();
        }
        
        public override string ToString()
        {
            return Accessor.ToString();
        }
    
        [EditorBrowsable(EditorBrowsableState.Never)]
        private class GuidTypeObjectHelper : IRealmObjectHelper
        {
            public void CopyToRealm(IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }
        
            public ManagedAccessor CreateAccessor() => new GuidTypeManagedAccessor();
        
            public IRealmObjectBase CreateInstance()
            {
                return new GuidType();
            }
        
            public bool TryGetPrimaryKeyValue(IRealmObjectBase instance, out object value)
            {
                value = ((IGuidTypeAccessor)instance.Accessor).Id;
                return true;
            }
        }
    }
}

namespace Realms.Generated
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal interface IGuidTypeAccessor : IRealmAccessor
    {
        Guid Id { get; set; }
        
        Guid RegularProperty { get; set; }
        
        IList<Guid> GuidList { get; }
        
        ISet<Guid> GuidSet { get; }
        
        IDictionary<string, Guid> GuidDict { get; }
        
        Guid? OptionalProperty { get; set; }
        
        IList<Guid?> OptionalList { get; }
        
        ISet<Guid?> OptionalSet { get; }
        
        IDictionary<string, Guid?> OptionalDict { get; }
        
        GuidType LinkProperty { get; set; }
        
        RealmValue MixedProperty { get; set; }
        
        IList<RealmValue> MixedList { get; }
        
        ISet<RealmValue> MixedSet { get; }
        
        IDictionary<string, RealmValue> MixedDict { get; }
        
        EmbeddedGuidType EmbeddedProperty { get; set; }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    internal class GuidTypeManagedAccessor : ManagedAccessor, IGuidTypeAccessor
    {
        public Guid Id
        {
            get => (Guid)GetValue("_id");
            set => SetValueUnique("_id", value);
        }
        
        public Guid RegularProperty
        {
            get => (Guid)GetValue("RegularProperty");
            set => SetValue("RegularProperty", value);
        }
        
        private IList<Guid> _guidList;
        public IList<Guid> GuidList
        {
            get
            {
                if (_guidList == null)
                {
                    _guidList = GetListValue<Guid>("GuidList");
                }
        
                return _guidList;
            }
        }
        
        private ISet<Guid> _guidSet;
        public ISet<Guid> GuidSet
        {
            get
            {
                if (_guidSet == null)
                {
                    _guidSet = GetSetValue<Guid>("GuidSet");
                }
        
                return _guidSet;
            }
        }
        
        private IDictionary<string, Guid> _guidDict;
        public IDictionary<string, Guid> GuidDict
        {
            get
            {
                if (_guidDict == null)
                {
                    _guidDict = GetDictionaryValue<Guid>("GuidDict");
                }
        
                return _guidDict;
            }
        }
        
        public Guid? OptionalProperty
        {
            get => (Guid?)GetValue("OptionalProperty");
            set => SetValue("OptionalProperty", value);
        }
        
        private IList<Guid?> _optionalList;
        public IList<Guid?> OptionalList
        {
            get
            {
                if (_optionalList == null)
                {
                    _optionalList = GetListValue<Guid?>("OptionalList");
                }
        
                return _optionalList;
            }
        }
        
        private ISet<Guid?> _optionalSet;
        public ISet<Guid?> OptionalSet
        {
            get
            {
                if (_optionalSet == null)
                {
                    _optionalSet = GetSetValue<Guid?>("OptionalSet");
                }
        
                return _optionalSet;
            }
        }
        
        private IDictionary<string, Guid?> _optionalDict;
        public IDictionary<string, Guid?> OptionalDict
        {
            get
            {
                if (_optionalDict == null)
                {
                    _optionalDict = GetDictionaryValue<Guid?>("OptionalDict");
                }
        
                return _optionalDict;
            }
        }
        
        public GuidType LinkProperty
        {
            get => (GuidType)GetValue("LinkProperty");
            set => SetValue("LinkProperty", value);
        }
        
        public RealmValue MixedProperty
        {
            get => (RealmValue)GetValue("MixedProperty");
            set => SetValue("MixedProperty", value);
        }
        
        private IList<RealmValue> _mixedList;
        public IList<RealmValue> MixedList
        {
            get
            {
                if (_mixedList == null)
                {
                    _mixedList = GetListValue<RealmValue>("MixedList");
                }
        
                return _mixedList;
            }
        }
        
        private ISet<RealmValue> _mixedSet;
        public ISet<RealmValue> MixedSet
        {
            get
            {
                if (_mixedSet == null)
                {
                    _mixedSet = GetSetValue<RealmValue>("MixedSet");
                }
        
                return _mixedSet;
            }
        }
        
        private IDictionary<string, RealmValue> _mixedDict;
        public IDictionary<string, RealmValue> MixedDict
        {
            get
            {
                if (_mixedDict == null)
                {
                    _mixedDict = GetDictionaryValue<RealmValue>("MixedDict");
                }
        
                return _mixedDict;
            }
        }
        
        public EmbeddedGuidType EmbeddedProperty
        {
            get => (EmbeddedGuidType)GetValue("EmbeddedProperty");
            set => SetValue("EmbeddedProperty", value);
        }
    }

    internal class GuidTypeUnmanagedAccessor : UnmanagedAccessor, IGuidTypeAccessor
    {
        private Guid _id;
        public Guid Id
        {
            get => _id;
            set
            {
                _id = value;
                RaisePropertyChanged("Id");
            }
        }
        
        private Guid _regularProperty;
        public Guid RegularProperty
        {
            get => _regularProperty;
            set
            {
                _regularProperty = value;
                RaisePropertyChanged("RegularProperty");
            }
        }
        
        public IList<Guid> GuidList { get; } = new List<Guid>();
        
        public ISet<Guid> GuidSet { get; } = new HashSet<Guid>(RealmSet<Guid>.Comparer);
        
        public IDictionary<string, Guid> GuidDict { get; } = new Dictionary<string, Guid>();
        
        private Guid? _optionalProperty;
        public Guid? OptionalProperty
        {
            get => _optionalProperty;
            set
            {
                _optionalProperty = value;
                RaisePropertyChanged("OptionalProperty");
            }
        }
        
        public IList<Guid?> OptionalList { get; } = new List<Guid?>();
        
        public ISet<Guid?> OptionalSet { get; } = new HashSet<Guid?>(RealmSet<Guid?>.Comparer);
        
        public IDictionary<string, Guid?> OptionalDict { get; } = new Dictionary<string, Guid?>();
        
        private GuidType _linkProperty;
        public GuidType LinkProperty
        {
            get => _linkProperty;
            set
            {
                _linkProperty = value;
                RaisePropertyChanged("LinkProperty");
            }
        }
        
        private RealmValue _mixedProperty;
        public RealmValue MixedProperty
        {
            get => _mixedProperty;
            set
            {
                _mixedProperty = value;
                RaisePropertyChanged("MixedProperty");
            }
        }
        
        public IList<RealmValue> MixedList { get; } = new List<RealmValue>();
        
        public ISet<RealmValue> MixedSet { get; } = new HashSet<RealmValue>(RealmSet<RealmValue>.Comparer);
        
        public IDictionary<string, RealmValue> MixedDict { get; } = new Dictionary<string, RealmValue>();
        
        private EmbeddedGuidType _embeddedProperty;
        public EmbeddedGuidType EmbeddedProperty
        {
            get => _embeddedProperty;
            set
            {
                _embeddedProperty = value;
                RaisePropertyChanged("EmbeddedProperty");
            }
        }
    
        public GuidTypeUnmanagedAccessor(Type objectType) : base(objectType)
        {
        }
    
        public override RealmValue GetValue(string propertyName)
        {
            return propertyName switch
            {
                "_id" => _id,
                "RegularProperty" => _regularProperty,
                "OptionalProperty" => _optionalProperty,
                "LinkProperty" => _linkProperty,
                "MixedProperty" => _mixedProperty,
                "EmbeddedProperty" => _embeddedProperty,
                _ => throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}"),
            };
        }
    
        public override void SetValue(string propertyName, RealmValue val)
        {
            switch (propertyName)
            {
                case "_id":
                    throw new InvalidOperationException("Cannot set the value of a primary key property with SetValue. You need to use SetValueUnique");
                case "RegularProperty":
                    RegularProperty = (Guid)val;
                    return;
                case "OptionalProperty":
                    OptionalProperty = (Guid?)val;
                    return;
                case "LinkProperty":
                    LinkProperty = (GuidType)val;
                    return;
                case "MixedProperty":
                    MixedProperty = (RealmValue)val;
                    return;
                case "EmbeddedProperty":
                    EmbeddedProperty = (EmbeddedGuidType)val;
                    return;
                default:
                    throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
            }
        }
    
        public override void SetValueUnique(string propertyName, RealmValue val)
        {
            if (propertyName != "_id")
            {
                throw new InvalidOperationException($"Cannot set the value of non primary key property ({propertyName}) with SetValueUnique");
            }
            
            Id = (Guid)val;
        }
    
        public override IList<T> GetListValue<T>(string propertyName)
        {
            return propertyName switch
                        {
            "GuidList" => (IList<T>)GuidList,
            "OptionalList" => (IList<T>)OptionalList,
            "MixedList" => (IList<T>)MixedList,
            
                            _ => throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}"),
                        };
        }
    
        public override ISet<T> GetSetValue<T>(string propertyName)
        {
            return propertyName switch
                        {
            "GuidSet" => (ISet<T>)GuidSet,
            "OptionalSet" => (ISet<T>)OptionalSet,
            "MixedSet" => (ISet<T>)MixedSet,
            
                            _ => throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}"),
                        };
        }
    
        public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
        {
            return propertyName switch
            {
                "GuidDict" => (IDictionary<string, TValue>)GuidDict,
                "OptionalDict" => (IDictionary<string, TValue>)OptionalDict,
                "MixedDict" => (IDictionary<string, TValue>)MixedDict,
                _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
            };
        }
    }
}

