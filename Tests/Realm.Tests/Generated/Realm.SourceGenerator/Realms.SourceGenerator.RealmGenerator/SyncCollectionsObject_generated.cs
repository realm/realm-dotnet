// <auto-generated />
#nullable enable

using MongoDB.Bson;
using Realms;
using Realms.Schema;
using Realms.Tests;
using Realms.Tests.Database;
using Realms.Weaving;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TestEmbeddedObject = Realms.IEmbeddedObject;
using TestRealmObject = Realms.IRealmObject;

namespace Realms.Tests
{
    [Generated]
    [Woven(typeof(SyncCollectionsObjectObjectHelper)), Realms.Preserve(AllMembers = true)]
    public partial class SyncCollectionsObject : IRealmObject, INotifyPropertyChanged, IReflectableType
    {
        /// <summary>
        /// Defines the schema for the <see cref="SyncCollectionsObject"/> class.
        /// </summary>
        public static Realms.Schema.ObjectSchema RealmSchema = new Realms.Schema.ObjectSchema.Builder("SyncCollectionsObject", ObjectSchema.ObjectType.RealmObject)
        {
            Realms.Schema.Property.Primitive("_id", Realms.RealmValueType.ObjectId, isPrimaryKey: true, indexType: IndexType.None, isNullable: false, managedName: "Id"),
            Realms.Schema.Property.Primitive("GuidProperty", Realms.RealmValueType.Guid, isPrimaryKey: false, indexType: IndexType.None, isNullable: false, managedName: "GuidProperty"),
            Realms.Schema.Property.PrimitiveList("CharList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharList"),
            Realms.Schema.Property.PrimitiveList("ByteList", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteList"),
            Realms.Schema.Property.PrimitiveList("Int16List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16List"),
            Realms.Schema.Property.PrimitiveList("Int32List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32List"),
            Realms.Schema.Property.PrimitiveList("Int64List", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64List"),
            Realms.Schema.Property.PrimitiveList("FloatList", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "FloatList"),
            Realms.Schema.Property.PrimitiveList("DoubleList", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleList"),
            Realms.Schema.Property.PrimitiveList("BooleanList", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanList"),
            Realms.Schema.Property.PrimitiveList("DecimalList", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalList"),
            Realms.Schema.Property.PrimitiveList("Decimal128List", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128List"),
            Realms.Schema.Property.PrimitiveList("ObjectIdList", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdList"),
            Realms.Schema.Property.PrimitiveList("StringList", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringList"),
            Realms.Schema.Property.PrimitiveList("ByteArrayList", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayList"),
            Realms.Schema.Property.PrimitiveList("DateTimeOffsetList", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetList"),
            Realms.Schema.Property.ObjectList("ObjectList", "IntPropertyObject", managedName: "ObjectList"),
            Realms.Schema.Property.ObjectList("EmbeddedObjectList", "EmbeddedIntPropertyObject", managedName: "EmbeddedObjectList"),
            Realms.Schema.Property.RealmValueList("RealmValueList", managedName: "RealmValueList"),
            Realms.Schema.Property.PrimitiveSet("CharSet", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharSet"),
            Realms.Schema.Property.PrimitiveSet("ByteSet", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteSet"),
            Realms.Schema.Property.PrimitiveSet("Int16Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16Set"),
            Realms.Schema.Property.PrimitiveSet("Int32Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32Set"),
            Realms.Schema.Property.PrimitiveSet("Int64Set", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64Set"),
            Realms.Schema.Property.PrimitiveSet("FloatSet", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "FloatSet"),
            Realms.Schema.Property.PrimitiveSet("DoubleSet", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleSet"),
            Realms.Schema.Property.PrimitiveSet("BooleanSet", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanSet"),
            Realms.Schema.Property.PrimitiveSet("DecimalSet", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalSet"),
            Realms.Schema.Property.PrimitiveSet("Decimal128Set", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128Set"),
            Realms.Schema.Property.PrimitiveSet("ObjectIdSet", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdSet"),
            Realms.Schema.Property.PrimitiveSet("StringSet", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringSet"),
            Realms.Schema.Property.PrimitiveSet("ByteArraySet", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArraySet"),
            Realms.Schema.Property.PrimitiveSet("DateTimeOffsetSet", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetSet"),
            Realms.Schema.Property.ObjectSet("ObjectSet", "IntPropertyObject", managedName: "ObjectSet"),
            Realms.Schema.Property.RealmValueSet("RealmValueSet", managedName: "RealmValueSet"),
            Realms.Schema.Property.PrimitiveDictionary("CharDict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "CharDict"),
            Realms.Schema.Property.PrimitiveDictionary("ByteDict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "ByteDict"),
            Realms.Schema.Property.PrimitiveDictionary("Int16Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int16Dict"),
            Realms.Schema.Property.PrimitiveDictionary("Int32Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int32Dict"),
            Realms.Schema.Property.PrimitiveDictionary("Int64Dict", Realms.RealmValueType.Int, areElementsNullable: false, managedName: "Int64Dict"),
            Realms.Schema.Property.PrimitiveDictionary("FloatDict", Realms.RealmValueType.Float, areElementsNullable: false, managedName: "FloatDict"),
            Realms.Schema.Property.PrimitiveDictionary("DoubleDict", Realms.RealmValueType.Double, areElementsNullable: false, managedName: "DoubleDict"),
            Realms.Schema.Property.PrimitiveDictionary("BooleanDict", Realms.RealmValueType.Bool, areElementsNullable: false, managedName: "BooleanDict"),
            Realms.Schema.Property.PrimitiveDictionary("DecimalDict", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "DecimalDict"),
            Realms.Schema.Property.PrimitiveDictionary("Decimal128Dict", Realms.RealmValueType.Decimal128, areElementsNullable: false, managedName: "Decimal128Dict"),
            Realms.Schema.Property.PrimitiveDictionary("ObjectIdDict", Realms.RealmValueType.ObjectId, areElementsNullable: false, managedName: "ObjectIdDict"),
            Realms.Schema.Property.PrimitiveDictionary("StringDict", Realms.RealmValueType.String, areElementsNullable: false, managedName: "StringDict"),
            Realms.Schema.Property.PrimitiveDictionary("ByteArrayDict", Realms.RealmValueType.Data, areElementsNullable: false, managedName: "ByteArrayDict"),
            Realms.Schema.Property.PrimitiveDictionary("DateTimeOffsetDict", Realms.RealmValueType.Date, areElementsNullable: false, managedName: "DateTimeOffsetDict"),
            Realms.Schema.Property.ObjectDictionary("ObjectDict", "IntPropertyObject", managedName: "ObjectDict"),
            Realms.Schema.Property.ObjectDictionary("EmbeddedObjectDict", "EmbeddedIntPropertyObject", managedName: "EmbeddedObjectDict"),
            Realms.Schema.Property.RealmValueDictionary("RealmValueDict", managedName: "RealmValueDict"),
        }.Build();

        #region IRealmObject implementation

        private ISyncCollectionsObjectAccessor? _accessor;

        Realms.IRealmAccessor Realms.IRealmObjectBase.Accessor => Accessor;

        private ISyncCollectionsObjectAccessor Accessor => _accessor ??= new SyncCollectionsObjectUnmanagedAccessor(typeof(SyncCollectionsObject));

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsManaged => Accessor.IsManaged;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsValid => Accessor.IsValid;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public bool IsFrozen => Accessor.IsFrozen;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Realm? Realm => Accessor.Realm;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.Schema.ObjectSchema ObjectSchema => Accessor.ObjectSchema!;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public Realms.DynamicObjectApi DynamicApi => Accessor.DynamicApi;

        /// <inheritdoc />
        [IgnoreDataMember, XmlIgnore]
        public int BacklinksCount => Accessor.BacklinksCount;

        void ISettableManagedAccessor.SetManagedAccessor(Realms.IRealmAccessor managedAccessor, Realms.Weaving.IRealmObjectHelper? helper, bool update, bool skipDefaults)
        {
            var newAccessor = (ISyncCollectionsObjectAccessor)managedAccessor;
            var oldAccessor = _accessor;
            _accessor = newAccessor;

            if (helper != null && oldAccessor != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharList.Clear();
                    newAccessor.ByteList.Clear();
                    newAccessor.Int16List.Clear();
                    newAccessor.Int32List.Clear();
                    newAccessor.Int64List.Clear();
                    newAccessor.FloatList.Clear();
                    newAccessor.DoubleList.Clear();
                    newAccessor.BooleanList.Clear();
                    newAccessor.DecimalList.Clear();
                    newAccessor.Decimal128List.Clear();
                    newAccessor.ObjectIdList.Clear();
                    newAccessor.StringList.Clear();
                    newAccessor.ByteArrayList.Clear();
                    newAccessor.DateTimeOffsetList.Clear();
                    newAccessor.ObjectList.Clear();
                    newAccessor.EmbeddedObjectList.Clear();
                    newAccessor.RealmValueList.Clear();
                    newAccessor.CharSet.Clear();
                    newAccessor.ByteSet.Clear();
                    newAccessor.Int16Set.Clear();
                    newAccessor.Int32Set.Clear();
                    newAccessor.Int64Set.Clear();
                    newAccessor.FloatSet.Clear();
                    newAccessor.DoubleSet.Clear();
                    newAccessor.BooleanSet.Clear();
                    newAccessor.DecimalSet.Clear();
                    newAccessor.Decimal128Set.Clear();
                    newAccessor.ObjectIdSet.Clear();
                    newAccessor.StringSet.Clear();
                    newAccessor.ByteArraySet.Clear();
                    newAccessor.DateTimeOffsetSet.Clear();
                    newAccessor.ObjectSet.Clear();
                    newAccessor.RealmValueSet.Clear();
                    newAccessor.CharDict.Clear();
                    newAccessor.ByteDict.Clear();
                    newAccessor.Int16Dict.Clear();
                    newAccessor.Int32Dict.Clear();
                    newAccessor.Int64Dict.Clear();
                    newAccessor.FloatDict.Clear();
                    newAccessor.DoubleDict.Clear();
                    newAccessor.BooleanDict.Clear();
                    newAccessor.DecimalDict.Clear();
                    newAccessor.Decimal128Dict.Clear();
                    newAccessor.ObjectIdDict.Clear();
                    newAccessor.StringDict.Clear();
                    newAccessor.ByteArrayDict.Clear();
                    newAccessor.DateTimeOffsetDict.Clear();
                    newAccessor.ObjectDict.Clear();
                    newAccessor.EmbeddedObjectDict.Clear();
                    newAccessor.RealmValueDict.Clear();
                }

                if (!skipDefaults || oldAccessor.Id != default(MongoDB.Bson.ObjectId))
                {
                    newAccessor.Id = oldAccessor.Id;
                }
                if (!skipDefaults || oldAccessor.GuidProperty != default(System.Guid))
                {
                    newAccessor.GuidProperty = oldAccessor.GuidProperty;
                }
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharList, newAccessor.CharList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteList, newAccessor.ByteList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16List, newAccessor.Int16List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32List, newAccessor.Int32List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64List, newAccessor.Int64List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.FloatList, newAccessor.FloatList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleList, newAccessor.DoubleList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanList, newAccessor.BooleanList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalList, newAccessor.DecimalList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128List, newAccessor.Decimal128List, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdList, newAccessor.ObjectIdList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringList, newAccessor.StringList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayList, newAccessor.ByteArrayList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetList, newAccessor.DateTimeOffsetList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectList, newAccessor.ObjectList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.EmbeddedObjectList, newAccessor.EmbeddedObjectList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueList, newAccessor.RealmValueList, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharSet, newAccessor.CharSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteSet, newAccessor.ByteSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16Set, newAccessor.Int16Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32Set, newAccessor.Int32Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64Set, newAccessor.Int64Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.FloatSet, newAccessor.FloatSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleSet, newAccessor.DoubleSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanSet, newAccessor.BooleanSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalSet, newAccessor.DecimalSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128Set, newAccessor.Decimal128Set, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdSet, newAccessor.ObjectIdSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringSet, newAccessor.StringSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArraySet, newAccessor.ByteArraySet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetSet, newAccessor.DateTimeOffsetSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectSet, newAccessor.ObjectSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueSet, newAccessor.RealmValueSet, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.CharDict, newAccessor.CharDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteDict, newAccessor.ByteDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int16Dict, newAccessor.Int16Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int32Dict, newAccessor.Int32Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Int64Dict, newAccessor.Int64Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.FloatDict, newAccessor.FloatDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DoubleDict, newAccessor.DoubleDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.BooleanDict, newAccessor.BooleanDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DecimalDict, newAccessor.DecimalDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.Decimal128Dict, newAccessor.Decimal128Dict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectIdDict, newAccessor.ObjectIdDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.StringDict, newAccessor.StringDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ByteArrayDict, newAccessor.ByteArrayDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.DateTimeOffsetDict, newAccessor.DateTimeOffsetDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.ObjectDict, newAccessor.ObjectDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.EmbeddedObjectDict, newAccessor.EmbeddedObjectDict, update, skipDefaults);
                Realms.CollectionExtensions.PopulateCollection(oldAccessor.RealmValueDict, newAccessor.RealmValueDict, update, skipDefaults);
            }

            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }

            OnManaged();
        }

        #endregion

        /// <summary>
        /// Called when the object has been managed by a Realm.
        /// </summary>
        /// <remarks>
        /// This method will be called either when a managed object is materialized or when an unmanaged object has been
        /// added to the Realm. It can be useful for providing some initialization logic as when the constructor is invoked,
        /// it is not yet clear whether the object is managed or not.
        /// </remarks>
        partial void OnManaged();

        private event PropertyChangedEventHandler? _propertyChanged;

        /// <inheritdoc />
        public event PropertyChangedEventHandler? PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }

                _propertyChanged += value;
            }

            remove
            {
                _propertyChanged -= value;

                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }

        /// <summary>
        /// Called when a property has changed on this class.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        /// <remarks>
        /// For this method to be called, you need to have first subscribed to <see cref="PropertyChanged"/>.
        /// This can be used to react to changes to the current object, e.g. raising <see cref="PropertyChanged"/> for computed properties.
        /// </remarks>
        /// <example>
        /// <code>
        /// class MyClass : IRealmObject
        /// {
        ///     public int StatusCodeRaw { get; set; }
        ///     public StatusCodeEnum StatusCode => (StatusCodeEnum)StatusCodeRaw;
        ///     partial void OnPropertyChanged(string propertyName)
        ///     {
        ///         if (propertyName == nameof(StatusCodeRaw))
        ///         {
        ///             RaisePropertyChanged(nameof(StatusCode));
        ///         }
        ///     }
        /// }
        /// </code>
        /// Here, we have a computed property that depends on a persisted one. In order to notify any <see cref="PropertyChanged"/>
        /// subscribers that <c>StatusCode</c> has changed, we implement <see cref="OnPropertyChanged"/> and
        /// raise <see cref="PropertyChanged"/> manually by calling <see cref="RaisePropertyChanged"/>.
        /// </example>
        partial void OnPropertyChanged(string? propertyName);

        private void RaisePropertyChanged([CallerMemberName] string propertyName = "")
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }

        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }

        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }

        /// <summary>
        /// Converts a <see cref="Realms.RealmValue"/> to <see cref="SyncCollectionsObject"/>. Equivalent to <see cref="Realms.RealmValue.AsNullableRealmObject{T}"/>.
        /// </summary>
        /// <param name="val">The <see cref="Realms.RealmValue"/> to convert.</param>
        /// <returns>The <see cref="SyncCollectionsObject"/> stored in the <see cref="Realms.RealmValue"/>.</returns>
        public static explicit operator SyncCollectionsObject?(Realms.RealmValue val) => val.Type == Realms.RealmValueType.Null ? null : val.AsRealmObject<SyncCollectionsObject>();

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.RealmValue"/> from <see cref="SyncCollectionsObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.RealmValue"/>.</param>
        /// <returns>A <see cref="Realms.RealmValue"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.RealmValue(SyncCollectionsObject? val) => val == null ? Realms.RealmValue.Null : Realms.RealmValue.Object(val);

        /// <summary>
        /// Implicitly constructs a <see cref="Realms.QueryArgument"/> from <see cref="SyncCollectionsObject"/>.
        /// </summary>
        /// <param name="val">The value to store in the <see cref="Realms.QueryArgument"/>.</param>
        /// <returns>A <see cref="Realms.QueryArgument"/> containing the supplied <paramref name="val"/>.</returns>
        public static implicit operator Realms.QueryArgument(SyncCollectionsObject? val) => (Realms.RealmValue)val;

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public TypeInfo GetTypeInfo() => Accessor.GetTypeInfo(this);

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj is InvalidObject)
            {
                return !IsValid;
            }

            if (!(obj is Realms.IRealmObjectBase iro))
            {
                return false;
            }

            return Accessor.Equals(iro.Accessor);
        }

        /// <inheritdoc />
        public override int GetHashCode() => IsManaged ? Accessor.GetHashCode() : base.GetHashCode();

        /// <inheritdoc />
        public override string? ToString() => Accessor.ToString();

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        private class SyncCollectionsObjectObjectHelper : Realms.Weaving.IRealmObjectHelper
        {
            public void CopyToRealm(Realms.IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }

            public Realms.ManagedAccessor CreateAccessor() => new SyncCollectionsObjectManagedAccessor();

            public Realms.IRealmObjectBase CreateInstance() => new SyncCollectionsObject();

            public bool TryGetPrimaryKeyValue(Realms.IRealmObjectBase instance, out RealmValue value)
            {
                value = ((ISyncCollectionsObjectAccessor)instance.Accessor).Id;
                return true;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        internal interface ISyncCollectionsObjectAccessor : Realms.IRealmAccessor
        {
            MongoDB.Bson.ObjectId Id { get; set; }

            System.Guid GuidProperty { get; set; }

            System.Collections.Generic.IList<char> CharList { get; }

            System.Collections.Generic.IList<byte> ByteList { get; }

            System.Collections.Generic.IList<short> Int16List { get; }

            System.Collections.Generic.IList<int> Int32List { get; }

            System.Collections.Generic.IList<long> Int64List { get; }

            System.Collections.Generic.IList<float> FloatList { get; }

            System.Collections.Generic.IList<double> DoubleList { get; }

            System.Collections.Generic.IList<bool> BooleanList { get; }

            System.Collections.Generic.IList<decimal> DecimalList { get; }

            System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; }

            System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; }

            System.Collections.Generic.IList<string> StringList { get; }

            System.Collections.Generic.IList<byte[]> ByteArrayList { get; }

            System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; }

            System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList { get; }

            System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList { get; }

            System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; }

            System.Collections.Generic.ISet<char> CharSet { get; }

            System.Collections.Generic.ISet<byte> ByteSet { get; }

            System.Collections.Generic.ISet<short> Int16Set { get; }

            System.Collections.Generic.ISet<int> Int32Set { get; }

            System.Collections.Generic.ISet<long> Int64Set { get; }

            System.Collections.Generic.ISet<float> FloatSet { get; }

            System.Collections.Generic.ISet<double> DoubleSet { get; }

            System.Collections.Generic.ISet<bool> BooleanSet { get; }

            System.Collections.Generic.ISet<decimal> DecimalSet { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set { get; }

            System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet { get; }

            System.Collections.Generic.ISet<string> StringSet { get; }

            System.Collections.Generic.ISet<byte[]> ByteArraySet { get; }

            System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet { get; }

            System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet { get; }

            System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet { get; }

            System.Collections.Generic.IDictionary<string, char> CharDict { get; }

            System.Collections.Generic.IDictionary<string, byte> ByteDict { get; }

            System.Collections.Generic.IDictionary<string, short> Int16Dict { get; }

            System.Collections.Generic.IDictionary<string, int> Int32Dict { get; }

            System.Collections.Generic.IDictionary<string, long> Int64Dict { get; }

            System.Collections.Generic.IDictionary<string, float> FloatDict { get; }

            System.Collections.Generic.IDictionary<string, double> DoubleDict { get; }

            System.Collections.Generic.IDictionary<string, bool> BooleanDict { get; }

            System.Collections.Generic.IDictionary<string, decimal> DecimalDict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict { get; }

            System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict { get; }

            System.Collections.Generic.IDictionary<string, string> StringDict { get; }

            System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict { get; }

            System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict { get; }

            System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict { get; }

            System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDict { get; }

            System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict { get; }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        internal class SyncCollectionsObjectManagedAccessor : Realms.ManagedAccessor, ISyncCollectionsObjectAccessor
        {
            public MongoDB.Bson.ObjectId Id
            {
                get => (MongoDB.Bson.ObjectId)GetValue("_id");
                set => SetValueUnique("_id", value);
            }

            public System.Guid GuidProperty
            {
                get => (System.Guid)GetValue("GuidProperty");
                set => SetValue("GuidProperty", value);
            }

            private System.Collections.Generic.IList<char> _charList = null!;
            public System.Collections.Generic.IList<char> CharList
            {
                get
                {
                    if (_charList == null)
                    {
                        _charList = GetListValue<char>("CharList");
                    }

                    return _charList;
                }
            }

            private System.Collections.Generic.IList<byte> _byteList = null!;
            public System.Collections.Generic.IList<byte> ByteList
            {
                get
                {
                    if (_byteList == null)
                    {
                        _byteList = GetListValue<byte>("ByteList");
                    }

                    return _byteList;
                }
            }

            private System.Collections.Generic.IList<short> _int16List = null!;
            public System.Collections.Generic.IList<short> Int16List
            {
                get
                {
                    if (_int16List == null)
                    {
                        _int16List = GetListValue<short>("Int16List");
                    }

                    return _int16List;
                }
            }

            private System.Collections.Generic.IList<int> _int32List = null!;
            public System.Collections.Generic.IList<int> Int32List
            {
                get
                {
                    if (_int32List == null)
                    {
                        _int32List = GetListValue<int>("Int32List");
                    }

                    return _int32List;
                }
            }

            private System.Collections.Generic.IList<long> _int64List = null!;
            public System.Collections.Generic.IList<long> Int64List
            {
                get
                {
                    if (_int64List == null)
                    {
                        _int64List = GetListValue<long>("Int64List");
                    }

                    return _int64List;
                }
            }

            private System.Collections.Generic.IList<float> _floatList = null!;
            public System.Collections.Generic.IList<float> FloatList
            {
                get
                {
                    if (_floatList == null)
                    {
                        _floatList = GetListValue<float>("FloatList");
                    }

                    return _floatList;
                }
            }

            private System.Collections.Generic.IList<double> _doubleList = null!;
            public System.Collections.Generic.IList<double> DoubleList
            {
                get
                {
                    if (_doubleList == null)
                    {
                        _doubleList = GetListValue<double>("DoubleList");
                    }

                    return _doubleList;
                }
            }

            private System.Collections.Generic.IList<bool> _booleanList = null!;
            public System.Collections.Generic.IList<bool> BooleanList
            {
                get
                {
                    if (_booleanList == null)
                    {
                        _booleanList = GetListValue<bool>("BooleanList");
                    }

                    return _booleanList;
                }
            }

            private System.Collections.Generic.IList<decimal> _decimalList = null!;
            public System.Collections.Generic.IList<decimal> DecimalList
            {
                get
                {
                    if (_decimalList == null)
                    {
                        _decimalList = GetListValue<decimal>("DecimalList");
                    }

                    return _decimalList;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.Decimal128> _decimal128List = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List
            {
                get
                {
                    if (_decimal128List == null)
                    {
                        _decimal128List = GetListValue<MongoDB.Bson.Decimal128>("Decimal128List");
                    }

                    return _decimal128List;
                }
            }

            private System.Collections.Generic.IList<MongoDB.Bson.ObjectId> _objectIdList = null!;
            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList
            {
                get
                {
                    if (_objectIdList == null)
                    {
                        _objectIdList = GetListValue<MongoDB.Bson.ObjectId>("ObjectIdList");
                    }

                    return _objectIdList;
                }
            }

            private System.Collections.Generic.IList<string> _stringList = null!;
            public System.Collections.Generic.IList<string> StringList
            {
                get
                {
                    if (_stringList == null)
                    {
                        _stringList = GetListValue<string>("StringList");
                    }

                    return _stringList;
                }
            }

            private System.Collections.Generic.IList<byte[]> _byteArrayList = null!;
            public System.Collections.Generic.IList<byte[]> ByteArrayList
            {
                get
                {
                    if (_byteArrayList == null)
                    {
                        _byteArrayList = GetListValue<byte[]>("ByteArrayList");
                    }

                    return _byteArrayList;
                }
            }

            private System.Collections.Generic.IList<System.DateTimeOffset> _dateTimeOffsetList = null!;
            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList
            {
                get
                {
                    if (_dateTimeOffsetList == null)
                    {
                        _dateTimeOffsetList = GetListValue<System.DateTimeOffset>("DateTimeOffsetList");
                    }

                    return _dateTimeOffsetList;
                }
            }

            private System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> _objectList = null!;
            public System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList
            {
                get
                {
                    if (_objectList == null)
                    {
                        _objectList = GetListValue<Realms.Tests.IntPropertyObject>("ObjectList");
                    }

                    return _objectList;
                }
            }

            private System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> _embeddedObjectList = null!;
            public System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList
            {
                get
                {
                    if (_embeddedObjectList == null)
                    {
                        _embeddedObjectList = GetListValue<Realms.Tests.EmbeddedIntPropertyObject>("EmbeddedObjectList");
                    }

                    return _embeddedObjectList;
                }
            }

            private System.Collections.Generic.IList<Realms.RealmValue> _realmValueList = null!;
            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList
            {
                get
                {
                    if (_realmValueList == null)
                    {
                        _realmValueList = GetListValue<Realms.RealmValue>("RealmValueList");
                    }

                    return _realmValueList;
                }
            }

            private System.Collections.Generic.ISet<char> _charSet = null!;
            public System.Collections.Generic.ISet<char> CharSet
            {
                get
                {
                    if (_charSet == null)
                    {
                        _charSet = GetSetValue<char>("CharSet");
                    }

                    return _charSet;
                }
            }

            private System.Collections.Generic.ISet<byte> _byteSet = null!;
            public System.Collections.Generic.ISet<byte> ByteSet
            {
                get
                {
                    if (_byteSet == null)
                    {
                        _byteSet = GetSetValue<byte>("ByteSet");
                    }

                    return _byteSet;
                }
            }

            private System.Collections.Generic.ISet<short> _int16Set = null!;
            public System.Collections.Generic.ISet<short> Int16Set
            {
                get
                {
                    if (_int16Set == null)
                    {
                        _int16Set = GetSetValue<short>("Int16Set");
                    }

                    return _int16Set;
                }
            }

            private System.Collections.Generic.ISet<int> _int32Set = null!;
            public System.Collections.Generic.ISet<int> Int32Set
            {
                get
                {
                    if (_int32Set == null)
                    {
                        _int32Set = GetSetValue<int>("Int32Set");
                    }

                    return _int32Set;
                }
            }

            private System.Collections.Generic.ISet<long> _int64Set = null!;
            public System.Collections.Generic.ISet<long> Int64Set
            {
                get
                {
                    if (_int64Set == null)
                    {
                        _int64Set = GetSetValue<long>("Int64Set");
                    }

                    return _int64Set;
                }
            }

            private System.Collections.Generic.ISet<float> _floatSet = null!;
            public System.Collections.Generic.ISet<float> FloatSet
            {
                get
                {
                    if (_floatSet == null)
                    {
                        _floatSet = GetSetValue<float>("FloatSet");
                    }

                    return _floatSet;
                }
            }

            private System.Collections.Generic.ISet<double> _doubleSet = null!;
            public System.Collections.Generic.ISet<double> DoubleSet
            {
                get
                {
                    if (_doubleSet == null)
                    {
                        _doubleSet = GetSetValue<double>("DoubleSet");
                    }

                    return _doubleSet;
                }
            }

            private System.Collections.Generic.ISet<bool> _booleanSet = null!;
            public System.Collections.Generic.ISet<bool> BooleanSet
            {
                get
                {
                    if (_booleanSet == null)
                    {
                        _booleanSet = GetSetValue<bool>("BooleanSet");
                    }

                    return _booleanSet;
                }
            }

            private System.Collections.Generic.ISet<decimal> _decimalSet = null!;
            public System.Collections.Generic.ISet<decimal> DecimalSet
            {
                get
                {
                    if (_decimalSet == null)
                    {
                        _decimalSet = GetSetValue<decimal>("DecimalSet");
                    }

                    return _decimalSet;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> _decimal128Set = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set
            {
                get
                {
                    if (_decimal128Set == null)
                    {
                        _decimal128Set = GetSetValue<MongoDB.Bson.Decimal128>("Decimal128Set");
                    }

                    return _decimal128Set;
                }
            }

            private System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> _objectIdSet = null!;
            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet
            {
                get
                {
                    if (_objectIdSet == null)
                    {
                        _objectIdSet = GetSetValue<MongoDB.Bson.ObjectId>("ObjectIdSet");
                    }

                    return _objectIdSet;
                }
            }

            private System.Collections.Generic.ISet<string> _stringSet = null!;
            public System.Collections.Generic.ISet<string> StringSet
            {
                get
                {
                    if (_stringSet == null)
                    {
                        _stringSet = GetSetValue<string>("StringSet");
                    }

                    return _stringSet;
                }
            }

            private System.Collections.Generic.ISet<byte[]> _byteArraySet = null!;
            public System.Collections.Generic.ISet<byte[]> ByteArraySet
            {
                get
                {
                    if (_byteArraySet == null)
                    {
                        _byteArraySet = GetSetValue<byte[]>("ByteArraySet");
                    }

                    return _byteArraySet;
                }
            }

            private System.Collections.Generic.ISet<System.DateTimeOffset> _dateTimeOffsetSet = null!;
            public System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet
            {
                get
                {
                    if (_dateTimeOffsetSet == null)
                    {
                        _dateTimeOffsetSet = GetSetValue<System.DateTimeOffset>("DateTimeOffsetSet");
                    }

                    return _dateTimeOffsetSet;
                }
            }

            private System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> _objectSet = null!;
            public System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet
            {
                get
                {
                    if (_objectSet == null)
                    {
                        _objectSet = GetSetValue<Realms.Tests.IntPropertyObject>("ObjectSet");
                    }

                    return _objectSet;
                }
            }

            private System.Collections.Generic.ISet<Realms.RealmValue> _realmValueSet = null!;
            public System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet
            {
                get
                {
                    if (_realmValueSet == null)
                    {
                        _realmValueSet = GetSetValue<Realms.RealmValue>("RealmValueSet");
                    }

                    return _realmValueSet;
                }
            }

            private System.Collections.Generic.IDictionary<string, char> _charDict = null!;
            public System.Collections.Generic.IDictionary<string, char> CharDict
            {
                get
                {
                    if (_charDict == null)
                    {
                        _charDict = GetDictionaryValue<char>("CharDict");
                    }

                    return _charDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte> _byteDict = null!;
            public System.Collections.Generic.IDictionary<string, byte> ByteDict
            {
                get
                {
                    if (_byteDict == null)
                    {
                        _byteDict = GetDictionaryValue<byte>("ByteDict");
                    }

                    return _byteDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, short> _int16Dict = null!;
            public System.Collections.Generic.IDictionary<string, short> Int16Dict
            {
                get
                {
                    if (_int16Dict == null)
                    {
                        _int16Dict = GetDictionaryValue<short>("Int16Dict");
                    }

                    return _int16Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, int> _int32Dict = null!;
            public System.Collections.Generic.IDictionary<string, int> Int32Dict
            {
                get
                {
                    if (_int32Dict == null)
                    {
                        _int32Dict = GetDictionaryValue<int>("Int32Dict");
                    }

                    return _int32Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, long> _int64Dict = null!;
            public System.Collections.Generic.IDictionary<string, long> Int64Dict
            {
                get
                {
                    if (_int64Dict == null)
                    {
                        _int64Dict = GetDictionaryValue<long>("Int64Dict");
                    }

                    return _int64Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, float> _floatDict = null!;
            public System.Collections.Generic.IDictionary<string, float> FloatDict
            {
                get
                {
                    if (_floatDict == null)
                    {
                        _floatDict = GetDictionaryValue<float>("FloatDict");
                    }

                    return _floatDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, double> _doubleDict = null!;
            public System.Collections.Generic.IDictionary<string, double> DoubleDict
            {
                get
                {
                    if (_doubleDict == null)
                    {
                        _doubleDict = GetDictionaryValue<double>("DoubleDict");
                    }

                    return _doubleDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, bool> _booleanDict = null!;
            public System.Collections.Generic.IDictionary<string, bool> BooleanDict
            {
                get
                {
                    if (_booleanDict == null)
                    {
                        _booleanDict = GetDictionaryValue<bool>("BooleanDict");
                    }

                    return _booleanDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, decimal> _decimalDict = null!;
            public System.Collections.Generic.IDictionary<string, decimal> DecimalDict
            {
                get
                {
                    if (_decimalDict == null)
                    {
                        _decimalDict = GetDictionaryValue<decimal>("DecimalDict");
                    }

                    return _decimalDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> _decimal128Dict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict
            {
                get
                {
                    if (_decimal128Dict == null)
                    {
                        _decimal128Dict = GetDictionaryValue<MongoDB.Bson.Decimal128>("Decimal128Dict");
                    }

                    return _decimal128Dict;
                }
            }

            private System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> _objectIdDict = null!;
            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict
            {
                get
                {
                    if (_objectIdDict == null)
                    {
                        _objectIdDict = GetDictionaryValue<MongoDB.Bson.ObjectId>("ObjectIdDict");
                    }

                    return _objectIdDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, string> _stringDict = null!;
            public System.Collections.Generic.IDictionary<string, string> StringDict
            {
                get
                {
                    if (_stringDict == null)
                    {
                        _stringDict = GetDictionaryValue<string>("StringDict");
                    }

                    return _stringDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, byte[]> _byteArrayDict = null!;
            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict
            {
                get
                {
                    if (_byteArrayDict == null)
                    {
                        _byteArrayDict = GetDictionaryValue<byte[]>("ByteArrayDict");
                    }

                    return _byteArrayDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, System.DateTimeOffset> _dateTimeOffsetDict = null!;
            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict
            {
                get
                {
                    if (_dateTimeOffsetDict == null)
                    {
                        _dateTimeOffsetDict = GetDictionaryValue<System.DateTimeOffset>("DateTimeOffsetDict");
                    }

                    return _dateTimeOffsetDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> _objectDict = null!;
            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict
            {
                get
                {
                    if (_objectDict == null)
                    {
                        _objectDict = GetDictionaryValue<Realms.Tests.IntPropertyObject?>("ObjectDict");
                    }

                    return _objectDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> _embeddedObjectDict = null!;
            public System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDict
            {
                get
                {
                    if (_embeddedObjectDict == null)
                    {
                        _embeddedObjectDict = GetDictionaryValue<Realms.Tests.EmbeddedIntPropertyObject?>("EmbeddedObjectDict");
                    }

                    return _embeddedObjectDict;
                }
            }

            private System.Collections.Generic.IDictionary<string, Realms.RealmValue> _realmValueDict = null!;
            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict
            {
                get
                {
                    if (_realmValueDict == null)
                    {
                        _realmValueDict = GetDictionaryValue<Realms.RealmValue>("RealmValueDict");
                    }

                    return _realmValueDict;
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Realms.Preserve(AllMembers = true)]
        internal class SyncCollectionsObjectUnmanagedAccessor : Realms.UnmanagedAccessor, ISyncCollectionsObjectAccessor
        {
            public override ObjectSchema ObjectSchema => SyncCollectionsObject.RealmSchema;

            private MongoDB.Bson.ObjectId _id = ObjectId.GenerateNewId();
            public MongoDB.Bson.ObjectId Id
            {
                get => _id;
                set
                {
                    _id = value;
                    RaisePropertyChanged("Id");
                }
            }

            private System.Guid _guidProperty;
            public System.Guid GuidProperty
            {
                get => _guidProperty;
                set
                {
                    _guidProperty = value;
                    RaisePropertyChanged("GuidProperty");
                }
            }

            public System.Collections.Generic.IList<char> CharList { get; } = new List<char>();

            public System.Collections.Generic.IList<byte> ByteList { get; } = new List<byte>();

            public System.Collections.Generic.IList<short> Int16List { get; } = new List<short>();

            public System.Collections.Generic.IList<int> Int32List { get; } = new List<int>();

            public System.Collections.Generic.IList<long> Int64List { get; } = new List<long>();

            public System.Collections.Generic.IList<float> FloatList { get; } = new List<float>();

            public System.Collections.Generic.IList<double> DoubleList { get; } = new List<double>();

            public System.Collections.Generic.IList<bool> BooleanList { get; } = new List<bool>();

            public System.Collections.Generic.IList<decimal> DecimalList { get; } = new List<decimal>();

            public System.Collections.Generic.IList<MongoDB.Bson.Decimal128> Decimal128List { get; } = new List<MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IList<MongoDB.Bson.ObjectId> ObjectIdList { get; } = new List<MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IList<string> StringList { get; } = new List<string>();

            public System.Collections.Generic.IList<byte[]> ByteArrayList { get; } = new List<byte[]>();

            public System.Collections.Generic.IList<System.DateTimeOffset> DateTimeOffsetList { get; } = new List<System.DateTimeOffset>();

            public System.Collections.Generic.IList<Realms.Tests.IntPropertyObject> ObjectList { get; } = new List<Realms.Tests.IntPropertyObject>();

            public System.Collections.Generic.IList<Realms.Tests.EmbeddedIntPropertyObject> EmbeddedObjectList { get; } = new List<Realms.Tests.EmbeddedIntPropertyObject>();

            public System.Collections.Generic.IList<Realms.RealmValue> RealmValueList { get; } = new List<Realms.RealmValue>();

            public System.Collections.Generic.ISet<char> CharSet { get; } = new HashSet<char>(RealmSet<char>.Comparer);

            public System.Collections.Generic.ISet<byte> ByteSet { get; } = new HashSet<byte>(RealmSet<byte>.Comparer);

            public System.Collections.Generic.ISet<short> Int16Set { get; } = new HashSet<short>(RealmSet<short>.Comparer);

            public System.Collections.Generic.ISet<int> Int32Set { get; } = new HashSet<int>(RealmSet<int>.Comparer);

            public System.Collections.Generic.ISet<long> Int64Set { get; } = new HashSet<long>(RealmSet<long>.Comparer);

            public System.Collections.Generic.ISet<float> FloatSet { get; } = new HashSet<float>(RealmSet<float>.Comparer);

            public System.Collections.Generic.ISet<double> DoubleSet { get; } = new HashSet<double>(RealmSet<double>.Comparer);

            public System.Collections.Generic.ISet<bool> BooleanSet { get; } = new HashSet<bool>(RealmSet<bool>.Comparer);

            public System.Collections.Generic.ISet<decimal> DecimalSet { get; } = new HashSet<decimal>(RealmSet<decimal>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.Decimal128> Decimal128Set { get; } = new HashSet<MongoDB.Bson.Decimal128>(RealmSet<MongoDB.Bson.Decimal128>.Comparer);

            public System.Collections.Generic.ISet<MongoDB.Bson.ObjectId> ObjectIdSet { get; } = new HashSet<MongoDB.Bson.ObjectId>(RealmSet<MongoDB.Bson.ObjectId>.Comparer);

            public System.Collections.Generic.ISet<string> StringSet { get; } = new HashSet<string>(RealmSet<string>.Comparer);

            public System.Collections.Generic.ISet<byte[]> ByteArraySet { get; } = new HashSet<byte[]>(RealmSet<byte[]>.Comparer);

            public System.Collections.Generic.ISet<System.DateTimeOffset> DateTimeOffsetSet { get; } = new HashSet<System.DateTimeOffset>(RealmSet<System.DateTimeOffset>.Comparer);

            public System.Collections.Generic.ISet<Realms.Tests.IntPropertyObject> ObjectSet { get; } = new HashSet<Realms.Tests.IntPropertyObject>(RealmSet<Realms.Tests.IntPropertyObject>.Comparer);

            public System.Collections.Generic.ISet<Realms.RealmValue> RealmValueSet { get; } = new HashSet<Realms.RealmValue>(RealmSet<Realms.RealmValue>.Comparer);

            public System.Collections.Generic.IDictionary<string, char> CharDict { get; } = new Dictionary<string, char>();

            public System.Collections.Generic.IDictionary<string, byte> ByteDict { get; } = new Dictionary<string, byte>();

            public System.Collections.Generic.IDictionary<string, short> Int16Dict { get; } = new Dictionary<string, short>();

            public System.Collections.Generic.IDictionary<string, int> Int32Dict { get; } = new Dictionary<string, int>();

            public System.Collections.Generic.IDictionary<string, long> Int64Dict { get; } = new Dictionary<string, long>();

            public System.Collections.Generic.IDictionary<string, float> FloatDict { get; } = new Dictionary<string, float>();

            public System.Collections.Generic.IDictionary<string, double> DoubleDict { get; } = new Dictionary<string, double>();

            public System.Collections.Generic.IDictionary<string, bool> BooleanDict { get; } = new Dictionary<string, bool>();

            public System.Collections.Generic.IDictionary<string, decimal> DecimalDict { get; } = new Dictionary<string, decimal>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.Decimal128> Decimal128Dict { get; } = new Dictionary<string, MongoDB.Bson.Decimal128>();

            public System.Collections.Generic.IDictionary<string, MongoDB.Bson.ObjectId> ObjectIdDict { get; } = new Dictionary<string, MongoDB.Bson.ObjectId>();

            public System.Collections.Generic.IDictionary<string, string> StringDict { get; } = new Dictionary<string, string>();

            public System.Collections.Generic.IDictionary<string, byte[]> ByteArrayDict { get; } = new Dictionary<string, byte[]>();

            public System.Collections.Generic.IDictionary<string, System.DateTimeOffset> DateTimeOffsetDict { get; } = new Dictionary<string, System.DateTimeOffset>();

            public System.Collections.Generic.IDictionary<string, Realms.Tests.IntPropertyObject?> ObjectDict { get; } = new Dictionary<string, Realms.Tests.IntPropertyObject?>();

            public System.Collections.Generic.IDictionary<string, Realms.Tests.EmbeddedIntPropertyObject?> EmbeddedObjectDict { get; } = new Dictionary<string, Realms.Tests.EmbeddedIntPropertyObject?>();

            public System.Collections.Generic.IDictionary<string, Realms.RealmValue> RealmValueDict { get; } = new Dictionary<string, Realms.RealmValue>();

            public SyncCollectionsObjectUnmanagedAccessor(Type objectType) : base(objectType)
            {
            }

            public override Realms.RealmValue GetValue(string propertyName)
            {
                return propertyName switch
                {
                    "_id" => _id,
                    "GuidProperty" => _guidProperty,
                    _ => throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}"),
                };
            }

            public override void SetValue(string propertyName, Realms.RealmValue val)
            {
                switch (propertyName)
                {
                    case "_id":
                        throw new InvalidOperationException("Cannot set the value of a primary key property with SetValue. You need to use SetValueUnique");
                    case "GuidProperty":
                        GuidProperty = (System.Guid)val;
                        return;
                    default:
                        throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
                }
            }

            public override void SetValueUnique(string propertyName, Realms.RealmValue val)
            {
                if (propertyName != "_id")
                {
                    throw new InvalidOperationException($"Cannot set the value of non primary key property ({propertyName}) with SetValueUnique");
                }

                Id = (MongoDB.Bson.ObjectId)val;
            }

            public override IList<T> GetListValue<T>(string propertyName)
            {
                return propertyName switch
                {
                    "CharList" => (IList<T>)CharList,
                    "ByteList" => (IList<T>)ByteList,
                    "Int16List" => (IList<T>)Int16List,
                    "Int32List" => (IList<T>)Int32List,
                    "Int64List" => (IList<T>)Int64List,
                    "FloatList" => (IList<T>)FloatList,
                    "DoubleList" => (IList<T>)DoubleList,
                    "BooleanList" => (IList<T>)BooleanList,
                    "DecimalList" => (IList<T>)DecimalList,
                    "Decimal128List" => (IList<T>)Decimal128List,
                    "ObjectIdList" => (IList<T>)ObjectIdList,
                    "StringList" => (IList<T>)StringList,
                    "ByteArrayList" => (IList<T>)ByteArrayList,
                    "DateTimeOffsetList" => (IList<T>)DateTimeOffsetList,
                    "ObjectList" => (IList<T>)ObjectList,
                    "EmbeddedObjectList" => (IList<T>)EmbeddedObjectList,
                    "RealmValueList" => (IList<T>)RealmValueList,
                    _ => throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}"),
                };
            }

            public override ISet<T> GetSetValue<T>(string propertyName)
            {
                return propertyName switch
                {
                    "CharSet" => (ISet<T>)CharSet,
                    "ByteSet" => (ISet<T>)ByteSet,
                    "Int16Set" => (ISet<T>)Int16Set,
                    "Int32Set" => (ISet<T>)Int32Set,
                    "Int64Set" => (ISet<T>)Int64Set,
                    "FloatSet" => (ISet<T>)FloatSet,
                    "DoubleSet" => (ISet<T>)DoubleSet,
                    "BooleanSet" => (ISet<T>)BooleanSet,
                    "DecimalSet" => (ISet<T>)DecimalSet,
                    "Decimal128Set" => (ISet<T>)Decimal128Set,
                    "ObjectIdSet" => (ISet<T>)ObjectIdSet,
                    "StringSet" => (ISet<T>)StringSet,
                    "ByteArraySet" => (ISet<T>)ByteArraySet,
                    "DateTimeOffsetSet" => (ISet<T>)DateTimeOffsetSet,
                    "ObjectSet" => (ISet<T>)ObjectSet,
                    "RealmValueSet" => (ISet<T>)RealmValueSet,
                    _ => throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}"),
                };
            }

            public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
            {
                return propertyName switch
                {
                    "CharDict" => (IDictionary<string, TValue>)CharDict,
                    "ByteDict" => (IDictionary<string, TValue>)ByteDict,
                    "Int16Dict" => (IDictionary<string, TValue>)Int16Dict,
                    "Int32Dict" => (IDictionary<string, TValue>)Int32Dict,
                    "Int64Dict" => (IDictionary<string, TValue>)Int64Dict,
                    "FloatDict" => (IDictionary<string, TValue>)FloatDict,
                    "DoubleDict" => (IDictionary<string, TValue>)DoubleDict,
                    "BooleanDict" => (IDictionary<string, TValue>)BooleanDict,
                    "DecimalDict" => (IDictionary<string, TValue>)DecimalDict,
                    "Decimal128Dict" => (IDictionary<string, TValue>)Decimal128Dict,
                    "ObjectIdDict" => (IDictionary<string, TValue>)ObjectIdDict,
                    "StringDict" => (IDictionary<string, TValue>)StringDict,
                    "ByteArrayDict" => (IDictionary<string, TValue>)ByteArrayDict,
                    "DateTimeOffsetDict" => (IDictionary<string, TValue>)DateTimeOffsetDict,
                    "ObjectDict" => (IDictionary<string, TValue>)ObjectDict,
                    "EmbeddedObjectDict" => (IDictionary<string, TValue>)EmbeddedObjectDict,
                    "RealmValueDict" => (IDictionary<string, TValue>)RealmValueDict,
                    _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
                };
            }
        }
    }
}
