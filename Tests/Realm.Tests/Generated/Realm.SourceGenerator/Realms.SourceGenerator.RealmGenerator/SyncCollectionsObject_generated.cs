// <auto-generated />
using Realms.Tests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using Realms;
using Realms.Weaving;
using Realms.Generated;
using Realms.Schema;
using MongoDB.Bson;

namespace Realms.Tests
{
    [Generated("ISyncCollectionsObjectAccessor")]
    [Woven(typeof(SyncCollectionsObjectObjectHelper))]
    public partial class SyncCollectionsObject : IRealmObject, INotifyPropertyChanged
    {
        public static ObjectSchema RealmSchema = new ObjectSchema.Builder("SyncCollectionsObject", isEmbedded: false)
        {
            Property.Primitive("_id", RealmValueType.ObjectId, isPrimaryKey: true, isIndexed: false, isNullable: false),
            Property.Primitive("GuidProperty", RealmValueType.Guid, isPrimaryKey: false, isIndexed: false, isNullable: false),
            Property.PrimitiveList("CharList", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveList("ByteList", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveList("Int16List", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveList("Int32List", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveList("Int64List", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveList("FloatList", RealmValueType.Float, areElementsNullable: false),
            Property.PrimitiveList("DoubleList", RealmValueType.Double, areElementsNullable: false),
            Property.PrimitiveList("BooleanList", RealmValueType.Bool, areElementsNullable: false),
            Property.PrimitiveList("DecimalList", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveList("Decimal128List", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveList("ObjectIdList", RealmValueType.ObjectId, areElementsNullable: false),
            Property.PrimitiveList("StringList", RealmValueType.String, areElementsNullable: true),
            Property.PrimitiveList("ByteArrayList", RealmValueType.Data, areElementsNullable: true),
            Property.PrimitiveList("DateTimeOffsetList", RealmValueType.Date, areElementsNullable: false),
            Property.ObjectList("ObjectList", "IntPropertyObject"),
            Property.ObjectList("EmbeddedObjectList", "EmbeddedIntPropertyObject"),
            Property.RealmValueList("RealmValueList"),
            Property.PrimitiveSet("CharSet", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveSet("ByteSet", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveSet("Int16Set", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveSet("Int32Set", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveSet("Int64Set", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveSet("FloatSet", RealmValueType.Float, areElementsNullable: false),
            Property.PrimitiveSet("DoubleSet", RealmValueType.Double, areElementsNullable: false),
            Property.PrimitiveSet("BooleanSet", RealmValueType.Bool, areElementsNullable: false),
            Property.PrimitiveSet("DecimalSet", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveSet("Decimal128Set", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveSet("ObjectIdSet", RealmValueType.ObjectId, areElementsNullable: false),
            Property.PrimitiveSet("StringSet", RealmValueType.String, areElementsNullable: true),
            Property.PrimitiveSet("ByteArraySet", RealmValueType.Data, areElementsNullable: true),
            Property.PrimitiveSet("DateTimeOffsetSet", RealmValueType.Date, areElementsNullable: false),
            Property.ObjectSet("ObjectSet", "IntPropertyObject"),
            Property.RealmValueSet("RealmValueSet"),
            Property.PrimitiveDictionary("CharDict", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("ByteDict", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int16Dict", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int32Dict", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("Int64Dict", RealmValueType.Int, areElementsNullable: false),
            Property.PrimitiveDictionary("FloatDict", RealmValueType.Float, areElementsNullable: false),
            Property.PrimitiveDictionary("DoubleDict", RealmValueType.Double, areElementsNullable: false),
            Property.PrimitiveDictionary("BooleanDict", RealmValueType.Bool, areElementsNullable: false),
            Property.PrimitiveDictionary("DecimalDict", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveDictionary("Decimal128Dict", RealmValueType.Decimal128, areElementsNullable: false),
            Property.PrimitiveDictionary("ObjectIdDict", RealmValueType.ObjectId, areElementsNullable: false),
            Property.PrimitiveDictionary("StringDict", RealmValueType.String, areElementsNullable: true),
            Property.PrimitiveDictionary("ByteArrayDict", RealmValueType.Data, areElementsNullable: true),
            Property.PrimitiveDictionary("DateTimeOffsetDict", RealmValueType.Date, areElementsNullable: false),
            Property.ObjectDictionary("ObjectDict", "IntPropertyObject"),
            Property.ObjectDictionary("EmbeddedObjectDict", "EmbeddedIntPropertyObject"),
            Property.RealmValueDictionary("RealmValueDict"),
        }.Build();
        
        #region IRealmObject implementation
        
        private ISyncCollectionsObjectAccessor _accessor;
        
        IRealmAccessor IRealmObjectBase.Accessor => Accessor;
        
        internal ISyncCollectionsObjectAccessor Accessor => _accessor = _accessor ?? new SyncCollectionsObjectUnmanagedAccessor(typeof(SyncCollectionsObject));
        
        public bool IsManaged => Accessor.IsManaged;
        
        public bool IsValid => Accessor.IsValid;
        
        public bool IsFrozen => Accessor.IsFrozen;
        
        public Realm Realm => Accessor.Realm;
        
        public ObjectSchema ObjectSchema => Accessor.ObjectSchema;
        
        public RealmObjectBase.Dynamic DynamicApi => Accessor.DynamicApi;
        
        public int BacklinksCount => Accessor.BacklinksCount;
        
        
        
        public void SetManagedAccessor(IRealmAccessor managedAccessor, IRealmObjectHelper helper = null, bool update = false, bool skipDefaults = false)
        {
            var newAccessor = (ISyncCollectionsObjectAccessor)managedAccessor;
            var oldAccessor = _accessor as ISyncCollectionsObjectAccessor;
            _accessor = newAccessor;
        
            if (helper != null)
            {
                if (!skipDefaults)
                {
                    newAccessor.CharList.Clear();
                    newAccessor.ByteList.Clear();
                    newAccessor.Int16List.Clear();
                    newAccessor.Int32List.Clear();
                    newAccessor.Int64List.Clear();
                    newAccessor.FloatList.Clear();
                    newAccessor.DoubleList.Clear();
                    newAccessor.BooleanList.Clear();
                    newAccessor.DecimalList.Clear();
                    newAccessor.Decimal128List.Clear();
                    newAccessor.ObjectIdList.Clear();
                    newAccessor.StringList.Clear();
                    newAccessor.ByteArrayList.Clear();
                    newAccessor.DateTimeOffsetList.Clear();
                    newAccessor.ObjectList.Clear();
                    newAccessor.EmbeddedObjectList.Clear();
                    newAccessor.RealmValueList.Clear();
                    newAccessor.CharSet.Clear();
                    newAccessor.ByteSet.Clear();
                    newAccessor.Int16Set.Clear();
                    newAccessor.Int32Set.Clear();
                    newAccessor.Int64Set.Clear();
                    newAccessor.FloatSet.Clear();
                    newAccessor.DoubleSet.Clear();
                    newAccessor.BooleanSet.Clear();
                    newAccessor.DecimalSet.Clear();
                    newAccessor.Decimal128Set.Clear();
                    newAccessor.ObjectIdSet.Clear();
                    newAccessor.StringSet.Clear();
                    newAccessor.ByteArraySet.Clear();
                    newAccessor.DateTimeOffsetSet.Clear();
                    newAccessor.ObjectSet.Clear();
                    newAccessor.RealmValueSet.Clear();
                    newAccessor.CharDict.Clear();
                    newAccessor.ByteDict.Clear();
                    newAccessor.Int16Dict.Clear();
                    newAccessor.Int32Dict.Clear();
                    newAccessor.Int64Dict.Clear();
                    newAccessor.FloatDict.Clear();
                    newAccessor.DoubleDict.Clear();
                    newAccessor.BooleanDict.Clear();
                    newAccessor.DecimalDict.Clear();
                    newAccessor.Decimal128Dict.Clear();
                    newAccessor.ObjectIdDict.Clear();
                    newAccessor.StringDict.Clear();
                    newAccessor.ByteArrayDict.Clear();
                    newAccessor.DateTimeOffsetDict.Clear();
                    newAccessor.ObjectDict.Clear();
                    newAccessor.EmbeddedObjectDict.Clear();
                    newAccessor.RealmValueDict.Clear();
                }
                
                newAccessor.Id = oldAccessor.Id;
                newAccessor.GuidProperty = oldAccessor.GuidProperty;
                foreach(var val in oldAccessor.CharList)
                {
                    
                    newAccessor.CharList.Add(val);
                }
                foreach(var val in oldAccessor.ByteList)
                {
                    
                    newAccessor.ByteList.Add(val);
                }
                foreach(var val in oldAccessor.Int16List)
                {
                    
                    newAccessor.Int16List.Add(val);
                }
                foreach(var val in oldAccessor.Int32List)
                {
                    
                    newAccessor.Int32List.Add(val);
                }
                foreach(var val in oldAccessor.Int64List)
                {
                    
                    newAccessor.Int64List.Add(val);
                }
                foreach(var val in oldAccessor.FloatList)
                {
                    
                    newAccessor.FloatList.Add(val);
                }
                foreach(var val in oldAccessor.DoubleList)
                {
                    
                    newAccessor.DoubleList.Add(val);
                }
                foreach(var val in oldAccessor.BooleanList)
                {
                    
                    newAccessor.BooleanList.Add(val);
                }
                foreach(var val in oldAccessor.DecimalList)
                {
                    
                    newAccessor.DecimalList.Add(val);
                }
                foreach(var val in oldAccessor.Decimal128List)
                {
                    
                    newAccessor.Decimal128List.Add(val);
                }
                foreach(var val in oldAccessor.ObjectIdList)
                {
                    
                    newAccessor.ObjectIdList.Add(val);
                }
                foreach(var val in oldAccessor.StringList)
                {
                    
                    newAccessor.StringList.Add(val);
                }
                foreach(var val in oldAccessor.ByteArrayList)
                {
                    
                    newAccessor.ByteArrayList.Add(val);
                }
                foreach(var val in oldAccessor.DateTimeOffsetList)
                {
                    
                    newAccessor.DateTimeOffsetList.Add(val);
                }
                foreach(var val in oldAccessor.ObjectList)
                {
                    newAccessor.Realm.Add(val, update);
                    newAccessor.ObjectList.Add(val);
                }
                foreach(var val in oldAccessor.EmbeddedObjectList)
                {
                    
                    newAccessor.EmbeddedObjectList.Add(val);
                }
                foreach(var val in oldAccessor.RealmValueList)
                {
                    
                    newAccessor.RealmValueList.Add(val);
                }
                foreach(var val in oldAccessor.CharSet)
                {
                    
                    newAccessor.CharSet.Add(val);
                }
                foreach(var val in oldAccessor.ByteSet)
                {
                    
                    newAccessor.ByteSet.Add(val);
                }
                foreach(var val in oldAccessor.Int16Set)
                {
                    
                    newAccessor.Int16Set.Add(val);
                }
                foreach(var val in oldAccessor.Int32Set)
                {
                    
                    newAccessor.Int32Set.Add(val);
                }
                foreach(var val in oldAccessor.Int64Set)
                {
                    
                    newAccessor.Int64Set.Add(val);
                }
                foreach(var val in oldAccessor.FloatSet)
                {
                    
                    newAccessor.FloatSet.Add(val);
                }
                foreach(var val in oldAccessor.DoubleSet)
                {
                    
                    newAccessor.DoubleSet.Add(val);
                }
                foreach(var val in oldAccessor.BooleanSet)
                {
                    
                    newAccessor.BooleanSet.Add(val);
                }
                foreach(var val in oldAccessor.DecimalSet)
                {
                    
                    newAccessor.DecimalSet.Add(val);
                }
                foreach(var val in oldAccessor.Decimal128Set)
                {
                    
                    newAccessor.Decimal128Set.Add(val);
                }
                foreach(var val in oldAccessor.ObjectIdSet)
                {
                    
                    newAccessor.ObjectIdSet.Add(val);
                }
                foreach(var val in oldAccessor.StringSet)
                {
                    
                    newAccessor.StringSet.Add(val);
                }
                foreach(var val in oldAccessor.ByteArraySet)
                {
                    
                    newAccessor.ByteArraySet.Add(val);
                }
                foreach(var val in oldAccessor.DateTimeOffsetSet)
                {
                    
                    newAccessor.DateTimeOffsetSet.Add(val);
                }
                foreach(var val in oldAccessor.ObjectSet)
                {
                    newAccessor.Realm.Add(val, update);
                    newAccessor.ObjectSet.Add(val);
                }
                foreach(var val in oldAccessor.RealmValueSet)
                {
                    
                    newAccessor.RealmValueSet.Add(val);
                }
                foreach(var val in oldAccessor.CharDict)
                {
                    
                    newAccessor.CharDict.Add(val);
                }
                foreach(var val in oldAccessor.ByteDict)
                {
                    
                    newAccessor.ByteDict.Add(val);
                }
                foreach(var val in oldAccessor.Int16Dict)
                {
                    
                    newAccessor.Int16Dict.Add(val);
                }
                foreach(var val in oldAccessor.Int32Dict)
                {
                    
                    newAccessor.Int32Dict.Add(val);
                }
                foreach(var val in oldAccessor.Int64Dict)
                {
                    
                    newAccessor.Int64Dict.Add(val);
                }
                foreach(var val in oldAccessor.FloatDict)
                {
                    
                    newAccessor.FloatDict.Add(val);
                }
                foreach(var val in oldAccessor.DoubleDict)
                {
                    
                    newAccessor.DoubleDict.Add(val);
                }
                foreach(var val in oldAccessor.BooleanDict)
                {
                    
                    newAccessor.BooleanDict.Add(val);
                }
                foreach(var val in oldAccessor.DecimalDict)
                {
                    
                    newAccessor.DecimalDict.Add(val);
                }
                foreach(var val in oldAccessor.Decimal128Dict)
                {
                    
                    newAccessor.Decimal128Dict.Add(val);
                }
                foreach(var val in oldAccessor.ObjectIdDict)
                {
                    
                    newAccessor.ObjectIdDict.Add(val);
                }
                foreach(var val in oldAccessor.StringDict)
                {
                    
                    newAccessor.StringDict.Add(val);
                }
                foreach(var val in oldAccessor.ByteArrayDict)
                {
                    
                    newAccessor.ByteArrayDict.Add(val);
                }
                foreach(var val in oldAccessor.DateTimeOffsetDict)
                {
                    
                    newAccessor.DateTimeOffsetDict.Add(val);
                }
                foreach(var val in oldAccessor.ObjectDict)
                {
                    newAccessor.Realm.Add(val.Value, update);
                    newAccessor.ObjectDict.Add(val);
                }
                foreach(var val in oldAccessor.EmbeddedObjectDict)
                {
                    
                    newAccessor.EmbeddedObjectDict.Add(val);
                }
                foreach(var val in oldAccessor.RealmValueDict)
                {
                    
                    newAccessor.RealmValueDict.Add(val);
                }
            }
        
            if (_propertyChanged != null)
            {
                SubscribeForNotifications();
            }
        
            OnManaged();
        }
        
        #endregion
        
        private event PropertyChangedEventHandler _propertyChanged;
        
        public event PropertyChangedEventHandler PropertyChanged
        {
            add
            {
                if (_propertyChanged == null)
                {
                    SubscribeForNotifications();
                }
        
                _propertyChanged += value;
            }
        
            remove
            {
                _propertyChanged -= value;
        
                if (_propertyChanged == null)
                {
                    UnsubscribeFromNotifications();
                }
            }
        }
        
        partial void OnPropertyChanged(string propertyName);
        
        private void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            _propertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            OnPropertyChanged(propertyName);
        }
        
        partial void OnManaged();
        
        private void SubscribeForNotifications()
        {
            Accessor.SubscribeForNotifications(RaisePropertyChanged);
        }
        
        private void UnsubscribeFromNotifications()
        {
            Accessor.UnsubscribeFromNotifications();
        }
        
        public static explicit operator SyncCollectionsObject(RealmValue val) => val.AsRealmObject<SyncCollectionsObject>();
        
        public static implicit operator RealmValue(SyncCollectionsObject val) => RealmValue.Object(val);
        
        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }
        
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
        
            if (obj is not IRealmObjectBase iro)
            {
                return false;
            }
        
            return Accessor.Equals(iro.Accessor);
        }
        
        public override int GetHashCode()
        {
            return IsManaged ? Accessor.GetHashCode() : base.GetHashCode();
        }
        
        public override string ToString()
        {
            return Accessor.ToString();
        }
    
        [EditorBrowsable(EditorBrowsableState.Never)]
        private class SyncCollectionsObjectObjectHelper : IRealmObjectHelper
        {
            public void CopyToRealm(IRealmObjectBase instance, bool update, bool skipDefaults)
            {
                throw new InvalidOperationException("This method should not be called for source generated classes.");
            }
        
            public ManagedAccessor CreateAccessor() => new SyncCollectionsObjectManagedAccessor();
        
            public IRealmObjectBase CreateInstance()
            {
                return new SyncCollectionsObject();
            }
        
            public bool TryGetPrimaryKeyValue(IRealmObjectBase instance, out object value)
            {
                value = ((ISyncCollectionsObjectAccessor)instance.Accessor).Id;
                return true;
            }
        }
    }
}

namespace Realms.Generated
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal interface ISyncCollectionsObjectAccessor : IRealmAccessor
    {
        ObjectId Id { get; set; }
        
        Guid GuidProperty { get; set; }
        
        IList<char> CharList { get; }
        
        IList<byte> ByteList { get; }
        
        IList<short> Int16List { get; }
        
        IList<int> Int32List { get; }
        
        IList<long> Int64List { get; }
        
        IList<float> FloatList { get; }
        
        IList<double> DoubleList { get; }
        
        IList<bool> BooleanList { get; }
        
        IList<decimal> DecimalList { get; }
        
        IList<Decimal128> Decimal128List { get; }
        
        IList<ObjectId> ObjectIdList { get; }
        
        IList<string> StringList { get; }
        
        IList<byte[]> ByteArrayList { get; }
        
        IList<DateTimeOffset> DateTimeOffsetList { get; }
        
        IList<IntPropertyObject> ObjectList { get; }
        
        IList<EmbeddedIntPropertyObject> EmbeddedObjectList { get; }
        
        IList<RealmValue> RealmValueList { get; }
        
        ISet<char> CharSet { get; }
        
        ISet<byte> ByteSet { get; }
        
        ISet<short> Int16Set { get; }
        
        ISet<int> Int32Set { get; }
        
        ISet<long> Int64Set { get; }
        
        ISet<float> FloatSet { get; }
        
        ISet<double> DoubleSet { get; }
        
        ISet<bool> BooleanSet { get; }
        
        ISet<decimal> DecimalSet { get; }
        
        ISet<Decimal128> Decimal128Set { get; }
        
        ISet<ObjectId> ObjectIdSet { get; }
        
        ISet<string> StringSet { get; }
        
        ISet<byte[]> ByteArraySet { get; }
        
        ISet<DateTimeOffset> DateTimeOffsetSet { get; }
        
        ISet<IntPropertyObject> ObjectSet { get; }
        
        ISet<RealmValue> RealmValueSet { get; }
        
        IDictionary<string, char> CharDict { get; }
        
        IDictionary<string, byte> ByteDict { get; }
        
        IDictionary<string, short> Int16Dict { get; }
        
        IDictionary<string, int> Int32Dict { get; }
        
        IDictionary<string, long> Int64Dict { get; }
        
        IDictionary<string, float> FloatDict { get; }
        
        IDictionary<string, double> DoubleDict { get; }
        
        IDictionary<string, bool> BooleanDict { get; }
        
        IDictionary<string, decimal> DecimalDict { get; }
        
        IDictionary<string, Decimal128> Decimal128Dict { get; }
        
        IDictionary<string, ObjectId> ObjectIdDict { get; }
        
        IDictionary<string, string> StringDict { get; }
        
        IDictionary<string, byte[]> ByteArrayDict { get; }
        
        IDictionary<string, DateTimeOffset> DateTimeOffsetDict { get; }
        
        IDictionary<string, IntPropertyObject> ObjectDict { get; }
        
        IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDict { get; }
        
        IDictionary<string, RealmValue> RealmValueDict { get; }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    internal class SyncCollectionsObjectManagedAccessor : ManagedAccessor, ISyncCollectionsObjectAccessor
    {
        public ObjectId Id
        {
            get => (ObjectId)GetValue("_id");
            set => SetValueUnique("_id", value);
        }
        
        public Guid GuidProperty
        {
            get => (Guid)GetValue("GuidProperty");
            set => SetValue("GuidProperty", value);
        }
        
        private IList<char> _charList;
        public IList<char> CharList
        {
            get
            {
                if (_charList == null)
                {
                    _charList = GetListValue<char>("CharList");
                }
        
                return _charList;
            }
        }
        
        private IList<byte> _byteList;
        public IList<byte> ByteList
        {
            get
            {
                if (_byteList == null)
                {
                    _byteList = GetListValue<byte>("ByteList");
                }
        
                return _byteList;
            }
        }
        
        private IList<short> _int16List;
        public IList<short> Int16List
        {
            get
            {
                if (_int16List == null)
                {
                    _int16List = GetListValue<short>("Int16List");
                }
        
                return _int16List;
            }
        }
        
        private IList<int> _int32List;
        public IList<int> Int32List
        {
            get
            {
                if (_int32List == null)
                {
                    _int32List = GetListValue<int>("Int32List");
                }
        
                return _int32List;
            }
        }
        
        private IList<long> _int64List;
        public IList<long> Int64List
        {
            get
            {
                if (_int64List == null)
                {
                    _int64List = GetListValue<long>("Int64List");
                }
        
                return _int64List;
            }
        }
        
        private IList<float> _floatList;
        public IList<float> FloatList
        {
            get
            {
                if (_floatList == null)
                {
                    _floatList = GetListValue<float>("FloatList");
                }
        
                return _floatList;
            }
        }
        
        private IList<double> _doubleList;
        public IList<double> DoubleList
        {
            get
            {
                if (_doubleList == null)
                {
                    _doubleList = GetListValue<double>("DoubleList");
                }
        
                return _doubleList;
            }
        }
        
        private IList<bool> _booleanList;
        public IList<bool> BooleanList
        {
            get
            {
                if (_booleanList == null)
                {
                    _booleanList = GetListValue<bool>("BooleanList");
                }
        
                return _booleanList;
            }
        }
        
        private IList<decimal> _decimalList;
        public IList<decimal> DecimalList
        {
            get
            {
                if (_decimalList == null)
                {
                    _decimalList = GetListValue<decimal>("DecimalList");
                }
        
                return _decimalList;
            }
        }
        
        private IList<Decimal128> _decimal128List;
        public IList<Decimal128> Decimal128List
        {
            get
            {
                if (_decimal128List == null)
                {
                    _decimal128List = GetListValue<Decimal128>("Decimal128List");
                }
        
                return _decimal128List;
            }
        }
        
        private IList<ObjectId> _objectIdList;
        public IList<ObjectId> ObjectIdList
        {
            get
            {
                if (_objectIdList == null)
                {
                    _objectIdList = GetListValue<ObjectId>("ObjectIdList");
                }
        
                return _objectIdList;
            }
        }
        
        private IList<string> _stringList;
        public IList<string> StringList
        {
            get
            {
                if (_stringList == null)
                {
                    _stringList = GetListValue<string>("StringList");
                }
        
                return _stringList;
            }
        }
        
        private IList<byte[]> _byteArrayList;
        public IList<byte[]> ByteArrayList
        {
            get
            {
                if (_byteArrayList == null)
                {
                    _byteArrayList = GetListValue<byte[]>("ByteArrayList");
                }
        
                return _byteArrayList;
            }
        }
        
        private IList<DateTimeOffset> _dateTimeOffsetList;
        public IList<DateTimeOffset> DateTimeOffsetList
        {
            get
            {
                if (_dateTimeOffsetList == null)
                {
                    _dateTimeOffsetList = GetListValue<DateTimeOffset>("DateTimeOffsetList");
                }
        
                return _dateTimeOffsetList;
            }
        }
        
        private IList<IntPropertyObject> _objectList;
        public IList<IntPropertyObject> ObjectList
        {
            get
            {
                if (_objectList == null)
                {
                    _objectList = GetListValue<IntPropertyObject>("ObjectList");
                }
        
                return _objectList;
            }
        }
        
        private IList<EmbeddedIntPropertyObject> _embeddedObjectList;
        public IList<EmbeddedIntPropertyObject> EmbeddedObjectList
        {
            get
            {
                if (_embeddedObjectList == null)
                {
                    _embeddedObjectList = GetListValue<EmbeddedIntPropertyObject>("EmbeddedObjectList");
                }
        
                return _embeddedObjectList;
            }
        }
        
        private IList<RealmValue> _realmValueList;
        public IList<RealmValue> RealmValueList
        {
            get
            {
                if (_realmValueList == null)
                {
                    _realmValueList = GetListValue<RealmValue>("RealmValueList");
                }
        
                return _realmValueList;
            }
        }
        
        private ISet<char> _charSet;
        public ISet<char> CharSet
        {
            get
            {
                if (_charSet == null)
                {
                    _charSet = GetSetValue<char>("CharSet");
                }
        
                return _charSet;
            }
        }
        
        private ISet<byte> _byteSet;
        public ISet<byte> ByteSet
        {
            get
            {
                if (_byteSet == null)
                {
                    _byteSet = GetSetValue<byte>("ByteSet");
                }
        
                return _byteSet;
            }
        }
        
        private ISet<short> _int16Set;
        public ISet<short> Int16Set
        {
            get
            {
                if (_int16Set == null)
                {
                    _int16Set = GetSetValue<short>("Int16Set");
                }
        
                return _int16Set;
            }
        }
        
        private ISet<int> _int32Set;
        public ISet<int> Int32Set
        {
            get
            {
                if (_int32Set == null)
                {
                    _int32Set = GetSetValue<int>("Int32Set");
                }
        
                return _int32Set;
            }
        }
        
        private ISet<long> _int64Set;
        public ISet<long> Int64Set
        {
            get
            {
                if (_int64Set == null)
                {
                    _int64Set = GetSetValue<long>("Int64Set");
                }
        
                return _int64Set;
            }
        }
        
        private ISet<float> _floatSet;
        public ISet<float> FloatSet
        {
            get
            {
                if (_floatSet == null)
                {
                    _floatSet = GetSetValue<float>("FloatSet");
                }
        
                return _floatSet;
            }
        }
        
        private ISet<double> _doubleSet;
        public ISet<double> DoubleSet
        {
            get
            {
                if (_doubleSet == null)
                {
                    _doubleSet = GetSetValue<double>("DoubleSet");
                }
        
                return _doubleSet;
            }
        }
        
        private ISet<bool> _booleanSet;
        public ISet<bool> BooleanSet
        {
            get
            {
                if (_booleanSet == null)
                {
                    _booleanSet = GetSetValue<bool>("BooleanSet");
                }
        
                return _booleanSet;
            }
        }
        
        private ISet<decimal> _decimalSet;
        public ISet<decimal> DecimalSet
        {
            get
            {
                if (_decimalSet == null)
                {
                    _decimalSet = GetSetValue<decimal>("DecimalSet");
                }
        
                return _decimalSet;
            }
        }
        
        private ISet<Decimal128> _decimal128Set;
        public ISet<Decimal128> Decimal128Set
        {
            get
            {
                if (_decimal128Set == null)
                {
                    _decimal128Set = GetSetValue<Decimal128>("Decimal128Set");
                }
        
                return _decimal128Set;
            }
        }
        
        private ISet<ObjectId> _objectIdSet;
        public ISet<ObjectId> ObjectIdSet
        {
            get
            {
                if (_objectIdSet == null)
                {
                    _objectIdSet = GetSetValue<ObjectId>("ObjectIdSet");
                }
        
                return _objectIdSet;
            }
        }
        
        private ISet<string> _stringSet;
        public ISet<string> StringSet
        {
            get
            {
                if (_stringSet == null)
                {
                    _stringSet = GetSetValue<string>("StringSet");
                }
        
                return _stringSet;
            }
        }
        
        private ISet<byte[]> _byteArraySet;
        public ISet<byte[]> ByteArraySet
        {
            get
            {
                if (_byteArraySet == null)
                {
                    _byteArraySet = GetSetValue<byte[]>("ByteArraySet");
                }
        
                return _byteArraySet;
            }
        }
        
        private ISet<DateTimeOffset> _dateTimeOffsetSet;
        public ISet<DateTimeOffset> DateTimeOffsetSet
        {
            get
            {
                if (_dateTimeOffsetSet == null)
                {
                    _dateTimeOffsetSet = GetSetValue<DateTimeOffset>("DateTimeOffsetSet");
                }
        
                return _dateTimeOffsetSet;
            }
        }
        
        private ISet<IntPropertyObject> _objectSet;
        public ISet<IntPropertyObject> ObjectSet
        {
            get
            {
                if (_objectSet == null)
                {
                    _objectSet = GetSetValue<IntPropertyObject>("ObjectSet");
                }
        
                return _objectSet;
            }
        }
        
        private ISet<RealmValue> _realmValueSet;
        public ISet<RealmValue> RealmValueSet
        {
            get
            {
                if (_realmValueSet == null)
                {
                    _realmValueSet = GetSetValue<RealmValue>("RealmValueSet");
                }
        
                return _realmValueSet;
            }
        }
        
        private IDictionary<string, char> _charDict;
        public IDictionary<string, char> CharDict
        {
            get
            {
                if (_charDict == null)
                {
                    _charDict = GetDictionaryValue<char>("CharDict");
                }
        
                return _charDict;
            }
        }
        
        private IDictionary<string, byte> _byteDict;
        public IDictionary<string, byte> ByteDict
        {
            get
            {
                if (_byteDict == null)
                {
                    _byteDict = GetDictionaryValue<byte>("ByteDict");
                }
        
                return _byteDict;
            }
        }
        
        private IDictionary<string, short> _int16Dict;
        public IDictionary<string, short> Int16Dict
        {
            get
            {
                if (_int16Dict == null)
                {
                    _int16Dict = GetDictionaryValue<short>("Int16Dict");
                }
        
                return _int16Dict;
            }
        }
        
        private IDictionary<string, int> _int32Dict;
        public IDictionary<string, int> Int32Dict
        {
            get
            {
                if (_int32Dict == null)
                {
                    _int32Dict = GetDictionaryValue<int>("Int32Dict");
                }
        
                return _int32Dict;
            }
        }
        
        private IDictionary<string, long> _int64Dict;
        public IDictionary<string, long> Int64Dict
        {
            get
            {
                if (_int64Dict == null)
                {
                    _int64Dict = GetDictionaryValue<long>("Int64Dict");
                }
        
                return _int64Dict;
            }
        }
        
        private IDictionary<string, float> _floatDict;
        public IDictionary<string, float> FloatDict
        {
            get
            {
                if (_floatDict == null)
                {
                    _floatDict = GetDictionaryValue<float>("FloatDict");
                }
        
                return _floatDict;
            }
        }
        
        private IDictionary<string, double> _doubleDict;
        public IDictionary<string, double> DoubleDict
        {
            get
            {
                if (_doubleDict == null)
                {
                    _doubleDict = GetDictionaryValue<double>("DoubleDict");
                }
        
                return _doubleDict;
            }
        }
        
        private IDictionary<string, bool> _booleanDict;
        public IDictionary<string, bool> BooleanDict
        {
            get
            {
                if (_booleanDict == null)
                {
                    _booleanDict = GetDictionaryValue<bool>("BooleanDict");
                }
        
                return _booleanDict;
            }
        }
        
        private IDictionary<string, decimal> _decimalDict;
        public IDictionary<string, decimal> DecimalDict
        {
            get
            {
                if (_decimalDict == null)
                {
                    _decimalDict = GetDictionaryValue<decimal>("DecimalDict");
                }
        
                return _decimalDict;
            }
        }
        
        private IDictionary<string, Decimal128> _decimal128Dict;
        public IDictionary<string, Decimal128> Decimal128Dict
        {
            get
            {
                if (_decimal128Dict == null)
                {
                    _decimal128Dict = GetDictionaryValue<Decimal128>("Decimal128Dict");
                }
        
                return _decimal128Dict;
            }
        }
        
        private IDictionary<string, ObjectId> _objectIdDict;
        public IDictionary<string, ObjectId> ObjectIdDict
        {
            get
            {
                if (_objectIdDict == null)
                {
                    _objectIdDict = GetDictionaryValue<ObjectId>("ObjectIdDict");
                }
        
                return _objectIdDict;
            }
        }
        
        private IDictionary<string, string> _stringDict;
        public IDictionary<string, string> StringDict
        {
            get
            {
                if (_stringDict == null)
                {
                    _stringDict = GetDictionaryValue<string>("StringDict");
                }
        
                return _stringDict;
            }
        }
        
        private IDictionary<string, byte[]> _byteArrayDict;
        public IDictionary<string, byte[]> ByteArrayDict
        {
            get
            {
                if (_byteArrayDict == null)
                {
                    _byteArrayDict = GetDictionaryValue<byte[]>("ByteArrayDict");
                }
        
                return _byteArrayDict;
            }
        }
        
        private IDictionary<string, DateTimeOffset> _dateTimeOffsetDict;
        public IDictionary<string, DateTimeOffset> DateTimeOffsetDict
        {
            get
            {
                if (_dateTimeOffsetDict == null)
                {
                    _dateTimeOffsetDict = GetDictionaryValue<DateTimeOffset>("DateTimeOffsetDict");
                }
        
                return _dateTimeOffsetDict;
            }
        }
        
        private IDictionary<string, IntPropertyObject> _objectDict;
        public IDictionary<string, IntPropertyObject> ObjectDict
        {
            get
            {
                if (_objectDict == null)
                {
                    _objectDict = GetDictionaryValue<IntPropertyObject>("ObjectDict");
                }
        
                return _objectDict;
            }
        }
        
        private IDictionary<string, EmbeddedIntPropertyObject> _embeddedObjectDict;
        public IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDict
        {
            get
            {
                if (_embeddedObjectDict == null)
                {
                    _embeddedObjectDict = GetDictionaryValue<EmbeddedIntPropertyObject>("EmbeddedObjectDict");
                }
        
                return _embeddedObjectDict;
            }
        }
        
        private IDictionary<string, RealmValue> _realmValueDict;
        public IDictionary<string, RealmValue> RealmValueDict
        {
            get
            {
                if (_realmValueDict == null)
                {
                    _realmValueDict = GetDictionaryValue<RealmValue>("RealmValueDict");
                }
        
                return _realmValueDict;
            }
        }
    }

    internal class SyncCollectionsObjectUnmanagedAccessor : UnmanagedAccessor, ISyncCollectionsObjectAccessor
    {
        private ObjectId _id = ObjectId.GenerateNewId();
        public ObjectId Id
        {
            get => _id;
            set
            {
                _id = value;
                RaisePropertyChanged("_id");
            }
        }
        
        private Guid _guidProperty;
        public Guid GuidProperty
        {
            get => _guidProperty;
            set
            {
                _guidProperty = value;
                RaisePropertyChanged("GuidProperty");
            }
        }
        
        public IList<char> CharList { get; } = new List<char>();
        
        public IList<byte> ByteList { get; } = new List<byte>();
        
        public IList<short> Int16List { get; } = new List<short>();
        
        public IList<int> Int32List { get; } = new List<int>();
        
        public IList<long> Int64List { get; } = new List<long>();
        
        public IList<float> FloatList { get; } = new List<float>();
        
        public IList<double> DoubleList { get; } = new List<double>();
        
        public IList<bool> BooleanList { get; } = new List<bool>();
        
        public IList<decimal> DecimalList { get; } = new List<decimal>();
        
        public IList<Decimal128> Decimal128List { get; } = new List<Decimal128>();
        
        public IList<ObjectId> ObjectIdList { get; } = new List<ObjectId>();
        
        public IList<string> StringList { get; } = new List<string>();
        
        public IList<byte[]> ByteArrayList { get; } = new List<byte[]>();
        
        public IList<DateTimeOffset> DateTimeOffsetList { get; } = new List<DateTimeOffset>();
        
        public IList<IntPropertyObject> ObjectList { get; } = new List<IntPropertyObject>();
        
        public IList<EmbeddedIntPropertyObject> EmbeddedObjectList { get; } = new List<EmbeddedIntPropertyObject>();
        
        public IList<RealmValue> RealmValueList { get; } = new List<RealmValue>();
        
        public ISet<char> CharSet { get; } = new HashSet<char>(RealmSet<char>.Comparer);
        
        public ISet<byte> ByteSet { get; } = new HashSet<byte>(RealmSet<byte>.Comparer);
        
        public ISet<short> Int16Set { get; } = new HashSet<short>(RealmSet<short>.Comparer);
        
        public ISet<int> Int32Set { get; } = new HashSet<int>(RealmSet<int>.Comparer);
        
        public ISet<long> Int64Set { get; } = new HashSet<long>(RealmSet<long>.Comparer);
        
        public ISet<float> FloatSet { get; } = new HashSet<float>(RealmSet<float>.Comparer);
        
        public ISet<double> DoubleSet { get; } = new HashSet<double>(RealmSet<double>.Comparer);
        
        public ISet<bool> BooleanSet { get; } = new HashSet<bool>(RealmSet<bool>.Comparer);
        
        public ISet<decimal> DecimalSet { get; } = new HashSet<decimal>(RealmSet<decimal>.Comparer);
        
        public ISet<Decimal128> Decimal128Set { get; } = new HashSet<Decimal128>(RealmSet<Decimal128>.Comparer);
        
        public ISet<ObjectId> ObjectIdSet { get; } = new HashSet<ObjectId>(RealmSet<ObjectId>.Comparer);
        
        public ISet<string> StringSet { get; } = new HashSet<string>(RealmSet<string>.Comparer);
        
        public ISet<byte[]> ByteArraySet { get; } = new HashSet<byte[]>(RealmSet<byte[]>.Comparer);
        
        public ISet<DateTimeOffset> DateTimeOffsetSet { get; } = new HashSet<DateTimeOffset>(RealmSet<DateTimeOffset>.Comparer);
        
        public ISet<IntPropertyObject> ObjectSet { get; } = new HashSet<IntPropertyObject>(RealmSet<IntPropertyObject>.Comparer);
        
        public ISet<RealmValue> RealmValueSet { get; } = new HashSet<RealmValue>(RealmSet<RealmValue>.Comparer);
        
        public IDictionary<string, char> CharDict { get; } = new Dictionary<string, char>();
        
        public IDictionary<string, byte> ByteDict { get; } = new Dictionary<string, byte>();
        
        public IDictionary<string, short> Int16Dict { get; } = new Dictionary<string, short>();
        
        public IDictionary<string, int> Int32Dict { get; } = new Dictionary<string, int>();
        
        public IDictionary<string, long> Int64Dict { get; } = new Dictionary<string, long>();
        
        public IDictionary<string, float> FloatDict { get; } = new Dictionary<string, float>();
        
        public IDictionary<string, double> DoubleDict { get; } = new Dictionary<string, double>();
        
        public IDictionary<string, bool> BooleanDict { get; } = new Dictionary<string, bool>();
        
        public IDictionary<string, decimal> DecimalDict { get; } = new Dictionary<string, decimal>();
        
        public IDictionary<string, Decimal128> Decimal128Dict { get; } = new Dictionary<string, Decimal128>();
        
        public IDictionary<string, ObjectId> ObjectIdDict { get; } = new Dictionary<string, ObjectId>();
        
        public IDictionary<string, string> StringDict { get; } = new Dictionary<string, string>();
        
        public IDictionary<string, byte[]> ByteArrayDict { get; } = new Dictionary<string, byte[]>();
        
        public IDictionary<string, DateTimeOffset> DateTimeOffsetDict { get; } = new Dictionary<string, DateTimeOffset>();
        
        public IDictionary<string, IntPropertyObject> ObjectDict { get; } = new Dictionary<string, IntPropertyObject>();
        
        public IDictionary<string, EmbeddedIntPropertyObject> EmbeddedObjectDict { get; } = new Dictionary<string, EmbeddedIntPropertyObject>();
        
        public IDictionary<string, RealmValue> RealmValueDict { get; } = new Dictionary<string, RealmValue>();
    
        public SyncCollectionsObjectUnmanagedAccessor(Type objectType) : base(objectType)
        {
        }
    
        public override RealmValue GetValue(string propertyName)
        {
            return propertyName switch
            {
                "_id" => _id,
                "GuidProperty" => _guidProperty,
                _ => throw new MissingMemberException($"The object does not have a gettable Realm property with name {propertyName}"),
            };
        }
    
        public override void SetValue(string propertyName, RealmValue val)
        {
            switch (propertyName)
            {
                case "_id":
                    throw new InvalidOperationException("Cannot set the value of a primary key property with SetValue. You need to use SetValueUnique");
                case "GuidProperty":
                    GuidProperty = (Guid)val;
                    return;
                default:
                    throw new MissingMemberException($"The object does not have a settable Realm property with name {propertyName}");
            }
        }
    
        public override void SetValueUnique(string propertyName, RealmValue val)
        {
            if (propertyName != "_id")
            {
                throw new InvalidOperationException($"Cannot set the value of non primary key property ({propertyName}) with SetValueUnique");
            }
            
            Id = (ObjectId)val;
        }
    
        public override IList<T> GetListValue<T>(string propertyName)
        {
            return propertyName switch
                        {
            "CharList" => (IList<T>)CharList,
            "ByteList" => (IList<T>)ByteList,
            "Int16List" => (IList<T>)Int16List,
            "Int32List" => (IList<T>)Int32List,
            "Int64List" => (IList<T>)Int64List,
            "FloatList" => (IList<T>)FloatList,
            "DoubleList" => (IList<T>)DoubleList,
            "BooleanList" => (IList<T>)BooleanList,
            "DecimalList" => (IList<T>)DecimalList,
            "Decimal128List" => (IList<T>)Decimal128List,
            "ObjectIdList" => (IList<T>)ObjectIdList,
            "StringList" => (IList<T>)StringList,
            "ByteArrayList" => (IList<T>)ByteArrayList,
            "DateTimeOffsetList" => (IList<T>)DateTimeOffsetList,
            "ObjectList" => (IList<T>)ObjectList,
            "EmbeddedObjectList" => (IList<T>)EmbeddedObjectList,
            "RealmValueList" => (IList<T>)RealmValueList,
            
                            _ => throw new MissingMemberException($"The object does not have a Realm list property with name {propertyName}"),
                        };
        }
    
        public override ISet<T> GetSetValue<T>(string propertyName)
        {
            return propertyName switch
                        {
            "CharSet" => (ISet<T>)CharSet,
            "ByteSet" => (ISet<T>)ByteSet,
            "Int16Set" => (ISet<T>)Int16Set,
            "Int32Set" => (ISet<T>)Int32Set,
            "Int64Set" => (ISet<T>)Int64Set,
            "FloatSet" => (ISet<T>)FloatSet,
            "DoubleSet" => (ISet<T>)DoubleSet,
            "BooleanSet" => (ISet<T>)BooleanSet,
            "DecimalSet" => (ISet<T>)DecimalSet,
            "Decimal128Set" => (ISet<T>)Decimal128Set,
            "ObjectIdSet" => (ISet<T>)ObjectIdSet,
            "StringSet" => (ISet<T>)StringSet,
            "ByteArraySet" => (ISet<T>)ByteArraySet,
            "DateTimeOffsetSet" => (ISet<T>)DateTimeOffsetSet,
            "ObjectSet" => (ISet<T>)ObjectSet,
            "RealmValueSet" => (ISet<T>)RealmValueSet,
            
                            _ => throw new MissingMemberException($"The object does not have a Realm set property with name {propertyName}"),
                        };
        }
    
        public override IDictionary<string, TValue> GetDictionaryValue<TValue>(string propertyName)
        {
            return propertyName switch
            {
                "CharDict" => (IDictionary<string, TValue>)CharDict,
                "ByteDict" => (IDictionary<string, TValue>)ByteDict,
                "Int16Dict" => (IDictionary<string, TValue>)Int16Dict,
                "Int32Dict" => (IDictionary<string, TValue>)Int32Dict,
                "Int64Dict" => (IDictionary<string, TValue>)Int64Dict,
                "FloatDict" => (IDictionary<string, TValue>)FloatDict,
                "DoubleDict" => (IDictionary<string, TValue>)DoubleDict,
                "BooleanDict" => (IDictionary<string, TValue>)BooleanDict,
                "DecimalDict" => (IDictionary<string, TValue>)DecimalDict,
                "Decimal128Dict" => (IDictionary<string, TValue>)Decimal128Dict,
                "ObjectIdDict" => (IDictionary<string, TValue>)ObjectIdDict,
                "StringDict" => (IDictionary<string, TValue>)StringDict,
                "ByteArrayDict" => (IDictionary<string, TValue>)ByteArrayDict,
                "DateTimeOffsetDict" => (IDictionary<string, TValue>)DateTimeOffsetDict,
                "ObjectDict" => (IDictionary<string, TValue>)ObjectDict,
                "EmbeddedObjectDict" => (IDictionary<string, TValue>)EmbeddedObjectDict,
                "RealmValueDict" => (IDictionary<string, TValue>)RealmValueDict,
                _ => throw new MissingMemberException($"The object does not have a Realm dictionary property with name {propertyName}"),
            };
        }
    }
}

