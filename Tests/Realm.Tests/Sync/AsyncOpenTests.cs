////////////////////////////////////////////////////////////////////////////
//
// Copyright 2019 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////

using System;
using System.Linq;
using System.Threading.Tasks;
using NUnit.Framework;
using Realms.Sync;

namespace Realms.Tests.Sync
{
    [TestFixture, Preserve(AllMembers = true)]
    public class AsyncOpenTests : SyncTestBase
    {
        private const int OneMegabyte = 1024 * 1024;
        private const int NumberOfObjects = 10;

        // Make sure to call CleanupOnTearDown for each realm you get.
        [Test]
        public void AsyncOpen_Cancel_ShouldCancelWait()
        {
            SyncTestHelpers.RunRosTestAsync(async () =>
            {
                var config = await SyncTestHelpers.GetIntegrationConfigAsync("foo");
                await PopulateData(config);
                // Update config to make sure we're not opening the same Realm file.
                config = new FullSyncConfiguration(config.ServerUri, config.User, config.DatabasePath + "1");
                var asyncTask = Realm.GetInstanceAsync(config);

                var _ = Task.Run(async () =>
                {
                    await Task.Delay(1);
                    asyncTask.Cancel();
                });
                try
                {
                    var realm = await asyncTask;
                    CleanupOnTearDown(realm);
                    Assert.Fail("Expected task to be cancelled.");
                }
                catch (Exception ex)
                {
                    Assert.That(ex, Is.InstanceOf<TaskCanceledException>());
                }
            });
        }

        [Test]
        public void AsyncOpen_DownloadsTheRealm()
        {
            SyncTestHelpers.RunRosTestAsync(async () =>
            {
                var config = await SyncTestHelpers.GetIntegrationConfigAsync("foo");
                await PopulateData(config);
                // Update config to make sure we're not opening the same Realm file.
                config = new FullSyncConfiguration(config.ServerUri, config.User, config.DatabasePath + "1");
                var asyncTask = Realm.GetInstanceAsync(config);

                using (var realm = await asyncTask)
                {
                    CleanupOnTearDown(realm);

                    Assert.That(realm.All<HugeSyncObject>().Count(), Is.EqualTo(NumberOfObjects));
                    Assert.That(realm.All<HugeSyncObject>().First().Data.Length, Is.EqualTo(OneMegabyte));
                }
            });
        }

        private async Task PopulateData(FullSyncConfiguration config)
        {
            using (var realm = GetRealm(config))
            {
                realm.Write(() =>
                {
                    for (var i = 0; i < NumberOfObjects; i++)
                    {
                        realm.Add(new HugeSyncObject(OneMegabyte));
                    }
                });

                await GetSession(realm).WaitForUploadAsync();
            }
        }
    }
}