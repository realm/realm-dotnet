<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security" #>
<#@ output extension=".cs" #>
////////////////////////////////////////////////////////////////////////////
//
// Copyright 2023 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////

using System;
using System.Linq;
using MongoDB.Bson;
using Realms.Exceptions;
using Realms.Native;

namespace Realms
{
    /// <summary>
    /// A type that can represent any valid query argument type. It is typically used when filtering
    /// a Realm collection using the string-based query language - e.g. in
    /// <see cref="CollectionExtensions.Filter{T}(IQueryable{T}, string, QueryArgument[])"/>.
    /// </summary>
    public readonly struct QueryArgument
    {
        internal readonly RealmValue? RealmValue;
        internal readonly GeoShapeBase? GeoValue;

        private QueryArgument(RealmValue? realmValue = null, GeoShapeBase? geoValue = null)
        {
            RealmValue = realmValue;
            GeoValue = geoValue;
        }

<#
        var realmValueContents = GetFileContents("./RealmValue.cs");
        var implicitToRealmValueTypes = GetMatchedGroups(realmValueContents, _implicitTypeToRealmValueRegex, "fromType");
        foreach (var type in implicitToRealmValueTypes)
        {
#>
        /// <summary>
        /// Implicitly constructs a <see cref="QueryArgument"/> from <#= GetReference(type) #>.
        /// </summary>
        /// <param name="value">The value to store in the <see cref="QueryArgument"/>.</param>
        /// <returns>A <see cref="QueryArgument"/> containing the supplied <paramref name="value"/>.</returns>
        public static implicit operator QueryArgument(<#= type #> value) => new(value);

<#
        }
#>
        /// <summary>
        /// Implicitly constructs a <see cref="QueryArgument"/> from <see cref="RealmValue" />.
        /// </summary>
        /// <param name="value">The value to store in the <see cref="QueryArgument"/>.</param>
        /// <returns>A <see cref="QueryArgument"/> containing the supplied <paramref name="value"/>.</returns>
        public static implicit operator QueryArgument(RealmValue value) => new(value);

        /// <summary>
        /// Implicitly constructs a <see cref="QueryArgument"/> from <see cref="GeoShapeBase" />.
        /// </summary>
        /// <param name="value">The value to store in the <see cref="QueryArgument"/>.</param>
        /// <returns>A <see cref="QueryArgument"/> containing the supplied <paramref name="value"/>.</returns>
        public static implicit operator QueryArgument(GeoShapeBase? value) => new(geoValue: value);

        internal (NativeQueryArgument Value, RealmValue.HandlesToCleanup? Handles) ToNative()
        {
            if (RealmValue != null)
            {
                var primitive = RealmValue.Value;
                if (primitive.Type == RealmValueType.Object && !primitive.AsIRealmObject().IsManaged)
                {
                    throw new RealmException("Can't use unmanaged object as argument of Filter");
                }

                var (primitiveValue, handles) = primitive.ToNative();
                return (NativeQueryArgument.Primitive(primitiveValue), handles);
            }

            // We're dealing with a geo value
            return GeoValue switch
            {
                GeoBox box => (NativeQueryArgument.GeoBox(box.ToNative()), null),
                GeoCircle circle => (NativeQueryArgument.GeoCircle(circle.ToNative()), null),
                GeoPolygon polygon => polygon.ToNativeQueryArgument(),
                _ => throw new NotSupportedException($"Unsupported GeoShapeBase type: {GeoValue?.GetType().FullName}")
            };
        }

        /// <inheritdoc/>
        public override string ToString() => RealmValue?.ToString() ?? GeoValue?.ToString() ?? "Invalid QueryArgument";
    }
}
<#+
    private static readonly Regex _implicitTypeToRealmValueRegex = new Regex(@"public static implicit operator RealmValue\((?<fromType>\S*)");
    private static readonly Regex _explicitRealmValueToTypeRegex = new Regex(@"public static explicit operator (?<toType>[^\(]*)\(RealmValue");

    private IEnumerable<string> GetMatchedGroups(string target, Regex regex, string groupName)
    {
        return regex.Matches(target)
                .Cast<Match>()
                .Select(m => m.Groups[groupName].Value);
    }

    private string GetFileContents(string relativePath)
    {
        var realmValuePath = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), relativePath);
        return File.ReadAllText(realmValuePath);
    }

    private static string GetReference(string type)
    {
        var crefType = type.Replace("?", string.Empty).Replace("[]", string.Empty);
        if (type.StartsWith("RealmInteger"))
        {
            crefType = "RealmInteger{T}";
        }

        if (crefType == type)
        {
            return $"<see cref=\"{type}\"/>";
        }

        return $"<see cref=\"{crefType}\">{SecurityElement.Escape(type)}</see>";
    }
#>